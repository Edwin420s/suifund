{
  "version": 3,
  "sources": ["../../events/events.js", "../../@open-rpc/client-js/build/RequestManager.js", "../../@open-rpc/client-js/build/Error.js", "../../@open-rpc/client-js/build/transports/TransportRequestManager.js", "../../@open-rpc/client-js/build/transports/Transport.js", "../../@open-rpc/client-js/build/Request.js", "../../@open-rpc/client-js/build/transports/EventEmitterTransport.js", "../../whatwg-fetch/fetch.js", "../../isomorphic-fetch/fetch-npm-browserify.js", "../../@open-rpc/client-js/build/transports/HTTPTransport.js", "../../isomorphic-ws/browser.js", "../../@open-rpc/client-js/build/transports/WebSocketTransport.js", "../../@open-rpc/client-js/build/transports/PostMessageWindowTransport.js", "../../@open-rpc/client-js/build/transports/PostMessageIframeTransport.js", "../../@open-rpc/client-js/build/Client.js", "../../@open-rpc/client-js/build/index.js", "../../@mysten/bcs/src/b64.ts", "../../@mysten/bcs/src/hex.ts", "../../@mysten/bcs/src/index.ts", "../../@mysten/sui.js/src/bcs/index.ts", "../../@mysten/sui.js/src/utils/sui-types.ts", "../../@mysten/sui.js/src/builder/type-tag-serializer.ts", "../../@mysten/sui.js/src/builder/bcs.ts", "../../@mysten/sui.js/src/cryptography/signature.ts", "../../@mysten/sui.js/src/cryptography/intent.ts", "../../@mysten/sui.js/src/cryptography/publickey.ts", "../../@noble/hashes/src/sha256.ts", "../../@noble/curves/src/utils.ts", "../../@noble/curves/src/abstract/modular.ts", "../../@noble/curves/src/abstract/hash-to-curve.ts", "../../@noble/curves/src/abstract/curve.ts", "../../@noble/curves/src/abstract/weierstrass.ts", "../../@noble/curves/src/_shortw_utils.ts", "../../@noble/curves/src/nist.ts", "../../@noble/curves/src/p256.ts", "../../@mysten/sui.js/src/keypairs/secp256r1/publickey.ts", "../../@noble/curves/src/secp256k1.ts", "../../@mysten/sui.js/src/keypairs/secp256k1/publickey.ts", "../../@mysten/sui.js/src/keypairs/ed25519/publickey.ts", "../../@mysten/sui.js/src/cryptography/multisig.ts", "../../@mysten/sui.js/src/keypairs/ed25519/keypair.ts", "../../@mysten/sui.js/src/cryptography/mnemonics.ts", "../../@mysten/sui.js/src/keypairs/ed25519/ed25519-hd-key.ts", "../../@mysten/sui.js/src/cryptography/keypair.ts", "../../@noble/hashes/src/legacy.ts", "../../@scure/bip32/index.ts", "../../@mysten/sui.js/src/keypairs/secp256k1/keypair.ts", "../../@mysten/sui.js/src/cryptography/utils.ts", "../../@mysten/sui.js/src/types/checkpoints.ts", "../../@mysten/sui.js/src/types/common.ts", "../../@mysten/sui.js/src/types/objects.ts", "../../@mysten/sui.js/src/types/events.ts", "../../@mysten/sui.js/src/types/transactions.ts", "../../@mysten/sui.js/src/types/normalized.ts", "../../@mysten/sui.js/src/types/validator.ts", "../../@mysten/sui.js/src/types/coin.ts", "../../@mysten/sui.js/src/types/epochs.ts", "../../@mysten/sui.js/src/types/name-service.ts", "../../@mysten/sui.js/src/types/dynamic_fields.ts", "../../@mysten/sui.js/src/types/metrics.ts", "../../@mysten/sui.js/src/keypairs/secp256r1/keypair.ts", "../../@mysten/sui.js/src/rpc/client.ts", "../../@mysten/sui.js/src/version.ts", "../../@mysten/sui.js/src/rpc/errors.ts", "../../@mysten/sui.js/src/rpc/websocket-client.ts", "../../@mysten/sui.js/src/rpc/connection.ts", "../../@mysten/sui.js/src/builder/utils.ts", "../../@mysten/sui.js/src/builder/Transactions.ts", "../../@mysten/sui.js/src/builder/Inputs.ts", "../../@mysten/sui.js/src/types/option.ts", "../../@mysten/sui.js/src/framework/framework.ts", "../../@mysten/sui.js/src/builder/serializer.ts", "../../@mysten/sui.js/src/builder/hash.ts", "../../@mysten/sui.js/src/builder/TransactionBlockData.ts", "../../@mysten/sui.js/src/builder/TransactionBlock.ts", "../../@mysten/sui.js/src/faucet/index.ts", "../../@mysten/sui.js/src/providers/json-rpc-provider.ts", "../../@mysten/sui.js/src/signers/signer-with-provider.ts", "../../@mysten/sui.js/src/signers/raw-signer.ts", "../../@mysten/sui.js/src/utils/verify.ts", "../../@mysten/sui.js/src/utils/format.ts", "../../@mysten/sui.js/src/framework/sui-system-state.ts"],
  "sourcesContent": ["// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nvar R = typeof Reflect === 'object' ? Reflect : null\r\nvar ReflectApply = R && typeof R.apply === 'function'\r\n  ? R.apply\r\n  : function ReflectApply(target, receiver, args) {\r\n    return Function.prototype.apply.call(target, receiver, args);\r\n  }\r\n\r\nvar ReflectOwnKeys\r\nif (R && typeof R.ownKeys === 'function') {\r\n  ReflectOwnKeys = R.ownKeys\r\n} else if (Object.getOwnPropertySymbols) {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target)\r\n      .concat(Object.getOwnPropertySymbols(target));\r\n  };\r\n} else {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target);\r\n  };\r\n}\r\n\r\nfunction ProcessEmitWarning(warning) {\r\n  if (console && console.warn) console.warn(warning);\r\n}\r\n\r\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\r\n  return value !== value;\r\n}\r\n\r\nfunction EventEmitter() {\r\n  EventEmitter.init.call(this);\r\n}\r\nmodule.exports = EventEmitter;\r\nmodule.exports.once = once;\r\n\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._eventsCount = 0;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nvar defaultMaxListeners = 10;\r\n\r\nfunction checkListener(listener) {\r\n  if (typeof listener !== 'function') {\r\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\r\n  }\r\n}\r\n\r\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return defaultMaxListeners;\r\n  },\r\n  set: function(arg) {\r\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\r\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\r\n    }\r\n    defaultMaxListeners = arg;\r\n  }\r\n});\r\n\r\nEventEmitter.init = function() {\r\n\r\n  if (this._events === undefined ||\r\n      this._events === Object.getPrototypeOf(this)._events) {\r\n    this._events = Object.create(null);\r\n    this._eventsCount = 0;\r\n  }\r\n\r\n  this._maxListeners = this._maxListeners || undefined;\r\n};\r\n\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\r\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\r\n  }\r\n  this._maxListeners = n;\r\n  return this;\r\n};\r\n\r\nfunction _getMaxListeners(that) {\r\n  if (that._maxListeners === undefined)\r\n    return EventEmitter.defaultMaxListeners;\r\n  return that._maxListeners;\r\n}\r\n\r\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n  return _getMaxListeners(this);\r\n};\r\n\r\nEventEmitter.prototype.emit = function emit(type) {\r\n  var args = [];\r\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\r\n  var doError = (type === 'error');\r\n\r\n  var events = this._events;\r\n  if (events !== undefined)\r\n    doError = (doError && events.error === undefined);\r\n  else if (!doError)\r\n    return false;\r\n\r\n  // If there is no 'error' event listener then throw.\r\n  if (doError) {\r\n    var er;\r\n    if (args.length > 0)\r\n      er = args[0];\r\n    if (er instanceof Error) {\r\n      // Note: The comments on the `throw` lines are intentional, they show\r\n      // up in Node's output if this results in an unhandled exception.\r\n      throw er; // Unhandled 'error' event\r\n    }\r\n    // At least give some kind of context to the user\r\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\r\n    err.context = er;\r\n    throw err; // Unhandled 'error' event\r\n  }\r\n\r\n  var handler = events[type];\r\n\r\n  if (handler === undefined)\r\n    return false;\r\n\r\n  if (typeof handler === 'function') {\r\n    ReflectApply(handler, this, args);\r\n  } else {\r\n    var len = handler.length;\r\n    var listeners = arrayClone(handler, len);\r\n    for (var i = 0; i < len; ++i)\r\n      ReflectApply(listeners[i], this, args);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _addListener(target, type, listener, prepend) {\r\n  var m;\r\n  var events;\r\n  var existing;\r\n\r\n  checkListener(listener);\r\n\r\n  events = target._events;\r\n  if (events === undefined) {\r\n    events = target._events = Object.create(null);\r\n    target._eventsCount = 0;\r\n  } else {\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (events.newListener !== undefined) {\r\n      target.emit('newListener', type,\r\n                  listener.listener ? listener.listener : listener);\r\n\r\n      // Re-assign `events` because a newListener handler could have caused the\r\n      // this._events to be assigned to a new object\r\n      events = target._events;\r\n    }\r\n    existing = events[type];\r\n  }\r\n\r\n  if (existing === undefined) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    existing = events[type] = listener;\r\n    ++target._eventsCount;\r\n  } else {\r\n    if (typeof existing === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      existing = events[type] =\r\n        prepend ? [listener, existing] : [existing, listener];\r\n      // If we've already got an array, just append.\r\n    } else if (prepend) {\r\n      existing.unshift(listener);\r\n    } else {\r\n      existing.push(listener);\r\n    }\r\n\r\n    // Check for listener leak\r\n    m = _getMaxListeners(target);\r\n    if (m > 0 && existing.length > m && !existing.warned) {\r\n      existing.warned = true;\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\r\n                          existing.length + ' ' + String(type) + ' listeners ' +\r\n                          'added. Use emitter.setMaxListeners() to ' +\r\n                          'increase limit');\r\n      w.name = 'MaxListenersExceededWarning';\r\n      w.emitter = target;\r\n      w.type = type;\r\n      w.count = existing.length;\r\n      ProcessEmitWarning(w);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nEventEmitter.prototype.addListener = function addListener(type, listener) {\r\n  return _addListener(this, type, listener, false);\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\nEventEmitter.prototype.prependListener =\r\n    function prependListener(type, listener) {\r\n      return _addListener(this, type, listener, true);\r\n    };\r\n\r\nfunction onceWrapper() {\r\n  if (!this.fired) {\r\n    this.target.removeListener(this.type, this.wrapFn);\r\n    this.fired = true;\r\n    if (arguments.length === 0)\r\n      return this.listener.call(this.target);\r\n    return this.listener.apply(this.target, arguments);\r\n  }\r\n}\r\n\r\nfunction _onceWrap(target, type, listener) {\r\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\r\n  var wrapped = onceWrapper.bind(state);\r\n  wrapped.listener = listener;\r\n  state.wrapFn = wrapped;\r\n  return wrapped;\r\n}\r\n\r\nEventEmitter.prototype.once = function once(type, listener) {\r\n  checkListener(listener);\r\n  this.on(type, _onceWrap(this, type, listener));\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.prependOnceListener =\r\n    function prependOnceListener(type, listener) {\r\n      checkListener(listener);\r\n      this.prependListener(type, _onceWrap(this, type, listener));\r\n      return this;\r\n    };\r\n\r\n// Emits a 'removeListener' event if and only if the listener was removed.\r\nEventEmitter.prototype.removeListener =\r\n    function removeListener(type, listener) {\r\n      var list, events, position, i, originalListener;\r\n\r\n      checkListener(listener);\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      list = events[type];\r\n      if (list === undefined)\r\n        return this;\r\n\r\n      if (list === listener || list.listener === listener) {\r\n        if (--this._eventsCount === 0)\r\n          this._events = Object.create(null);\r\n        else {\r\n          delete events[type];\r\n          if (events.removeListener)\r\n            this.emit('removeListener', type, list.listener || listener);\r\n        }\r\n      } else if (typeof list !== 'function') {\r\n        position = -1;\r\n\r\n        for (i = list.length - 1; i >= 0; i--) {\r\n          if (list[i] === listener || list[i].listener === listener) {\r\n            originalListener = list[i].listener;\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0)\r\n          return this;\r\n\r\n        if (position === 0)\r\n          list.shift();\r\n        else {\r\n          spliceOne(list, position);\r\n        }\r\n\r\n        if (list.length === 1)\r\n          events[type] = list[0];\r\n\r\n        if (events.removeListener !== undefined)\r\n          this.emit('removeListener', type, originalListener || listener);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n\r\nEventEmitter.prototype.removeAllListeners =\r\n    function removeAllListeners(type) {\r\n      var listeners, events, i;\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      // not listening for removeListener, no need to emit\r\n      if (events.removeListener === undefined) {\r\n        if (arguments.length === 0) {\r\n          this._events = Object.create(null);\r\n          this._eventsCount = 0;\r\n        } else if (events[type] !== undefined) {\r\n          if (--this._eventsCount === 0)\r\n            this._events = Object.create(null);\r\n          else\r\n            delete events[type];\r\n        }\r\n        return this;\r\n      }\r\n\r\n      // emit removeListener for all listeners on all events\r\n      if (arguments.length === 0) {\r\n        var keys = Object.keys(events);\r\n        var key;\r\n        for (i = 0; i < keys.length; ++i) {\r\n          key = keys[i];\r\n          if (key === 'removeListener') continue;\r\n          this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners('removeListener');\r\n        this._events = Object.create(null);\r\n        this._eventsCount = 0;\r\n        return this;\r\n      }\r\n\r\n      listeners = events[type];\r\n\r\n      if (typeof listeners === 'function') {\r\n        this.removeListener(type, listeners);\r\n      } else if (listeners !== undefined) {\r\n        // LIFO order\r\n        for (i = listeners.length - 1; i >= 0; i--) {\r\n          this.removeListener(type, listeners[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nfunction _listeners(target, type, unwrap) {\r\n  var events = target._events;\r\n\r\n  if (events === undefined)\r\n    return [];\r\n\r\n  var evlistener = events[type];\r\n  if (evlistener === undefined)\r\n    return [];\r\n\r\n  if (typeof evlistener === 'function')\r\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n\r\n  return unwrap ?\r\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\r\n}\r\n\r\nEventEmitter.prototype.listeners = function listeners(type) {\r\n  return _listeners(this, type, true);\r\n};\r\n\r\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n  return _listeners(this, type, false);\r\n};\r\n\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n  if (typeof emitter.listenerCount === 'function') {\r\n    return emitter.listenerCount(type);\r\n  } else {\r\n    return listenerCount.call(emitter, type);\r\n  }\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = listenerCount;\r\nfunction listenerCount(type) {\r\n  var events = this._events;\r\n\r\n  if (events !== undefined) {\r\n    var evlistener = events[type];\r\n\r\n    if (typeof evlistener === 'function') {\r\n      return 1;\r\n    } else if (evlistener !== undefined) {\r\n      return evlistener.length;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nEventEmitter.prototype.eventNames = function eventNames() {\r\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\r\n};\r\n\r\nfunction arrayClone(arr, n) {\r\n  var copy = new Array(n);\r\n  for (var i = 0; i < n; ++i)\r\n    copy[i] = arr[i];\r\n  return copy;\r\n}\r\n\r\nfunction spliceOne(list, index) {\r\n  for (; index + 1 < list.length; index++)\r\n    list[index] = list[index + 1];\r\n  list.pop();\r\n}\r\n\r\nfunction unwrapListeners(arr) {\r\n  var ret = new Array(arr.length);\r\n  for (var i = 0; i < ret.length; ++i) {\r\n    ret[i] = arr[i].listener || arr[i];\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction once(emitter, name) {\r\n  return new Promise(function (resolve, reject) {\r\n    function errorListener(err) {\r\n      emitter.removeListener(name, resolver);\r\n      reject(err);\r\n    }\r\n\r\n    function resolver() {\r\n      if (typeof emitter.removeListener === 'function') {\r\n        emitter.removeListener('error', errorListener);\r\n      }\r\n      resolve([].slice.call(arguments));\r\n    };\r\n\r\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\r\n    if (name !== 'error') {\r\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\r\n    }\r\n  });\r\n}\r\n\r\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\r\n  if (typeof emitter.on === 'function') {\r\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\r\n  }\r\n}\r\n\r\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\r\n  if (typeof emitter.on === 'function') {\r\n    if (flags.once) {\r\n      emitter.once(name, listener);\r\n    } else {\r\n      emitter.on(name, listener);\r\n    }\r\n  } else if (typeof emitter.addEventListener === 'function') {\r\n    // EventTarget does not have `error` event semantics like Node\r\n    // EventEmitters, we do not listen for `error` events here.\r\n    emitter.addEventListener(name, function wrapListener(arg) {\r\n      // IE does not have builtin `{ once: true }` support so we\r\n      // have to do it manually.\r\n      if (flags.once) {\r\n        emitter.removeEventListener(name, wrapListener);\r\n      }\r\n      listener(arg);\r\n    });\r\n  } else {\r\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\r\n  }\r\n}\r\n", "\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.defaultNextRequest = void 0;\r\nvar events_1 = require(\"events\");\r\nexports.defaultNextRequest = function () {\r\n    var lastId = -1;\r\n    return function () { return ++lastId; };\r\n};\r\n/*\r\n** Naive Request Manager, only use 1st transport.\r\n * A more complex request manager could try each transport.\r\n * If a transport fails, or times out, move on to the next.\r\n */\r\nvar RequestManager = /** @class */ (function () {\r\n    function RequestManager(transports, nextID) {\r\n        if (nextID === void 0) { nextID = exports.defaultNextRequest(); }\r\n        this.batch = [];\r\n        this.batchStarted = false;\r\n        this.lastId = -1;\r\n        this.transports = transports;\r\n        this.requests = {};\r\n        this.connectPromise = this.connect();\r\n        this.requestChannel = new events_1.EventEmitter();\r\n        this.nextID = nextID;\r\n    }\r\n    RequestManager.prototype.connect = function () {\r\n        var _this = this;\r\n        return Promise.all(this.transports.map(function (transport) { return __awaiter(_this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        transport.subscribe(\"error\", this.handleError.bind(this));\r\n                        transport.subscribe(\"notification\", this.handleNotification.bind(this));\r\n                        return [4 /*yield*/, transport.connect()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); }));\r\n    };\r\n    RequestManager.prototype.getPrimaryTransport = function () {\r\n        return this.transports[0];\r\n    };\r\n    RequestManager.prototype.request = function (requestObject, notification, timeout) {\r\n        if (notification === void 0) { notification = false; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var internalID, id, payload, result;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                internalID = this.nextID().toString();\r\n                id = notification ? null : internalID;\r\n                payload = { request: this.makeRequest(requestObject.method, requestObject.params || [], id), internalID: internalID };\r\n                if (this.batchStarted) {\r\n                    result = new Promise(function (resolve, reject) {\r\n                        _this.batch.push({ resolve: resolve, reject: reject, request: payload });\r\n                    });\r\n                    return [2 /*return*/, result];\r\n                }\r\n                return [2 /*return*/, this.getPrimaryTransport().sendData(payload, timeout)];\r\n            });\r\n        });\r\n    };\r\n    RequestManager.prototype.close = function () {\r\n        this.requestChannel.removeAllListeners();\r\n        this.transports.forEach(function (transport) {\r\n            transport.unsubscribe();\r\n            transport.close();\r\n        });\r\n    };\r\n    /**\r\n     * Begins a batch call by setting the [[RequestManager.batchStarted]] flag to `true`.\r\n     *\r\n     * [[RequestManager.batch]] is a singleton - only one batch can exist at a given time, per [[RequestManager]].\r\n     *\r\n     */\r\n    RequestManager.prototype.startBatch = function () {\r\n        this.batchStarted = true;\r\n    };\r\n    RequestManager.prototype.stopBatch = function () {\r\n        if (this.batchStarted === false) {\r\n            throw new Error(\"cannot end that which has never started\");\r\n        }\r\n        if (this.batch.length === 0) {\r\n            this.batchStarted = false;\r\n            return;\r\n        }\r\n        this.getPrimaryTransport().sendData(this.batch);\r\n        this.batch = [];\r\n        this.batchStarted = false;\r\n    };\r\n    RequestManager.prototype.makeRequest = function (method, params, id) {\r\n        if (id) {\r\n            return { jsonrpc: \"2.0\", id: id, method: method, params: params };\r\n        }\r\n        return { jsonrpc: \"2.0\", method: method, params: params };\r\n    };\r\n    RequestManager.prototype.handleError = function (data) {\r\n        this.requestChannel.emit(\"error\", data);\r\n    };\r\n    RequestManager.prototype.handleNotification = function (data) {\r\n        this.requestChannel.emit(\"notification\", data);\r\n    };\r\n    return RequestManager;\r\n}());\r\nexports.default = RequestManager;\r\n", "\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertJSONToRPCError = exports.JSONRPCError = exports.ERR_UNKNOWN = exports.ERR_MISSIING_ID = exports.ERR_TIMEOUT = void 0;\r\nexports.ERR_TIMEOUT = 7777;\r\nexports.ERR_MISSIING_ID = 7878;\r\nexports.ERR_UNKNOWN = 7979;\r\nvar JSONRPCError = /** @class */ (function (_super) {\r\n    __extends(JSONRPCError, _super);\r\n    function JSONRPCError(message, code, data) {\r\n        var _newTarget = this.constructor;\r\n        var _this = _super.call(this, message) || this;\r\n        _this.message = message;\r\n        _this.code = code;\r\n        _this.data = data;\r\n        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain: see https://github.com/open-rpc/client-js/issues/209\r\n        return _this;\r\n    }\r\n    return JSONRPCError;\r\n}(Error));\r\nexports.JSONRPCError = JSONRPCError;\r\nexports.convertJSONToRPCError = function (payload) {\r\n    if (payload.error) {\r\n        var _a = payload.error, message = _a.message, code = _a.code, data = _a.data;\r\n        return new JSONRPCError(message, code, data);\r\n    }\r\n    return new JSONRPCError(\"Unknown error\", exports.ERR_UNKNOWN, payload);\r\n};\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TransportRequestManager = void 0;\r\nvar events_1 = require(\"events\");\r\nvar Error_1 = require(\"../Error\");\r\nvar TransportRequestManager = /** @class */ (function () {\r\n    function TransportRequestManager() {\r\n        this.pendingRequest = {};\r\n        this.pendingBatchRequest = {};\r\n        this.transportEventChannel = new events_1.EventEmitter();\r\n    }\r\n    TransportRequestManager.prototype.addRequest = function (data, timeout) {\r\n        this.transportEventChannel.emit(\"pending\", data);\r\n        if (data instanceof Array) {\r\n            this.addBatchReq(data, timeout);\r\n            return Promise.resolve();\r\n        }\r\n        return this.addReq(data.internalID, timeout);\r\n    };\r\n    TransportRequestManager.prototype.settlePendingRequest = function (request, error) {\r\n        var _this = this;\r\n        request.forEach(function (req) {\r\n            var resolver = _this.pendingRequest[req.internalID];\r\n            delete _this.pendingBatchRequest[req.internalID];\r\n            if (resolver === undefined) {\r\n                return;\r\n            }\r\n            if (error) {\r\n                resolver.reject(error);\r\n                return;\r\n            }\r\n            resolver.resolve();\r\n            // Notifications have no response and should clear their own pending requests\r\n            if (req.request.id === null || req.request.id === undefined) {\r\n                delete _this.pendingRequest[req.internalID];\r\n            }\r\n        });\r\n    };\r\n    TransportRequestManager.prototype.isPendingRequest = function (id) {\r\n        return this.pendingRequest.hasOwnProperty(id);\r\n    };\r\n    TransportRequestManager.prototype.resolveResponse = function (payload, emitError) {\r\n        if (emitError === void 0) { emitError = true; }\r\n        var data = payload;\r\n        try {\r\n            data = JSON.parse(payload);\r\n            if (this.checkJSONRPC(data) === false) {\r\n                return; // ignore messages that are not conforming to JSON-RPC\r\n            }\r\n            if (data instanceof Array) {\r\n                return this.resolveBatch(data, emitError);\r\n            }\r\n            return this.resolveRes(data, emitError);\r\n        }\r\n        catch (e) {\r\n            var err = new Error_1.JSONRPCError(\"Bad response format\", Error_1.ERR_UNKNOWN, payload);\r\n            if (emitError) {\r\n                this.transportEventChannel.emit(\"error\", err);\r\n            }\r\n            return err;\r\n        }\r\n    };\r\n    TransportRequestManager.prototype.addBatchReq = function (batches, timeout) {\r\n        var _this = this;\r\n        batches.forEach(function (batch) {\r\n            var resolve = batch.resolve, reject = batch.reject;\r\n            var internalID = batch.request.internalID;\r\n            _this.pendingBatchRequest[internalID] = true;\r\n            _this.pendingRequest[internalID] = { resolve: resolve, reject: reject };\r\n        });\r\n        return Promise.resolve();\r\n    };\r\n    TransportRequestManager.prototype.addReq = function (id, timeout) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (timeout !== null && timeout) {\r\n                _this.setRequestTimeout(id, timeout, reject);\r\n            }\r\n            _this.pendingRequest[id] = { resolve: resolve, reject: reject };\r\n        });\r\n    };\r\n    TransportRequestManager.prototype.checkJSONRPC = function (data) {\r\n        var payload = [data];\r\n        if (data instanceof Array) {\r\n            payload = data;\r\n        }\r\n        return payload.every(function (datum) { return (datum.result !== undefined || datum.error !== undefined || datum.method !== undefined); });\r\n    };\r\n    TransportRequestManager.prototype.processResult = function (payload, prom) {\r\n        if (payload.error) {\r\n            var err = Error_1.convertJSONToRPCError(payload);\r\n            prom.reject(err);\r\n            return;\r\n        }\r\n        prom.resolve(payload.result);\r\n    };\r\n    TransportRequestManager.prototype.resolveBatch = function (payload, emitError) {\r\n        var _this = this;\r\n        var results = payload.map(function (datum) {\r\n            return _this.resolveRes(datum, emitError);\r\n        });\r\n        var errors = results.filter(function (result) { return result; });\r\n        if (errors.length > 0) {\r\n            return errors[0];\r\n        }\r\n        return undefined;\r\n    };\r\n    TransportRequestManager.prototype.resolveRes = function (data, emitError) {\r\n        var id = data.id, error = data.error;\r\n        var status = this.pendingRequest[id];\r\n        if (status) {\r\n            delete this.pendingRequest[id];\r\n            this.processResult(data, status);\r\n            this.transportEventChannel.emit(\"response\", data);\r\n            return;\r\n        }\r\n        if (id === undefined && error === undefined) {\r\n            this.transportEventChannel.emit(\"notification\", data);\r\n            return;\r\n        }\r\n        var err;\r\n        if (error) {\r\n            err = Error_1.convertJSONToRPCError(data);\r\n        }\r\n        if (emitError && error && err) {\r\n            this.transportEventChannel.emit(\"error\", err);\r\n        }\r\n        return err;\r\n    };\r\n    TransportRequestManager.prototype.setRequestTimeout = function (id, timeout, reject) {\r\n        var _this = this;\r\n        setTimeout(function () {\r\n            delete _this.pendingRequest[id];\r\n            reject(new Error_1.JSONRPCError(\"Request timeout request took longer than \" + timeout + \" ms to resolve\", Error_1.ERR_TIMEOUT));\r\n        }, timeout);\r\n    };\r\n    return TransportRequestManager;\r\n}());\r\nexports.TransportRequestManager = TransportRequestManager;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Transport = void 0;\r\nvar TransportRequestManager_1 = require(\"./TransportRequestManager\");\r\nvar Transport = /** @class */ (function () {\r\n    function Transport() {\r\n        this.transportRequestManager = new TransportRequestManager_1.TransportRequestManager();\r\n        // add a noop for the error event to not require handling the error event\r\n        // tslint:disable-next-line:no-empty\r\n        this.transportRequestManager.transportEventChannel.on(\"error\", function () { });\r\n    }\r\n    Transport.prototype.subscribe = function (event, handler) {\r\n        this.transportRequestManager.transportEventChannel.addListener(event, handler);\r\n    };\r\n    Transport.prototype.unsubscribe = function (event, handler) {\r\n        if (!event) {\r\n            return this.transportRequestManager.transportEventChannel.removeAllListeners();\r\n        }\r\n        if (event && handler) {\r\n            this.transportRequestManager.transportEventChannel.removeListener(event, handler);\r\n        }\r\n    };\r\n    Transport.prototype.parseData = function (data) {\r\n        if (data instanceof Array) {\r\n            return data.map(function (batch) { return batch.request.request; });\r\n        }\r\n        return data.request;\r\n    };\r\n    return Transport;\r\n}());\r\nexports.Transport = Transport;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getNotifications = exports.getBatchRequests = exports.isNotification = void 0;\r\nexports.isNotification = function (data) {\r\n    return (data.request.id === undefined || data.request.id === null);\r\n};\r\nexports.getBatchRequests = function (data) {\r\n    if (data instanceof Array) {\r\n        return data.filter(function (datum) {\r\n            var id = datum.request.request.id;\r\n            return id !== null && id !== undefined;\r\n        }).map(function (batchRequest) {\r\n            return batchRequest.request;\r\n        });\r\n    }\r\n    return [];\r\n};\r\nexports.getNotifications = function (data) {\r\n    if (data instanceof Array) {\r\n        return data.filter(function (datum) {\r\n            return exports.isNotification(datum.request);\r\n        }).map(function (batchRequest) {\r\n            return batchRequest.request;\r\n        });\r\n    }\r\n    if (exports.isNotification(data)) {\r\n        return [data];\r\n    }\r\n    return [];\r\n};\r\n", "\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Transport_1 = require(\"./Transport\");\r\nvar Request_1 = require(\"../Request\");\r\nvar Error_1 = require(\"../Error\");\r\nvar EventEmitterTransport = /** @class */ (function (_super) {\r\n    __extends(EventEmitterTransport, _super);\r\n    function EventEmitterTransport(destEmitter, reqUri, resUri) {\r\n        var _this = _super.call(this) || this;\r\n        _this.connection = destEmitter;\r\n        _this.reqUri = reqUri;\r\n        _this.resUri = resUri;\r\n        return _this;\r\n    }\r\n    EventEmitterTransport.prototype.connect = function () {\r\n        var _this = this;\r\n        this.connection.on(this.resUri, function (data) {\r\n            _this.transportRequestManager.resolveResponse(data);\r\n        });\r\n        return Promise.resolve();\r\n    };\r\n    EventEmitterTransport.prototype.sendData = function (data, timeout) {\r\n        if (timeout === void 0) { timeout = null; }\r\n        var prom = this.transportRequestManager.addRequest(data, timeout);\r\n        var notifications = Request_1.getNotifications(data);\r\n        var parsedData = this.parseData(data);\r\n        try {\r\n            this.connection.emit(this.reqUri, parsedData);\r\n            this.transportRequestManager.settlePendingRequest(notifications);\r\n            return prom;\r\n        }\r\n        catch (e) {\r\n            var responseErr = new Error_1.JSONRPCError(e.message, Error_1.ERR_UNKNOWN, e);\r\n            this.transportRequestManager.settlePendingRequest(notifications, responseErr);\r\n            return Promise.reject(responseErr);\r\n        }\r\n    };\r\n    EventEmitterTransport.prototype.close = function () {\r\n        this.connection.removeAllListeners();\r\n    };\r\n    return EventEmitterTransport;\r\n}(Transport_1.Transport));\r\nexports.default = EventEmitterTransport;\r\n", "/* eslint-disable no-prototype-builtins */\r\nvar g =\r\n  (typeof globalThis !== 'undefined' && globalThis) ||\r\n  (typeof self !== 'undefined' && self) ||\r\n  // eslint-disable-next-line no-undef\r\n  (typeof global !== 'undefined' && global) ||\r\n  {}\r\n\r\nvar support = {\r\n  searchParams: 'URLSearchParams' in g,\r\n  iterable: 'Symbol' in g && 'iterator' in Symbol,\r\n  blob:\r\n    'FileReader' in g &&\r\n    'Blob' in g &&\r\n    (function() {\r\n      try {\r\n        new Blob()\r\n        return true\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    })(),\r\n  formData: 'FormData' in g,\r\n  arrayBuffer: 'ArrayBuffer' in g\r\n}\r\n\r\nfunction isDataView(obj) {\r\n  return obj && DataView.prototype.isPrototypeOf(obj)\r\n}\r\n\r\nif (support.arrayBuffer) {\r\n  var viewClasses = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]'\r\n  ]\r\n\r\n  var isArrayBufferView =\r\n    ArrayBuffer.isView ||\r\n    function(obj) {\r\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\r\n    }\r\n}\r\n\r\nfunction normalizeName(name) {\r\n  if (typeof name !== 'string') {\r\n    name = String(name)\r\n  }\r\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\r\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\r\n  }\r\n  return name.toLowerCase()\r\n}\r\n\r\nfunction normalizeValue(value) {\r\n  if (typeof value !== 'string') {\r\n    value = String(value)\r\n  }\r\n  return value\r\n}\r\n\r\n// Build a destructive iterator for the value list\r\nfunction iteratorFor(items) {\r\n  var iterator = {\r\n    next: function() {\r\n      var value = items.shift()\r\n      return {done: value === undefined, value: value}\r\n    }\r\n  }\r\n\r\n  if (support.iterable) {\r\n    iterator[Symbol.iterator] = function() {\r\n      return iterator\r\n    }\r\n  }\r\n\r\n  return iterator\r\n}\r\n\r\nexport function Headers(headers) {\r\n  this.map = {}\r\n\r\n  if (headers instanceof Headers) {\r\n    headers.forEach(function(value, name) {\r\n      this.append(name, value)\r\n    }, this)\r\n  } else if (Array.isArray(headers)) {\r\n    headers.forEach(function(header) {\r\n      if (header.length != 2) {\r\n        throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)\r\n      }\r\n      this.append(header[0], header[1])\r\n    }, this)\r\n  } else if (headers) {\r\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\r\n      this.append(name, headers[name])\r\n    }, this)\r\n  }\r\n}\r\n\r\nHeaders.prototype.append = function(name, value) {\r\n  name = normalizeName(name)\r\n  value = normalizeValue(value)\r\n  var oldValue = this.map[name]\r\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\r\n}\r\n\r\nHeaders.prototype['delete'] = function(name) {\r\n  delete this.map[normalizeName(name)]\r\n}\r\n\r\nHeaders.prototype.get = function(name) {\r\n  name = normalizeName(name)\r\n  return this.has(name) ? this.map[name] : null\r\n}\r\n\r\nHeaders.prototype.has = function(name) {\r\n  return this.map.hasOwnProperty(normalizeName(name))\r\n}\r\n\r\nHeaders.prototype.set = function(name, value) {\r\n  this.map[normalizeName(name)] = normalizeValue(value)\r\n}\r\n\r\nHeaders.prototype.forEach = function(callback, thisArg) {\r\n  for (var name in this.map) {\r\n    if (this.map.hasOwnProperty(name)) {\r\n      callback.call(thisArg, this.map[name], name, this)\r\n    }\r\n  }\r\n}\r\n\r\nHeaders.prototype.keys = function() {\r\n  var items = []\r\n  this.forEach(function(value, name) {\r\n    items.push(name)\r\n  })\r\n  return iteratorFor(items)\r\n}\r\n\r\nHeaders.prototype.values = function() {\r\n  var items = []\r\n  this.forEach(function(value) {\r\n    items.push(value)\r\n  })\r\n  return iteratorFor(items)\r\n}\r\n\r\nHeaders.prototype.entries = function() {\r\n  var items = []\r\n  this.forEach(function(value, name) {\r\n    items.push([name, value])\r\n  })\r\n  return iteratorFor(items)\r\n}\r\n\r\nif (support.iterable) {\r\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\r\n}\r\n\r\nfunction consumed(body) {\r\n  if (body._noBody) return\r\n  if (body.bodyUsed) {\r\n    return Promise.reject(new TypeError('Already read'))\r\n  }\r\n  body.bodyUsed = true\r\n}\r\n\r\nfunction fileReaderReady(reader) {\r\n  return new Promise(function(resolve, reject) {\r\n    reader.onload = function() {\r\n      resolve(reader.result)\r\n    }\r\n    reader.onerror = function() {\r\n      reject(reader.error)\r\n    }\r\n  })\r\n}\r\n\r\nfunction readBlobAsArrayBuffer(blob) {\r\n  var reader = new FileReader()\r\n  var promise = fileReaderReady(reader)\r\n  reader.readAsArrayBuffer(blob)\r\n  return promise\r\n}\r\n\r\nfunction readBlobAsText(blob) {\r\n  var reader = new FileReader()\r\n  var promise = fileReaderReady(reader)\r\n  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type)\r\n  var encoding = match ? match[1] : 'utf-8'\r\n  reader.readAsText(blob, encoding)\r\n  return promise\r\n}\r\n\r\nfunction readArrayBufferAsText(buf) {\r\n  var view = new Uint8Array(buf)\r\n  var chars = new Array(view.length)\r\n\r\n  for (var i = 0; i < view.length; i++) {\r\n    chars[i] = String.fromCharCode(view[i])\r\n  }\r\n  return chars.join('')\r\n}\r\n\r\nfunction bufferClone(buf) {\r\n  if (buf.slice) {\r\n    return buf.slice(0)\r\n  } else {\r\n    var view = new Uint8Array(buf.byteLength)\r\n    view.set(new Uint8Array(buf))\r\n    return view.buffer\r\n  }\r\n}\r\n\r\nfunction Body() {\r\n  this.bodyUsed = false\r\n\r\n  this._initBody = function(body) {\r\n    /*\r\n      fetch-mock wraps the Response object in an ES6 Proxy to\r\n      provide useful test harness features such as flush. However, on\r\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\r\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\r\n      on the object before the Proxy is created. This change ensures\r\n      Response.bodyUsed exists on the instance, while maintaining the\r\n      semantic of setting Request.bodyUsed in the constructor before\r\n      _initBody is called.\r\n    */\r\n    // eslint-disable-next-line no-self-assign\r\n    this.bodyUsed = this.bodyUsed\r\n    this._bodyInit = body\r\n    if (!body) {\r\n      this._noBody = true;\r\n      this._bodyText = ''\r\n    } else if (typeof body === 'string') {\r\n      this._bodyText = body\r\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\r\n      this._bodyBlob = body\r\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\r\n      this._bodyFormData = body\r\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\r\n      this._bodyText = body.toString()\r\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\r\n      this._bodyArrayBuffer = bufferClone(body.buffer)\r\n      // IE 10-11 can't handle a DataView body.\r\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\r\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\r\n      this._bodyArrayBuffer = bufferClone(body)\r\n    } else {\r\n      this._bodyText = body = Object.prototype.toString.call(body)\r\n    }\r\n\r\n    if (!this.headers.get('content-type')) {\r\n      if (typeof body === 'string') {\r\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\r\n      } else if (this._bodyBlob && this._bodyBlob.type) {\r\n        this.headers.set('content-type', this._bodyBlob.type)\r\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\r\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\r\n      }\r\n    }\r\n  }\r\n\r\n  if (support.blob) {\r\n    this.blob = function() {\r\n      var rejected = consumed(this)\r\n      if (rejected) {\r\n        return rejected\r\n      }\r\n\r\n      if (this._bodyBlob) {\r\n        return Promise.resolve(this._bodyBlob)\r\n      } else if (this._bodyArrayBuffer) {\r\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\r\n      } else if (this._bodyFormData) {\r\n        throw new Error('could not read FormData body as blob')\r\n      } else {\r\n        return Promise.resolve(new Blob([this._bodyText]))\r\n      }\r\n    }\r\n  }\r\n\r\n  this.arrayBuffer = function() {\r\n    if (this._bodyArrayBuffer) {\r\n      var isConsumed = consumed(this)\r\n      if (isConsumed) {\r\n        return isConsumed\r\n      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\r\n        return Promise.resolve(\r\n          this._bodyArrayBuffer.buffer.slice(\r\n            this._bodyArrayBuffer.byteOffset,\r\n            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\r\n          )\r\n        )\r\n      } else {\r\n        return Promise.resolve(this._bodyArrayBuffer)\r\n      }\r\n    } else if (support.blob) {\r\n      return this.blob().then(readBlobAsArrayBuffer)\r\n    } else {\r\n      throw new Error('could not read as ArrayBuffer')\r\n    }\r\n  }\r\n\r\n  this.text = function() {\r\n    var rejected = consumed(this)\r\n    if (rejected) {\r\n      return rejected\r\n    }\r\n\r\n    if (this._bodyBlob) {\r\n      return readBlobAsText(this._bodyBlob)\r\n    } else if (this._bodyArrayBuffer) {\r\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\r\n    } else if (this._bodyFormData) {\r\n      throw new Error('could not read FormData body as text')\r\n    } else {\r\n      return Promise.resolve(this._bodyText)\r\n    }\r\n  }\r\n\r\n  if (support.formData) {\r\n    this.formData = function() {\r\n      return this.text().then(decode)\r\n    }\r\n  }\r\n\r\n  this.json = function() {\r\n    return this.text().then(JSON.parse)\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n// HTTP methods whose capitalization should be normalized\r\nvar methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE']\r\n\r\nfunction normalizeMethod(method) {\r\n  var upcased = method.toUpperCase()\r\n  return methods.indexOf(upcased) > -1 ? upcased : method\r\n}\r\n\r\nexport function Request(input, options) {\r\n  if (!(this instanceof Request)) {\r\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\r\n  }\r\n\r\n  options = options || {}\r\n  var body = options.body\r\n\r\n  if (input instanceof Request) {\r\n    if (input.bodyUsed) {\r\n      throw new TypeError('Already read')\r\n    }\r\n    this.url = input.url\r\n    this.credentials = input.credentials\r\n    if (!options.headers) {\r\n      this.headers = new Headers(input.headers)\r\n    }\r\n    this.method = input.method\r\n    this.mode = input.mode\r\n    this.signal = input.signal\r\n    if (!body && input._bodyInit != null) {\r\n      body = input._bodyInit\r\n      input.bodyUsed = true\r\n    }\r\n  } else {\r\n    this.url = String(input)\r\n  }\r\n\r\n  this.credentials = options.credentials || this.credentials || 'same-origin'\r\n  if (options.headers || !this.headers) {\r\n    this.headers = new Headers(options.headers)\r\n  }\r\n  this.method = normalizeMethod(options.method || this.method || 'GET')\r\n  this.mode = options.mode || this.mode || null\r\n  this.signal = options.signal || this.signal || (function () {\r\n    if ('AbortController' in g) {\r\n      var ctrl = new AbortController();\r\n      return ctrl.signal;\r\n    }\r\n  }());\r\n  this.referrer = null\r\n\r\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\r\n    throw new TypeError('Body not allowed for GET or HEAD requests')\r\n  }\r\n  this._initBody(body)\r\n\r\n  if (this.method === 'GET' || this.method === 'HEAD') {\r\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\r\n      // Search for a '_' parameter in the query string\r\n      var reParamSearch = /([?&])_=[^&]*/\r\n      if (reParamSearch.test(this.url)) {\r\n        // If it already exists then set the value with the current time\r\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\r\n      } else {\r\n        // Otherwise add a new '_' parameter to the end with the current time\r\n        var reQueryString = /\\?/\r\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nRequest.prototype.clone = function() {\r\n  return new Request(this, {body: this._bodyInit})\r\n}\r\n\r\nfunction decode(body) {\r\n  var form = new FormData()\r\n  body\r\n    .trim()\r\n    .split('&')\r\n    .forEach(function(bytes) {\r\n      if (bytes) {\r\n        var split = bytes.split('=')\r\n        var name = split.shift().replace(/\\+/g, ' ')\r\n        var value = split.join('=').replace(/\\+/g, ' ')\r\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\r\n      }\r\n    })\r\n  return form\r\n}\r\n\r\nfunction parseHeaders(rawHeaders) {\r\n  var headers = new Headers()\r\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\r\n  // https://tools.ietf.org/html/rfc7230#section-3.2\r\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\r\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\r\n  // https://github.com/github/fetch/issues/748\r\n  // https://github.com/zloirock/core-js/issues/751\r\n  preProcessedHeaders\r\n    .split('\\r')\r\n    .map(function(header) {\r\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\r\n    })\r\n    .forEach(function(line) {\r\n      var parts = line.split(':')\r\n      var key = parts.shift().trim()\r\n      if (key) {\r\n        var value = parts.join(':').trim()\r\n        try {\r\n          headers.append(key, value)\r\n        } catch (error) {\r\n          console.warn('Response ' + error.message)\r\n        }\r\n      }\r\n    })\r\n  return headers\r\n}\r\n\r\nBody.call(Request.prototype)\r\n\r\nexport function Response(bodyInit, options) {\r\n  if (!(this instanceof Response)) {\r\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\r\n  }\r\n  if (!options) {\r\n    options = {}\r\n  }\r\n\r\n  this.type = 'default'\r\n  this.status = options.status === undefined ? 200 : options.status\r\n  if (this.status < 200 || this.status > 599) {\r\n    throw new RangeError(\"Failed to construct 'Response': The status provided (0) is outside the range [200, 599].\")\r\n  }\r\n  this.ok = this.status >= 200 && this.status < 300\r\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\r\n  this.headers = new Headers(options.headers)\r\n  this.url = options.url || ''\r\n  this._initBody(bodyInit)\r\n}\r\n\r\nBody.call(Response.prototype)\r\n\r\nResponse.prototype.clone = function() {\r\n  return new Response(this._bodyInit, {\r\n    status: this.status,\r\n    statusText: this.statusText,\r\n    headers: new Headers(this.headers),\r\n    url: this.url\r\n  })\r\n}\r\n\r\nResponse.error = function() {\r\n  var response = new Response(null, {status: 200, statusText: ''})\r\n  response.ok = false\r\n  response.status = 0\r\n  response.type = 'error'\r\n  return response\r\n}\r\n\r\nvar redirectStatuses = [301, 302, 303, 307, 308]\r\n\r\nResponse.redirect = function(url, status) {\r\n  if (redirectStatuses.indexOf(status) === -1) {\r\n    throw new RangeError('Invalid status code')\r\n  }\r\n\r\n  return new Response(null, {status: status, headers: {location: url}})\r\n}\r\n\r\nexport var DOMException = g.DOMException\r\ntry {\r\n  new DOMException()\r\n} catch (err) {\r\n  DOMException = function(message, name) {\r\n    this.message = message\r\n    this.name = name\r\n    var error = Error(message)\r\n    this.stack = error.stack\r\n  }\r\n  DOMException.prototype = Object.create(Error.prototype)\r\n  DOMException.prototype.constructor = DOMException\r\n}\r\n\r\nexport function fetch(input, init) {\r\n  return new Promise(function(resolve, reject) {\r\n    var request = new Request(input, init)\r\n\r\n    if (request.signal && request.signal.aborted) {\r\n      return reject(new DOMException('Aborted', 'AbortError'))\r\n    }\r\n\r\n    var xhr = new XMLHttpRequest()\r\n\r\n    function abortXhr() {\r\n      xhr.abort()\r\n    }\r\n\r\n    xhr.onload = function() {\r\n      var options = {\r\n        statusText: xhr.statusText,\r\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\r\n      }\r\n      // This check if specifically for when a user fetches a file locally from the file system\r\n      // Only if the status is out of a normal range\r\n      if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {\r\n        options.status = 200;\r\n      } else {\r\n        options.status = xhr.status;\r\n      }\r\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\r\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\r\n      setTimeout(function() {\r\n        resolve(new Response(body, options))\r\n      }, 0)\r\n    }\r\n\r\n    xhr.onerror = function() {\r\n      setTimeout(function() {\r\n        reject(new TypeError('Network request failed'))\r\n      }, 0)\r\n    }\r\n\r\n    xhr.ontimeout = function() {\r\n      setTimeout(function() {\r\n        reject(new TypeError('Network request timed out'))\r\n      }, 0)\r\n    }\r\n\r\n    xhr.onabort = function() {\r\n      setTimeout(function() {\r\n        reject(new DOMException('Aborted', 'AbortError'))\r\n      }, 0)\r\n    }\r\n\r\n    function fixUrl(url) {\r\n      try {\r\n        return url === '' && g.location.href ? g.location.href : url\r\n      } catch (e) {\r\n        return url\r\n      }\r\n    }\r\n\r\n    xhr.open(request.method, fixUrl(request.url), true)\r\n\r\n    if (request.credentials === 'include') {\r\n      xhr.withCredentials = true\r\n    } else if (request.credentials === 'omit') {\r\n      xhr.withCredentials = false\r\n    }\r\n\r\n    if ('responseType' in xhr) {\r\n      if (support.blob) {\r\n        xhr.responseType = 'blob'\r\n      } else if (\r\n        support.arrayBuffer\r\n      ) {\r\n        xhr.responseType = 'arraybuffer'\r\n      }\r\n    }\r\n\r\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {\r\n      var names = [];\r\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\r\n        names.push(normalizeName(name))\r\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\r\n      })\r\n      request.headers.forEach(function(value, name) {\r\n        if (names.indexOf(name) === -1) {\r\n          xhr.setRequestHeader(name, value)\r\n        }\r\n      })\r\n    } else {\r\n      request.headers.forEach(function(value, name) {\r\n        xhr.setRequestHeader(name, value)\r\n      })\r\n    }\r\n\r\n    if (request.signal) {\r\n      request.signal.addEventListener('abort', abortXhr)\r\n\r\n      xhr.onreadystatechange = function() {\r\n        // DONE (success or failure)\r\n        if (xhr.readyState === 4) {\r\n          request.signal.removeEventListener('abort', abortXhr)\r\n        }\r\n      }\r\n    }\r\n\r\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\r\n  })\r\n}\r\n\r\nfetch.polyfill = true\r\n\r\nif (!g.fetch) {\r\n  g.fetch = fetch\r\n  g.Headers = Headers\r\n  g.Request = Request\r\n  g.Response = Response\r\n}\r\n", "// the whatwg-fetch polyfill installs the fetch() function\r\n// on the global object (window or self)\r\n//\r\n// Return that as the export for use in Webpack, Browserify etc.\r\nrequire('whatwg-fetch');\r\nmodule.exports = self.fetch.bind(self);\r\n", "\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HTTPTransport = void 0;\r\nvar isomorphic_fetch_1 = __importDefault(require(\"isomorphic-fetch\"));\r\nvar Transport_1 = require(\"./Transport\");\r\nvar Request_1 = require(\"../Request\");\r\nvar Error_1 = require(\"../Error\");\r\nvar HTTPTransport = /** @class */ (function (_super) {\r\n    __extends(HTTPTransport, _super);\r\n    function HTTPTransport(uri, options) {\r\n        var _this = _super.call(this) || this;\r\n        _this.onlyNotifications = function (data) {\r\n            if (data instanceof Array) {\r\n                return data.every(function (datum) {\r\n                    return datum.request.request.id === null ||\r\n                        datum.request.request.id === undefined;\r\n                });\r\n            }\r\n            return data.request.id === null || data.request.id === undefined;\r\n        };\r\n        _this.uri = uri;\r\n        _this.credentials = options && options.credentials;\r\n        _this.headers = HTTPTransport.setupHeaders(options && options.headers);\r\n        _this.injectedFetcher = options === null || options === void 0 ? void 0 : options.fetcher;\r\n        return _this;\r\n    }\r\n    HTTPTransport.prototype.connect = function () {\r\n        return Promise.resolve();\r\n    };\r\n    HTTPTransport.prototype.sendData = function (data, timeout) {\r\n        if (timeout === void 0) { timeout = null; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var prom, notifications, batch, fetcher, result, body, responseErr, e_1, responseErr;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        prom = this.transportRequestManager.addRequest(data, timeout);\r\n                        notifications = Request_1.getNotifications(data);\r\n                        batch = Request_1.getBatchRequests(data);\r\n                        fetcher = this.injectedFetcher || isomorphic_fetch_1.default;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 4, , 5]);\r\n                        return [4 /*yield*/, fetcher(this.uri, {\r\n                                method: \"POST\",\r\n                                headers: this.headers,\r\n                                body: JSON.stringify(this.parseData(data)),\r\n                                credentials: this.credentials,\r\n                            })];\r\n                    case 2:\r\n                        result = _a.sent();\r\n                        // requirements are that notifications are successfully sent\r\n                        this.transportRequestManager.settlePendingRequest(notifications);\r\n                        if (this.onlyNotifications(data)) {\r\n                            return [2 /*return*/, Promise.resolve()];\r\n                        }\r\n                        return [4 /*yield*/, result.text()];\r\n                    case 3:\r\n                        body = _a.sent();\r\n                        responseErr = this.transportRequestManager.resolveResponse(body);\r\n                        if (responseErr) {\r\n                            // requirements are that batch requuests are successfully resolved\r\n                            // this ensures that individual requests within the batch request are settled\r\n                            this.transportRequestManager.settlePendingRequest(batch, responseErr);\r\n                            return [2 /*return*/, Promise.reject(responseErr)];\r\n                        }\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        e_1 = _a.sent();\r\n                        responseErr = new Error_1.JSONRPCError(e_1.message, Error_1.ERR_UNKNOWN, e_1);\r\n                        this.transportRequestManager.settlePendingRequest(notifications, responseErr);\r\n                        this.transportRequestManager.settlePendingRequest(Request_1.getBatchRequests(data), responseErr);\r\n                        return [2 /*return*/, Promise.reject(responseErr)];\r\n                    case 5: return [2 /*return*/, prom];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // tslint:disable-next-line:no-empty\r\n    HTTPTransport.prototype.close = function () { };\r\n    HTTPTransport.setupHeaders = function (headerOptions) {\r\n        var headers = new Headers(headerOptions);\r\n        // Overwrite header options to ensure correct content type.\r\n        headers.set(\"Content-Type\", \"application/json\");\r\n        return headers;\r\n    };\r\n    return HTTPTransport;\r\n}(Transport_1.Transport));\r\nexports.HTTPTransport = HTTPTransport;\r\nexports.default = HTTPTransport;\r\n", "// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\r\n\r\nvar ws = null\r\n\r\nif (typeof WebSocket !== 'undefined') {\r\n  ws = WebSocket\r\n} else if (typeof MozWebSocket !== 'undefined') {\r\n  ws = MozWebSocket\r\n} else if (typeof global !== 'undefined') {\r\n  ws = global.WebSocket || global.MozWebSocket\r\n} else if (typeof window !== 'undefined') {\r\n  ws = window.WebSocket || window.MozWebSocket\r\n} else if (typeof self !== 'undefined') {\r\n  ws = self.WebSocket || self.MozWebSocket\r\n}\r\n\r\nexport default ws\r\n", "\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar isomorphic_ws_1 = __importDefault(require(\"isomorphic-ws\"));\r\nvar Transport_1 = require(\"./Transport\");\r\nvar Request_1 = require(\"../Request\");\r\nvar Error_1 = require(\"../Error\");\r\nvar WebSocketTransport = /** @class */ (function (_super) {\r\n    __extends(WebSocketTransport, _super);\r\n    function WebSocketTransport(uri) {\r\n        var _this = _super.call(this) || this;\r\n        _this.uri = uri;\r\n        _this.connection = new isomorphic_ws_1.default(uri);\r\n        return _this;\r\n    }\r\n    WebSocketTransport.prototype.connect = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var cb = function () {\r\n                _this.connection.removeEventListener(\"open\", cb);\r\n                resolve();\r\n            };\r\n            _this.connection.addEventListener(\"open\", cb);\r\n            _this.connection.addEventListener(\"message\", function (message) {\r\n                var data = message.data;\r\n                _this.transportRequestManager.resolveResponse(data);\r\n            });\r\n        });\r\n    };\r\n    WebSocketTransport.prototype.sendData = function (data, timeout) {\r\n        if (timeout === void 0) { timeout = 5000; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var prom, notifications, jsonError;\r\n            return __generator(this, function (_a) {\r\n                prom = this.transportRequestManager.addRequest(data, timeout);\r\n                notifications = Request_1.getNotifications(data);\r\n                try {\r\n                    this.connection.send(JSON.stringify(this.parseData(data)));\r\n                    this.transportRequestManager.settlePendingRequest(notifications);\r\n                }\r\n                catch (err) {\r\n                    jsonError = new Error_1.JSONRPCError(err.message, Error_1.ERR_UNKNOWN, err);\r\n                    this.transportRequestManager.settlePendingRequest(notifications, jsonError);\r\n                    this.transportRequestManager.settlePendingRequest(Request_1.getBatchRequests(data), jsonError);\r\n                    prom = Promise.reject(jsonError);\r\n                }\r\n                return [2 /*return*/, prom];\r\n            });\r\n        });\r\n    };\r\n    WebSocketTransport.prototype.close = function () {\r\n        this.connection.close();\r\n    };\r\n    return WebSocketTransport;\r\n}(Transport_1.Transport));\r\nexports.default = WebSocketTransport;\r\n", "\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Transport_1 = require(\"./Transport\");\r\nvar Request_1 = require(\"../Request\");\r\nvar openPopup = function (url) {\r\n    var width = 400;\r\n    var height = window.screen.height;\r\n    var left = 0;\r\n    var top = 0;\r\n    return window.open(url, \"inspector:popup\", \"left=\" + left + \",top=\" + top + \",width=\" + width + \",height=\" + height + \",resizable,scrollbars=yes,status=1\");\r\n};\r\nvar PostMessageTransport = /** @class */ (function (_super) {\r\n    __extends(PostMessageTransport, _super);\r\n    function PostMessageTransport(uri) {\r\n        var _this = _super.call(this) || this;\r\n        _this.messageHandler = function (ev) {\r\n            _this.transportRequestManager.resolveResponse(JSON.stringify(ev.data));\r\n        };\r\n        _this.uri = uri;\r\n        _this.postMessageID = \"post-message-transport-\" + Math.random();\r\n        return _this;\r\n    }\r\n    PostMessageTransport.prototype.createWindow = function (uri) {\r\n        return new Promise(function (resolve, reject) {\r\n            var frame;\r\n            frame = openPopup(uri);\r\n            setTimeout(function () {\r\n                resolve(frame);\r\n            }, 3000);\r\n        });\r\n    };\r\n    PostMessageTransport.prototype.connect = function () {\r\n        var _this = this;\r\n        var urlRegex = /^(http|https):\\/\\/.*$/;\r\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (!urlRegex.test(this.uri)) {\r\n                            reject(new Error(\"Bad URI\"));\r\n                        }\r\n                        _a = this;\r\n                        return [4 /*yield*/, this.createWindow(this.uri)];\r\n                    case 1:\r\n                        _a.frame = _b.sent();\r\n                        window.addEventListener(\"message\", this.messageHandler);\r\n                        resolve();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    PostMessageTransport.prototype.sendData = function (data, timeout) {\r\n        if (timeout === void 0) { timeout = 5000; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var prom, notifications;\r\n            return __generator(this, function (_a) {\r\n                prom = this.transportRequestManager.addRequest(data, null);\r\n                notifications = Request_1.getNotifications(data);\r\n                if (this.frame) {\r\n                    this.frame.postMessage(data.request, this.uri);\r\n                    this.transportRequestManager.settlePendingRequest(notifications);\r\n                }\r\n                return [2 /*return*/, prom];\r\n            });\r\n        });\r\n    };\r\n    PostMessageTransport.prototype.close = function () {\r\n        if (this.frame) {\r\n            window.removeEventListener(\"message\", this.messageHandler);\r\n            this.frame.close();\r\n        }\r\n    };\r\n    return PostMessageTransport;\r\n}(Transport_1.Transport));\r\nexports.default = PostMessageTransport;\r\n", "\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Transport_1 = require(\"./Transport\");\r\nvar Request_1 = require(\"../Request\");\r\nvar PostMessageIframeTransport = /** @class */ (function (_super) {\r\n    __extends(PostMessageIframeTransport, _super);\r\n    function PostMessageIframeTransport(uri) {\r\n        var _this = _super.call(this) || this;\r\n        _this.messageHandler = function (ev) {\r\n            _this.transportRequestManager.resolveResponse(JSON.stringify(ev.data));\r\n        };\r\n        _this.uri = uri;\r\n        _this.postMessageID = \"post-message-transport-\" + Math.random();\r\n        return _this;\r\n    }\r\n    PostMessageIframeTransport.prototype.createWindow = function (uri) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var frame;\r\n            var iframe = document.createElement(\"iframe\");\r\n            iframe.setAttribute(\"id\", _this.postMessageID);\r\n            iframe.setAttribute(\"width\", \"0px\");\r\n            iframe.setAttribute(\"height\", \"0px\");\r\n            iframe.setAttribute(\"style\", \"visiblity:hidden;border:none;outline:none;\");\r\n            iframe.addEventListener(\"load\", function () {\r\n                resolve(frame);\r\n            });\r\n            iframe.setAttribute(\"src\", uri);\r\n            window.document.body.appendChild(iframe);\r\n            frame = iframe.contentWindow;\r\n        });\r\n    };\r\n    PostMessageIframeTransport.prototype.connect = function () {\r\n        var _this = this;\r\n        var urlRegex = /^(http|https):\\/\\/.*$/;\r\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (!urlRegex.test(this.uri)) {\r\n                            reject(new Error(\"Bad URI\"));\r\n                        }\r\n                        _a = this;\r\n                        return [4 /*yield*/, this.createWindow(this.uri)];\r\n                    case 1:\r\n                        _a.frame = _b.sent();\r\n                        window.addEventListener(\"message\", this.messageHandler);\r\n                        resolve();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    PostMessageIframeTransport.prototype.sendData = function (data, timeout) {\r\n        if (timeout === void 0) { timeout = 5000; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var prom, notifications;\r\n            return __generator(this, function (_a) {\r\n                prom = this.transportRequestManager.addRequest(data, null);\r\n                notifications = Request_1.getNotifications(data);\r\n                if (this.frame) {\r\n                    this.frame.postMessage(data.request, \"*\");\r\n                    this.transportRequestManager.settlePendingRequest(notifications);\r\n                }\r\n                return [2 /*return*/, prom];\r\n            });\r\n        });\r\n    };\r\n    PostMessageIframeTransport.prototype.close = function () {\r\n        var el = document.getElementById(this.postMessageID);\r\n        el === null || el === void 0 ? void 0 : el.remove();\r\n        window.removeEventListener(\"message\", this.messageHandler);\r\n    };\r\n    return PostMessageIframeTransport;\r\n}(Transport_1.Transport));\r\nexports.default = PostMessageIframeTransport;\r\n", "\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * OpenRPC Client JS is a browser-compatible JSON-RPC client with multiple transports and\r\n * multiple request managers to enable features like round-robin or fallback-by-position.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { RequestManager, HTTPTransport, Client } from '@open-rpc/client-js';\r\n * const transport = new HTTPTransport('http://localhost:3333');\r\n * const client = new Client(new RequestManager([transport]));\r\n * const result = await client.request({method: 'addition', params: [2, 2]});\r\n * // => { jsonrpc: '2.0', id: 1, result: 4 }\r\n * ```\r\n *\r\n */\r\nvar Client = /** @class */ (function () {\r\n    function Client(requestManager) {\r\n        this.requestManager = requestManager;\r\n    }\r\n    /**\r\n     * Initiates [[RequestManager.startBatch]] in order to build a batch call.\r\n     *\r\n     * Subsequent calls to [[Client.request]] will be added to the batch. Once [[Client.stopBatch]] is called, the\r\n     * promises for the [[Client.request]] will then be resolved.  If the [[RequestManager]] already has a batch in\r\n     * progress, this method is a noop.\r\n     *\r\n     * @example\r\n     * myClient.startBatch();\r\n     * myClient.request({method: \"foo\", params: [\"bar\"]}).then(() => console.log('foobar'));\r\n     * myClient.request({method: \"foo\", params: [\"baz\"]}).then(() => console.log('foobaz'));\r\n     * myClient.stopBatch();\r\n     */\r\n    Client.prototype.startBatch = function () {\r\n        return this.requestManager.startBatch();\r\n    };\r\n    /**\r\n     * Initiates [[RequestManager.stopBatch]] in order to finalize and send the batch to the underlying transport.\r\n     *\r\n     * [[Client.stopBatch]] will send the [[Client.request]] calls made since the last [[Client.startBatch]] call. For\r\n     * that reason, [[Client.startBatch]] MUST be called before [[Client.stopBatch]].\r\n     *\r\n     * @example\r\n     * myClient.startBatch();\r\n     * myClient.request({method: \"foo\", params: [\"bar\"]}).then(() => console.log('foobar'));\r\n     * myClient.request({method: \"foo\", params: [\"baz\"]}).then(() => console.log('foobaz'));\r\n     * myClient.stopBatch();\r\n     */\r\n    Client.prototype.stopBatch = function () {\r\n        return this.requestManager.stopBatch();\r\n    };\r\n    /**\r\n     * A JSON-RPC call is represented by sending a Request object to a Server.\r\n     *\r\n     * @param requestObject.method A String containing the name of the method to be invoked. Method names that begin with the word rpc\r\n     * followed by a period character (U+002E or ASCII 46) are reserved for rpc-internal methods and extensions and\r\n     * MUST NOT be used for anything else.\r\n     * @param requestObject.params A Structured value that holds the parameter values to be used during the invocation of the method.\r\n     *\r\n     * @example\r\n     * myClient.request({method: \"foo\", params: [\"bar\"]}).then(() => console.log('foobar'));\r\n     */\r\n    Client.prototype.request = function (requestObject, timeout) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.requestManager.connectPromise) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.requestManager.connectPromise];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2: return [2 /*return*/, this.requestManager.request(requestObject, false, timeout)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Client.prototype.notify = function (requestObject) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.requestManager.connectPromise) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.requestManager.connectPromise];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2: return [2 /*return*/, this.requestManager.request(requestObject, true, null)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Client.prototype.onNotification = function (callback) {\r\n        this.requestManager.requestChannel.addListener(\"notification\", callback);\r\n    };\r\n    Client.prototype.onError = function (callback) {\r\n        this.requestManager.requestChannel.addListener(\"error\", callback);\r\n    };\r\n    /**\r\n     * Close connection\r\n     */\r\n    Client.prototype.close = function () {\r\n        this.requestManager.close();\r\n    };\r\n    return Client;\r\n}());\r\nexports.default = Client;\r\n", "\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PostMessageIframeTransport = exports.PostMessageWindowTransport = exports.JSONRPCError = exports.WebSocketTransport = exports.EventEmitterTransport = exports.HTTPTransport = exports.RequestManager = exports.Client = void 0;\r\nvar RequestManager_1 = __importDefault(require(\"./RequestManager\"));\r\nexports.RequestManager = RequestManager_1.default;\r\nvar EventEmitterTransport_1 = __importDefault(require(\"./transports/EventEmitterTransport\"));\r\nexports.EventEmitterTransport = EventEmitterTransport_1.default;\r\nvar HTTPTransport_1 = __importDefault(require(\"./transports/HTTPTransport\"));\r\nexports.HTTPTransport = HTTPTransport_1.default;\r\nvar WebSocketTransport_1 = __importDefault(require(\"./transports/WebSocketTransport\"));\r\nexports.WebSocketTransport = WebSocketTransport_1.default;\r\nvar PostMessageWindowTransport_1 = __importDefault(require(\"./transports/PostMessageWindowTransport\"));\r\nexports.PostMessageWindowTransport = PostMessageWindowTransport_1.default;\r\nvar PostMessageIframeTransport_1 = __importDefault(require(\"./transports/PostMessageIframeTransport\"));\r\nexports.PostMessageIframeTransport = PostMessageIframeTransport_1.default;\r\nvar Error_1 = require(\"./Error\");\r\nObject.defineProperty(exports, \"JSONRPCError\", { enumerable: true, get: function () { return Error_1.JSONRPCError; } });\r\nvar Client_1 = __importDefault(require(\"./Client\"));\r\nexports.Client = Client_1.default;\r\nexports.default = Client_1.default;\r\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/*\\\n|*|  Base64 / binary data / UTF-8 strings utilities\n|*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding\n\\*/\n\n/* Array of bytes to Base64 string decoding */\n\nfunction b64ToUint6(nChr: number) {\n\treturn nChr > 64 && nChr < 91\n\t\t? nChr - 65\n\t\t: nChr > 96 && nChr < 123\n\t\t? nChr - 71\n\t\t: nChr > 47 && nChr < 58\n\t\t? nChr + 4\n\t\t: nChr === 43\n\t\t? 62\n\t\t: nChr === 47\n\t\t? 63\n\t\t: 0;\n}\n\nexport function fromB64(sBase64: string, nBlocksSize?: number): Uint8Array {\n\tvar sB64Enc = sBase64.replace(/[^A-Za-z0-9+/]/g, ''),\n\t\tnInLen = sB64Enc.length,\n\t\tnOutLen = nBlocksSize\n\t\t\t? Math.ceil(((nInLen * 3 + 1) >> 2) / nBlocksSize) * nBlocksSize\n\t\t\t: (nInLen * 3 + 1) >> 2,\n\t\ttaBytes = new Uint8Array(nOutLen);\n\n\tfor (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n\t\tnMod4 = nInIdx & 3;\n\t\tnUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << (6 * (3 - nMod4));\n\t\tif (nMod4 === 3 || nInLen - nInIdx === 1) {\n\t\t\tfor (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n\t\t\t\ttaBytes[nOutIdx] = (nUint24 >>> ((16 >>> nMod3) & 24)) & 255;\n\t\t\t}\n\t\t\tnUint24 = 0;\n\t\t}\n\t}\n\n\treturn taBytes;\n}\n\n/* Base64 string to array encoding */\n\nfunction uint6ToB64(nUint6: number) {\n\treturn nUint6 < 26\n\t\t? nUint6 + 65\n\t\t: nUint6 < 52\n\t\t? nUint6 + 71\n\t\t: nUint6 < 62\n\t\t? nUint6 - 4\n\t\t: nUint6 === 62\n\t\t? 43\n\t\t: nUint6 === 63\n\t\t? 47\n\t\t: 65;\n}\n\nexport function toB64(aBytes: Uint8Array): string {\n\tvar nMod3 = 2,\n\t\tsB64Enc = '';\n\n\tfor (var nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n\t\tnMod3 = nIdx % 3;\n\t\tnUint24 |= aBytes[nIdx] << ((16 >>> nMod3) & 24);\n\t\tif (nMod3 === 2 || aBytes.length - nIdx === 1) {\n\t\t\tsB64Enc += String.fromCodePoint(\n\t\t\t\tuint6ToB64((nUint24 >>> 18) & 63),\n\t\t\t\tuint6ToB64((nUint24 >>> 12) & 63),\n\t\t\t\tuint6ToB64((nUint24 >>> 6) & 63),\n\t\t\t\tuint6ToB64(nUint24 & 63),\n\t\t\t);\n\t\t\tnUint24 = 0;\n\t\t}\n\t}\n\n\treturn (\n\t\tsB64Enc.slice(0, sB64Enc.length - 2 + nMod3) + (nMod3 === 2 ? '' : nMod3 === 1 ? '=' : '==')\n\t);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport function fromHEX(hexStr: string): Uint8Array {\n\t// @ts-ignore\n\tlet intArr = hexStr\n\t\t.replace('0x', '')\n\t\t.match(/.{1,2}/g)\n\t\t.map((byte) => parseInt(byte, 16));\n\n\tif (intArr === null) {\n\t\tthrow new Error(`Unable to parse HEX: ${hexStr}`);\n\t}\n\n\treturn Uint8Array.from(intArr);\n}\n\nexport function toHEX(bytes: Uint8Array): string {\n\treturn bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/*\n * BCS implementation {@see https://github.com/diem/bcs } for JavaScript.\n * Intended to be used for Move applications; supports both NodeJS and browser.\n *\n * For more details and examples {@see README.md }.\n *\n * @module bcs\n * @property {BcsReader}\n */\n\nimport { toB64, fromB64 } from './b64';\nimport { toHEX, fromHEX } from './hex';\nimport bs58 from 'bs58';\n\nconst SUI_ADDRESS_LENGTH = 32;\n\nfunction toLittleEndian(bigint: bigint, size: number) {\n\tlet result = new Uint8Array(size);\n\tlet i = 0;\n\twhile (bigint > 0) {\n\t\tresult[i] = Number(bigint % BigInt(256));\n\t\tbigint = bigint / BigInt(256);\n\t\ti += 1;\n\t}\n\treturn result;\n}\n\nconst toB58 = (buffer: Uint8Array) => bs58.encode(buffer);\nconst fromB58 = (str: string) => bs58.decode(str);\n\n// Re-export all encoding dependencies.\nexport { toB58, fromB58, toB64, fromB64, fromHEX, toHEX };\n\n/**\n * Supported encodings.\n * Used in `Reader.toString()` as well as in `decodeStr` and `encodeStr` functions.\n */\nexport type Encoding = 'base58' | 'base64' | 'hex';\n\n/**\n * Allows for array definitions for names.\n * @example\n * ```\n * bcs.registerStructType(['vector', BCS.STRING], ...);\n * // equals\n * bcs.registerStructType('vector<string>', ...);\n * ```\n */\nexport type TypeName = string | [string, ...(TypeName | string)[]];\n\n/**\n * Class used for reading BCS data chunk by chunk. Meant to be used\n * by some wrapper, which will make sure that data is valid and is\n * matching the desired format.\n *\n * @example\n * // data for this example is:\n * // { a: u8, b: u32, c: bool, d: u64 }\n *\n * let reader = new BcsReader(\"647f1a060001ffffe7890423c78a050102030405\");\n * let field1 = reader.read8();\n * let field2 = reader.read32();\n * let field3 = reader.read8() === '1'; // bool\n * let field4 = reader.read64();\n * // ....\n *\n * Reading vectors is another deal in bcs. To read a vector, you first need to read\n * its length using {@link readULEB}. Here's an example:\n * @example\n * // data encoded: { field: [1, 2, 3, 4, 5] }\n * let reader = new BcsReader(\"050102030405\");\n * let vec_length = reader.readULEB();\n * let elements = [];\n * for (let i = 0; i < vec_length; i++) {\n *   elements.push(reader.read8());\n * }\n * console.log(elements); // [1,2,3,4,5]\n *\n * @param {String} data HEX-encoded data (serialized BCS)\n */\nexport class BcsReader {\n\tprivate dataView: DataView;\n\tprivate bytePosition: number = 0;\n\n\t/**\n\t * @param {Uint8Array} data Data to use as a buffer.\n\t */\n\tconstructor(data: Uint8Array) {\n\t\tthis.dataView = new DataView(data.buffer);\n\t}\n\t/**\n\t * Shift current cursor position by `bytes`.\n\t *\n\t * @param {Number} bytes Number of bytes to\n\t * @returns {this} Self for possible chaining.\n\t */\n\tshift(bytes: number) {\n\t\tthis.bytePosition += bytes;\n\t\treturn this;\n\t}\n\t/**\n\t * Read U8 value from the buffer and shift cursor by 1.\n\t * @returns\n\t */\n\tread8(): number {\n\t\tlet value = this.dataView.getUint8(this.bytePosition);\n\t\tthis.shift(1);\n\t\treturn value;\n\t}\n\t/**\n\t * Read U16 value from the buffer and shift cursor by 2.\n\t * @returns\n\t */\n\tread16(): number {\n\t\tlet value = this.dataView.getUint16(this.bytePosition, true);\n\t\tthis.shift(2);\n\t\treturn value;\n\t}\n\t/**\n\t * Read U32 value from the buffer and shift cursor by 4.\n\t * @returns\n\t */\n\tread32(): number {\n\t\tlet value = this.dataView.getUint32(this.bytePosition, true);\n\t\tthis.shift(4);\n\t\treturn value;\n\t}\n\t/**\n\t * Read U64 value from the buffer and shift cursor by 8.\n\t * @returns\n\t */\n\tread64(): string {\n\t\tlet value1 = this.read32();\n\t\tlet value2 = this.read32();\n\n\t\tlet result = value2.toString(16) + value1.toString(16).padStart(8, '0');\n\n\t\treturn BigInt('0x' + result).toString(10);\n\t}\n\t/**\n\t * Read U128 value from the buffer and shift cursor by 16.\n\t */\n\tread128(): string {\n\t\tlet value1 = BigInt(this.read64());\n\t\tlet value2 = BigInt(this.read64());\n\t\tlet result = value2.toString(16) + value1.toString(16).padStart(16, '0');\n\n\t\treturn BigInt('0x' + result).toString(10);\n\t}\n\t/**\n\t * Read U128 value from the buffer and shift cursor by 32.\n\t * @returns\n\t */\n\tread256(): string {\n\t\tlet value1 = BigInt(this.read128());\n\t\tlet value2 = BigInt(this.read128());\n\t\tlet result = value2.toString(16) + value1.toString(16).padStart(32, '0');\n\n\t\treturn BigInt('0x' + result).toString(10);\n\t}\n\t/**\n\t * Read `num` number of bytes from the buffer and shift cursor by `num`.\n\t * @param num Number of bytes to read.\n\t */\n\treadBytes(num: number): Uint8Array {\n\t\tlet start = this.bytePosition + this.dataView.byteOffset;\n\t\tlet value = new Uint8Array(this.dataView.buffer, start, num);\n\n\t\tthis.shift(num);\n\n\t\treturn value;\n\t}\n\t/**\n\t * Read ULEB value - an integer of varying size. Used for enum indexes and\n\t * vector lengths.\n\t * @returns {Number} The ULEB value.\n\t */\n\treadULEB(): number {\n\t\tlet start = this.bytePosition + this.dataView.byteOffset;\n\t\tlet buffer = new Uint8Array(this.dataView.buffer, start);\n\t\tlet { value, length } = ulebDecode(buffer);\n\n\t\tthis.shift(length);\n\n\t\treturn value;\n\t}\n\t/**\n\t * Read a BCS vector: read a length and then apply function `cb` X times\n\t * where X is the length of the vector, defined as ULEB in BCS bytes.\n\t * @param cb Callback to process elements of vector.\n\t * @returns {Array<Any>} Array of the resulting values, returned by callback.\n\t */\n\treadVec(cb: (reader: BcsReader, i: number, length: number) => any): any[] {\n\t\tlet length = this.readULEB();\n\t\tlet result = [];\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tresult.push(cb(this, i, length));\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/**\n * Class used to write BCS data into a buffer. Initializer requires\n * some size of a buffer to init; default value for this buffer is 1KB.\n *\n * Most methods are chainable, so it is possible to write them in one go.\n *\n * @example\n * let serialized = new BcsWriter()\n *   .write8(10)\n *   .write32(1000000)\n *   .write64(10000001000000)\n *   .hex();\n */\n\ninterface BcsWriterOptions {\n\t/** The initial size (in bytes) of the buffer tht will be allocated */\n\tsize?: number;\n\t/** The maximum size (in bytes) that the buffer is allowed to grow to */\n\tmaxSize?: number;\n\t/** The amount of bytes that will be allocated whenever additional memory is required */\n\tallocateSize?: number;\n}\n\nexport class BcsWriter {\n\tprivate dataView: DataView;\n\tprivate bytePosition: number = 0;\n\tprivate size: number;\n\tprivate maxSize: number;\n\tprivate allocateSize: number;\n\n\tconstructor({ size = 1024, maxSize, allocateSize = 1024 }: BcsWriterOptions = {}) {\n\t\tthis.size = size;\n\t\tthis.maxSize = maxSize || size;\n\t\tthis.allocateSize = allocateSize;\n\t\tthis.dataView = new DataView(new ArrayBuffer(size));\n\t}\n\n\tprivate ensureSizeOrGrow(bytes: number) {\n\t\tconst requiredSize = this.bytePosition + bytes;\n\t\tif (requiredSize > this.size) {\n\t\t\tconst nextSize = Math.min(this.maxSize, this.size + this.allocateSize);\n\t\t\tif (requiredSize > nextSize) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.size = nextSize;\n\t\t\tconst nextBuffer = new ArrayBuffer(this.size);\n\t\t\tnew Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));\n\t\t\tthis.dataView = new DataView(nextBuffer);\n\t\t}\n\t}\n\n\t/**\n\t * Shift current cursor position by `bytes`.\n\t *\n\t * @param {Number} bytes Number of bytes to\n\t * @returns {this} Self for possible chaining.\n\t */\n\tshift(bytes: number): this {\n\t\tthis.bytePosition += bytes;\n\t\treturn this;\n\t}\n\t/**\n\t * Write a U8 value into a buffer and shift cursor position by 1.\n\t * @param {Number} value Value to write.\n\t * @returns {this}\n\t */\n\twrite8(value: number | bigint): this {\n\t\tthis.ensureSizeOrGrow(1);\n\t\tthis.dataView.setUint8(this.bytePosition, Number(value));\n\t\treturn this.shift(1);\n\t}\n\t/**\n\t * Write a U16 value into a buffer and shift cursor position by 2.\n\t * @param {Number} value Value to write.\n\t * @returns {this}\n\t */\n\twrite16(value: number | bigint): this {\n\t\tthis.ensureSizeOrGrow(2);\n\t\tthis.dataView.setUint16(this.bytePosition, Number(value), true);\n\t\treturn this.shift(2);\n\t}\n\t/**\n\t * Write a U32 value into a buffer and shift cursor position by 4.\n\t * @param {Number} value Value to write.\n\t * @returns {this}\n\t */\n\twrite32(value: number | bigint): this {\n\t\tthis.ensureSizeOrGrow(4);\n\t\tthis.dataView.setUint32(this.bytePosition, Number(value), true);\n\t\treturn this.shift(4);\n\t}\n\t/**\n\t * Write a U64 value into a buffer and shift cursor position by 8.\n\t * @param {bigint} value Value to write.\n\t * @returns {this}\n\t */\n\twrite64(value: number | bigint): this {\n\t\ttoLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));\n\n\t\treturn this;\n\t}\n\t/**\n\t * Write a U128 value into a buffer and shift cursor position by 16.\n\t *\n\t * @param {bigint} value Value to write.\n\t * @returns {this}\n\t */\n\twrite128(value: number | bigint): this {\n\t\ttoLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));\n\n\t\treturn this;\n\t}\n\t/**\n\t * Write a U256 value into a buffer and shift cursor position by 16.\n\t *\n\t * @param {bigint} value Value to write.\n\t * @returns {this}\n\t */\n\twrite256(value: number | bigint): this {\n\t\ttoLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));\n\n\t\treturn this;\n\t}\n\t/**\n\t * Write a ULEB value into a buffer and shift cursor position by number of bytes\n\t * written.\n\t * @param {Number} value Value to write.\n\t * @returns {this}\n\t */\n\twriteULEB(value: number): this {\n\t\tulebEncode(value).forEach((el) => this.write8(el));\n\t\treturn this;\n\t}\n\t/**\n\t * Write a vector into a buffer by first writing the vector length and then calling\n\t * a callback on each passed value.\n\t *\n\t * @param {Array<Any>} vector Array of elements to write.\n\t * @param {WriteVecCb} cb Callback to call on each element of the vector.\n\t * @returns {this}\n\t */\n\twriteVec(vector: any[], cb: (writer: BcsWriter, el: any, i: number, len: number) => void): this {\n\t\tthis.writeULEB(vector.length);\n\t\tArray.from(vector).forEach((el, i) => cb(this, el, i, vector.length));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds support for iterations over the object.\n\t * @returns {Uint8Array}\n\t */\n\t*[Symbol.iterator](): Iterator<number, Iterable<number>> {\n\t\tfor (let i = 0; i < this.bytePosition; i++) {\n\t\t\tyield this.dataView.getUint8(i);\n\t\t}\n\t\treturn this.toBytes();\n\t}\n\n\t/**\n\t * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).\n\t * @returns {Uint8Array} Resulting bcs.\n\t */\n\ttoBytes(): Uint8Array {\n\t\treturn new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));\n\t}\n\n\t/**\n\t * Represent data as 'hex' or 'base64'\n\t * @param encoding Encoding to use: 'base64' or 'hex'\n\t */\n\ttoString(encoding: Encoding): string {\n\t\treturn encodeStr(this.toBytes(), encoding);\n\t}\n}\n\n// Helper utility: write number as an ULEB array.\n// Original code is taken from: https://www.npmjs.com/package/uleb128 (no longer exists)\nfunction ulebEncode(num: number): number[] {\n\tlet arr = [];\n\tlet len = 0;\n\n\tif (num === 0) {\n\t\treturn [0];\n\t}\n\n\twhile (num > 0) {\n\t\tarr[len] = num & 0x7f;\n\t\tif ((num >>= 7)) {\n\t\t\tarr[len] |= 0x80;\n\t\t}\n\t\tlen += 1;\n\t}\n\n\treturn arr;\n}\n\n// Helper utility: decode ULEB as an array of numbers.\n// Original code is taken from: https://www.npmjs.com/package/uleb128 (no longer exists)\nfunction ulebDecode(arr: number[] | Uint8Array): {\n\tvalue: number;\n\tlength: number;\n} {\n\tlet total = 0;\n\tlet shift = 0;\n\tlet len = 0;\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\tlet byte = arr[len];\n\t\tlen += 1;\n\t\ttotal |= (byte & 0x7f) << shift;\n\t\tif ((byte & 0x80) === 0) {\n\t\t\tbreak;\n\t\t}\n\t\tshift += 7;\n\t}\n\n\treturn {\n\t\tvalue: total,\n\t\tlength: len,\n\t};\n}\n\n/**\n * Set of methods that allows data encoding/decoding as standalone\n * BCS value or a part of a composed structure/vector.\n */\nexport interface TypeInterface {\n\tencode: (\n\t\tself: BCS,\n\t\tdata: any,\n\t\toptions: BcsWriterOptions | undefined,\n\t\ttypeParams: TypeName[],\n\t) => BcsWriter;\n\tdecode: (self: BCS, data: Uint8Array, typeParams: TypeName[]) => any;\n\n\t_encodeRaw: (\n\t\twriter: BcsWriter,\n\t\tdata: any,\n\t\ttypeParams: TypeName[],\n\t\ttypeMap: { [key: string]: TypeName },\n\t) => BcsWriter;\n\t_decodeRaw: (\n\t\treader: BcsReader,\n\t\ttypeParams: TypeName[],\n\t\ttypeMap: { [key: string]: TypeName },\n\t) => any;\n}\n\n/**\n * Struct type definition. Used as input format in BcsConfig.types\n * as well as an argument type for `bcs.registerStructType`.\n */\nexport type StructTypeDefinition = {\n\t[key: string]: TypeName | StructTypeDefinition;\n};\n\n/**\n * Enum type definition. Used as input format in BcsConfig.types\n * as well as an argument type for `bcs.registerEnumType`.\n *\n * Value can be either `string` when invariant has a type or `null`\n * when invariant is empty.\n *\n * @example\n * bcs.registerEnumType('Option<T>', {\n *   some: 'T',\n *   none: null\n * });\n */\nexport type EnumTypeDefinition = {\n\t[key: string]: TypeName | StructTypeDefinition | null;\n};\n\n/**\n * Configuration that is passed into BCS constructor.\n */\nexport type BcsConfig = {\n\t/**\n\t * Defines type name for the vector / array type.\n\t * In Move: `vector<T>` or `vector`.\n\t */\n\tvectorType: string;\n\t/**\n\t * Address length. Varies depending on a platform and\n\t * has to be specified for the `address` type.\n\t */\n\taddressLength: number;\n\n\t/**\n\t * Custom encoding for address. Supported values are\n\t * either 'hex' or 'base64'.\n\t */\n\taddressEncoding?: 'hex' | 'base64';\n\t/**\n\t * Opening and closing symbol for type parameters. Can be\n\t * any pair of symbols (eg `['(', ')']`); default value follows\n\t * Rust and Move: `<` and `>`.\n\t */\n\tgenericSeparators?: [string, string];\n\t/**\n\t * Type definitions for the BCS. This field allows spawning\n\t * BCS instance from JSON or another prepared configuration.\n\t * Optional.\n\t */\n\ttypes?: {\n\t\tstructs?: { [key: string]: StructTypeDefinition };\n\t\tenums?: { [key: string]: EnumTypeDefinition };\n\t\taliases?: { [key: string]: string };\n\t};\n\t/**\n\t * Whether to auto-register primitive types on launch.\n\t */\n\twithPrimitives?: boolean;\n};\n\n/**\n * BCS implementation for Move types and few additional built-ins.\n */\nexport class BCS {\n\t// Prefefined types constants\n\tstatic readonly U8: string = 'u8';\n\tstatic readonly U16: string = 'u16';\n\tstatic readonly U32: string = 'u32';\n\tstatic readonly U64: string = 'u64';\n\tstatic readonly U128: string = 'u128';\n\tstatic readonly U256: string = 'u256';\n\tstatic readonly BOOL: string = 'bool';\n\tstatic readonly VECTOR: string = 'vector';\n\tstatic readonly ADDRESS: string = 'address';\n\tstatic readonly STRING: string = 'string';\n\tstatic readonly HEX: string = 'hex-string';\n\tstatic readonly BASE58: string = 'base58-string';\n\tstatic readonly BASE64: string = 'base64-string';\n\n\t/**\n\t * Map of kind `TypeName => TypeInterface`. Holds all\n\t * callbacks for (de)serialization of every registered type.\n\t *\n\t * If the value stored is a string, it is treated as an alias.\n\t */\n\tpublic types: Map<string, TypeInterface | string> = new Map();\n\n\t/**\n\t * Stored BcsConfig for the current instance of BCS.\n\t */\n\tprotected schema: BcsConfig;\n\n\t/**\n\t * Count temp keys to generate a new one when requested.\n\t */\n\tprotected counter: number = 0;\n\n\t/**\n\t * Name of the key to use for temporary struct definitions.\n\t * Returns a temp key + index (for a case when multiple temp\n\t * structs are processed).\n\t */\n\tprivate tempKey() {\n\t\treturn `bcs-struct-${++this.counter}`;\n\t}\n\n\t/**\n\t * Construct a BCS instance with a prepared schema.\n\t *\n\t * @param schema A prepared schema with type definitions\n\t * @param withPrimitives Whether to register primitive types by default\n\t */\n\tconstructor(schema: BcsConfig | BCS) {\n\t\t// if BCS instance is passed -> clone its schema\n\t\tif (schema instanceof BCS) {\n\t\t\tthis.schema = schema.schema;\n\t\t\tthis.types = new Map(schema.types);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.schema = schema;\n\n\t\t// Register address type under key 'address'.\n\t\tthis.registerAddressType(BCS.ADDRESS, schema.addressLength, schema.addressEncoding);\n\t\tthis.registerVectorType(schema.vectorType);\n\n\t\t// Register struct types if they were passed.\n\t\tif (schema.types && schema.types.structs) {\n\t\t\tfor (let name of Object.keys(schema.types.structs)) {\n\t\t\t\tthis.registerStructType(name, schema.types.structs[name]);\n\t\t\t}\n\t\t}\n\n\t\t// Register enum types if they were passed.\n\t\tif (schema.types && schema.types.enums) {\n\t\t\tfor (let name of Object.keys(schema.types.enums)) {\n\t\t\t\tthis.registerEnumType(name, schema.types.enums[name]);\n\t\t\t}\n\t\t}\n\n\t\t// Register aliases if they were passed.\n\t\tif (schema.types && schema.types.aliases) {\n\t\t\tfor (let name of Object.keys(schema.types.aliases)) {\n\t\t\t\tthis.registerAlias(name, schema.types.aliases[name]);\n\t\t\t}\n\t\t}\n\n\t\tif (schema.withPrimitives !== false) {\n\t\t\tregisterPrimitives(this);\n\t\t}\n\t}\n\n\t/**\n\t * Serialize data into bcs.\n\t *\n\t * @example\n\t * bcs.registerVectorType('vector<u8>', 'u8');\n\t *\n\t * let serialized = BCS\n\t *   .set('vector<u8>', [1,2,3,4,5,6])\n\t *   .toBytes();\n\t *\n\t * console.assert(toHex(serialized) === '06010203040506');\n\t *\n\t * @param type Name of the type to serialize (must be registered) or a struct type.\n\t * @param data Data to serialize.\n\t * @param size Serialization buffer size. Default 1024 = 1KB.\n\t * @return A BCS reader instance. Usually you'd want to call `.toBytes()`\n\t */\n\tpublic ser(\n\t\ttype: TypeName | StructTypeDefinition,\n\t\tdata: any,\n\t\toptions?: BcsWriterOptions,\n\t): BcsWriter {\n\t\tif (typeof type === 'string' || Array.isArray(type)) {\n\t\t\tconst { name, params } = this.parseTypeName(type);\n\t\t\treturn this.getTypeInterface(name).encode(this, data, options, params as string[]);\n\t\t}\n\n\t\t// Quick serialization without registering the type in the main struct.\n\t\tif (typeof type === 'object') {\n\t\t\tconst key = this.tempKey();\n\t\t\tconst temp = new BCS(this);\n\t\t\treturn temp.registerStructType(key, type).ser(key, data, options);\n\t\t}\n\n\t\tthrow new Error(`Incorrect type passed into the '.ser()' function. \\n${JSON.stringify(type)}`);\n\t}\n\n\t/**\n\t * Deserialize BCS into a JS type.\n\t *\n\t * @example\n\t * let num = bcs.ser('u64', '4294967295').toString('hex');\n\t * let deNum = bcs.de('u64', num, 'hex');\n\t * console.assert(deNum.toString(10) === '4294967295');\n\t *\n\t * @param type Name of the type to deserialize (must be registered) or a struct type definition.\n\t * @param data Data to deserialize.\n\t * @param encoding Optional - encoding to use if data is of type String\n\t * @return Deserialized data.\n\t */\n\tpublic de(\n\t\ttype: TypeName | StructTypeDefinition,\n\t\tdata: Uint8Array | string,\n\t\tencoding?: Encoding,\n\t): any {\n\t\tif (typeof data === 'string') {\n\t\t\tif (encoding) {\n\t\t\t\tdata = decodeStr(data, encoding);\n\t\t\t} else {\n\t\t\t\tthrow new Error('To pass a string to `bcs.de`, specify encoding');\n\t\t\t}\n\t\t}\n\n\t\t// In case the type specified is already registered.\n\t\tif (typeof type === 'string' || Array.isArray(type)) {\n\t\t\tconst { name, params } = this.parseTypeName(type);\n\t\t\treturn this.getTypeInterface(name).decode(this, data, params as string[]);\n\t\t}\n\n\t\t// Deserialize without registering a type using a temporary clone.\n\t\tif (typeof type === 'object') {\n\t\t\tconst temp = new BCS(this);\n\t\t\tconst key = this.tempKey();\n\t\t\treturn temp.registerStructType(key, type).de(key, data, encoding);\n\t\t}\n\n\t\tthrow new Error(`Incorrect type passed into the '.de()' function. \\n${JSON.stringify(type)}`);\n\t}\n\n\t/**\n\t * Check whether a `TypeInterface` has been loaded for a `type`.\n\t * @param type Name of the type to check.\n\t * @returns\n\t */\n\tpublic hasType(type: string): boolean {\n\t\treturn this.types.has(type);\n\t}\n\n\t/**\n\t * Create an alias for a type.\n\t * WARNING: this can potentially lead to recursion\n\t * @param name Alias to use\n\t * @param forType Type to reference\n\t * @returns\n\t *\n\t * @example\n\t * ```\n\t * let bcs = new BCS(getSuiMoveConfig());\n\t * bcs.registerAlias('ObjectDigest', BCS.BASE58);\n\t * let b58_digest = bcs.de('ObjectDigest', '<digest_bytes>', 'base64');\n\t * ```\n\t */\n\tpublic registerAlias(name: string, forType: string): BCS {\n\t\tthis.types.set(name, forType);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Method to register new types for BCS internal representation.\n\t * For each registered type 2 callbacks must be specified and one is optional:\n\t *\n\t * - encodeCb(writer, data) - write a way to serialize data with BcsWriter;\n\t * - decodeCb(reader) - write a way to deserialize data with BcsReader;\n\t * - validateCb(data) - validate data - either return bool or throw an error\n\t *\n\t * @example\n\t * // our type would be a string that consists only of numbers\n\t * bcs.registerType('number_string',\n\t *    (writer, data) => writer.writeVec(data, (w, el) => w.write8(el)),\n\t *    (reader) => reader.readVec((r) => r.read8()).join(''), // read each value as u8\n\t *    (value) => /[0-9]+/.test(value) // test that it has at least one digit\n\t * );\n\t * console.log(Array.from(bcs.ser('number_string', '12345').toBytes()) == [5,1,2,3,4,5]);\n\t *\n\t * @param name\n\t * @param encodeCb Callback to encode a value.\n\t * @param decodeCb Callback to decode a value.\n\t * @param validateCb Optional validator Callback to check type before serialization.\n\t */\n\tpublic registerType(\n\t\ttypeName: TypeName,\n\t\tencodeCb: (\n\t\t\twriter: BcsWriter,\n\t\t\tdata: any,\n\t\t\ttypeParams: TypeName[],\n\t\t\ttypeMap: { [key: string]: TypeName },\n\t\t) => BcsWriter,\n\t\tdecodeCb: (\n\t\t\treader: BcsReader,\n\t\t\ttypeParams: TypeName[],\n\t\t\ttypeMap: { [key: string]: TypeName },\n\t\t) => any,\n\t\tvalidateCb: (data: any) => boolean = () => true,\n\t): BCS {\n\t\tconst { name, params: generics } = this.parseTypeName(typeName);\n\n\t\tthis.types.set(name, {\n\t\t\tencode(self: BCS, data, options: BcsWriterOptions, typeParams) {\n\t\t\t\tconst typeMap = (generics as string[]).reduce((acc: any, value: string, index) => {\n\t\t\t\t\treturn Object.assign(acc, { [value]: typeParams[index] });\n\t\t\t\t}, {});\n\n\t\t\t\treturn this._encodeRaw.call(self, new BcsWriter(options), data, typeParams, typeMap);\n\t\t\t},\n\t\t\tdecode(self: BCS, data, typeParams) {\n\t\t\t\tconst typeMap = (generics as string[]).reduce((acc: any, value: string, index) => {\n\t\t\t\t\treturn Object.assign(acc, { [value]: typeParams[index] });\n\t\t\t\t}, {});\n\n\t\t\t\treturn this._decodeRaw.call(self, new BcsReader(data), typeParams, typeMap);\n\t\t\t},\n\n\t\t\t// these methods should always be used with caution as they require pre-defined\n\t\t\t// reader and writer and mainly exist to allow multi-field (de)serialization;\n\t\t\t_encodeRaw(writer, data, typeParams, typeMap) {\n\t\t\t\tif (validateCb(data)) {\n\t\t\t\t\treturn encodeCb.call(this, writer, data, typeParams, typeMap);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Validation failed for type ${name}, data: ${data}`);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_decodeRaw(reader, typeParams, typeMap) {\n\t\t\t\treturn decodeCb.call(this, reader, typeParams, typeMap);\n\t\t\t},\n\t\t} as TypeInterface);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register an address type which is a sequence of U8s of specified length.\n\t * @example\n\t * bcs.registerAddressType('address', SUI_ADDRESS_LENGTH);\n\t * let addr = bcs.de('address', 'c3aca510c785c7094ac99aeaa1e69d493122444df50bb8a99dfa790c654a79af');\n\t *\n\t * @param name Name of the address type.\n\t * @param length Byte length of the address.\n\t * @param encoding Encoding to use for the address type\n\t * @returns\n\t */\n\tpublic registerAddressType(name: string, length: number, encoding: Encoding | void = 'hex'): BCS {\n\t\tswitch (encoding) {\n\t\t\tcase 'base64':\n\t\t\t\treturn this.registerType(\n\t\t\t\t\tname,\n\t\t\t\t\tfunction encodeAddress(writer, data: string) {\n\t\t\t\t\t\treturn fromB64(data).reduce((writer, el) => writer.write8(el), writer);\n\t\t\t\t\t},\n\t\t\t\t\tfunction decodeAddress(reader) {\n\t\t\t\t\t\treturn toB64(reader.readBytes(length));\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\tcase 'hex':\n\t\t\t\treturn this.registerType(\n\t\t\t\t\tname,\n\t\t\t\t\tfunction encodeAddress(writer, data: string) {\n\t\t\t\t\t\treturn fromHEX(data).reduce((writer, el) => writer.write8(el), writer);\n\t\t\t\t\t},\n\t\t\t\t\tfunction decodeAddress(reader) {\n\t\t\t\t\t\treturn toHEX(reader.readBytes(length));\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unsupported encoding! Use either hex or base64');\n\t\t}\n\t}\n\n\t/**\n\t * Register custom vector type inside the bcs.\n\t *\n\t * @example\n\t * bcs.registerVectorType('vector<T>'); // generic registration\n\t * let array = bcs.de('vector<u8>', '06010203040506', 'hex'); // [1,2,3,4,5,6];\n\t * let again = bcs.ser('vector<u8>', [1,2,3,4,5,6]).toString('hex');\n\t *\n\t * @param name Name of the type to register\n\t * @param elementType Optional name of the inner type of the vector\n\t * @return Returns self for chaining.\n\t */\n\tprivate registerVectorType(typeName: string): BCS {\n\t\tlet { name, params } = this.parseTypeName(typeName);\n\t\tif (params.length > 1) {\n\t\t\tthrow new Error('Vector can have only one type parameter; got ' + name);\n\t\t}\n\n\t\treturn this.registerType(\n\t\t\ttypeName,\n\t\t\tfunction encodeVector(\n\t\t\t\tthis: BCS,\n\t\t\t\twriter: BcsWriter,\n\t\t\t\tdata: any[],\n\t\t\t\ttypeParams: TypeName[],\n\t\t\t\ttypeMap,\n\t\t\t) {\n\t\t\t\treturn writer.writeVec(data, (writer, el) => {\n\t\t\t\t\tlet elementType: TypeName = typeParams[0];\n\t\t\t\t\tif (!elementType) {\n\t\t\t\t\t\tthrow new Error(`Incorrect number of type parameters passed a to vector '${typeName}'`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet { name, params } = this.parseTypeName(elementType);\n\t\t\t\t\tif (this.hasType(name)) {\n\t\t\t\t\t\treturn this.getTypeInterface(name)._encodeRaw.call(this, writer, el, params, typeMap);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(name in typeMap)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Unable to find a matching type definition for ${name} in vector; make sure you passed a generic`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);\n\n\t\t\t\t\treturn this.getTypeInterface(innerName)._encodeRaw.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\twriter,\n\t\t\t\t\t\tel,\n\t\t\t\t\t\tinnerParams,\n\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction decodeVector(this: BCS, reader: BcsReader, typeParams, typeMap) {\n\t\t\t\treturn reader.readVec((reader) => {\n\t\t\t\t\tlet elementType: TypeName = typeParams[0];\n\t\t\t\t\tif (!elementType) {\n\t\t\t\t\t\tthrow new Error(`Incorrect number of type parameters passed to a vector '${typeName}'`);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet { name, params } = this.parseTypeName(elementType);\n\t\t\t\t\tif (this.hasType(name)) {\n\t\t\t\t\t\treturn this.getTypeInterface(name)._decodeRaw.call(this, reader, params, typeMap);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(name in typeMap)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Unable to find a matching type definition for ${name} in vector; make sure you passed a generic`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);\n\n\t\t\t\t\treturn this.getTypeInterface(innerName)._decodeRaw.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\treader,\n\t\t\t\t\t\tinnerParams,\n\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * Safe method to register a custom Move struct. The first argument is a name of the\n\t * struct which is only used on the FrontEnd and has no affect on serialization results,\n\t * and the second is a struct description passed as an Object.\n\t *\n\t * The description object MUST have the same order on all of the platforms (ie in Move\n\t * or in Rust).\n\t *\n\t * @example\n\t * // Move / Rust struct\n\t * // struct Coin {\n\t * //   value: u64,\n\t * //   owner: vector<u8>, // name // Vec<u8> in Rust\n\t * //   is_locked: bool,\n\t * // }\n\t *\n\t * bcs.registerStructType('Coin', {\n\t *   value: bcs.U64,\n\t *   owner: bcs.STRING,\n\t *   is_locked: bcs.BOOL\n\t * });\n\t *\n\t * // Created in Rust with diem/bcs\n\t * // let rust_bcs_str = '80d1b105600000000e4269672057616c6c65742047757900';\n\t * let rust_bcs_str = [ // using an Array here as BCS works with Uint8Array\n\t *  128, 209, 177,   5,  96,  0,  0,\n\t *    0,  14,  66, 105, 103, 32, 87,\n\t *   97, 108, 108, 101, 116, 32, 71,\n\t *  117, 121,   0\n\t * ];\n\t *\n\t * // Let's encode the value as well\n\t * let test_set = bcs.ser('Coin', {\n\t *   owner: 'Big Wallet Guy',\n\t *   value: '412412400000',\n\t *   is_locked: false,\n\t * });\n\t *\n\t * console.assert(Array.from(test_set.toBytes()) === rust_bcs_str, 'Whoopsie, result mismatch');\n\t *\n\t * @param name Name of the type to register.\n\t * @param fields Fields of the struct. Must be in the correct order.\n\t * @return Returns BCS for chaining.\n\t */\n\tpublic registerStructType(typeName: TypeName, fields: StructTypeDefinition): BCS {\n\t\t// When an Object is passed, we register it under a new key and store it\n\t\t// in the registered type system. This way we allow nested inline definitions.\n\t\tfor (let key in fields) {\n\t\t\tlet internalName = this.tempKey();\n\t\t\tlet value = fields[key];\n\n\t\t\t// TODO: add a type guard here?\n\t\t\tif (!Array.isArray(value) && typeof value !== 'string') {\n\t\t\t\tfields[key] = internalName;\n\t\t\t\tthis.registerStructType(internalName, value as StructTypeDefinition);\n\t\t\t}\n\t\t}\n\n\t\tlet struct = Object.freeze(fields); // Make sure the order doesn't get changed\n\n\t\t// IMPORTANT: we need to store canonical order of fields for each registered\n\t\t// struct so we maintain it and allow developers to use any field ordering in\n\t\t// their code (and not cause mismatches based on field order).\n\t\tlet canonicalOrder = Object.keys(struct);\n\n\t\t// Holds generics for the struct definition. At this stage we can check that\n\t\t// generic parameter matches the one defined in the struct.\n\t\tlet { name: structName, params: generics } = this.parseTypeName(typeName);\n\n\t\t// Make sure all the types in the fields description are already known\n\t\t// and that all the field types are strings.\n\t\treturn this.registerType(\n\t\t\ttypeName,\n\t\t\tfunction encodeStruct(\n\t\t\t\tthis: BCS,\n\t\t\t\twriter: BcsWriter,\n\t\t\t\tdata: { [key: string]: any },\n\t\t\t\ttypeParams,\n\t\t\t\ttypeMap,\n\t\t\t) {\n\t\t\t\tif (!data || data.constructor !== Object) {\n\t\t\t\t\tthrow new Error(`Expected ${structName} to be an Object, got: ${data}`);\n\t\t\t\t}\n\n\t\t\t\tif (typeParams.length !== generics.length) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Incorrect number of generic parameters passed; expected: ${generics.length}, got: ${typeParams.length}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// follow the canonical order when serializing\n\t\t\t\tfor (let key of canonicalOrder) {\n\t\t\t\t\tif (!(key in data)) {\n\t\t\t\t\t\tthrow new Error(`Struct ${structName} requires field ${key}:${struct[key]}`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Before deserializing, read the canonical field type.\n\t\t\t\t\tconst { name: fieldType, params: fieldParams } = this.parseTypeName(\n\t\t\t\t\t\tstruct[key] as TypeName,\n\t\t\t\t\t);\n\n\t\t\t\t\t// Check whether this type is a generic defined in this struct.\n\t\t\t\t\t// If it is -> read the type parameter matching its index.\n\t\t\t\t\t// If not - tread as a regular field.\n\t\t\t\t\tif (!generics.includes(fieldType)) {\n\t\t\t\t\t\tthis.getTypeInterface(fieldType)._encodeRaw.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\twriter,\n\t\t\t\t\t\t\tdata[key],\n\t\t\t\t\t\t\tfieldParams,\n\t\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst paramIdx = generics.indexOf(fieldType);\n\t\t\t\t\t\tlet { name, params } = this.parseTypeName(typeParams[paramIdx]);\n\n\t\t\t\t\t\t// If the type from the type parameters already exists\n\t\t\t\t\t\t// and known -> proceed with type decoding.\n\t\t\t\t\t\tif (this.hasType(name)) {\n\t\t\t\t\t\t\tthis.getTypeInterface(name)._encodeRaw.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\twriter,\n\t\t\t\t\t\t\t\tdata[key],\n\t\t\t\t\t\t\t\tparams as string[],\n\t\t\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Alternatively, if it's a global generic parameter...\n\t\t\t\t\t\tif (!(name in typeMap)) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Unable to find a matching type definition for ${name} in ${structName}; make sure you passed a generic`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);\n\t\t\t\t\t\tthis.getTypeInterface(innerName)._encodeRaw.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\twriter,\n\t\t\t\t\t\t\tdata[key],\n\t\t\t\t\t\t\tinnerParams,\n\t\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn writer;\n\t\t\t},\n\t\t\tfunction decodeStruct(this: BCS, reader: BcsReader, typeParams, typeMap) {\n\t\t\t\tif (typeParams.length !== generics.length) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Incorrect number of generic parameters passed; expected: ${generics.length}, got: ${typeParams.length}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet result: { [key: string]: any } = {};\n\t\t\t\tfor (let key of canonicalOrder) {\n\t\t\t\t\tconst { name: fieldName, params: fieldParams } = this.parseTypeName(\n\t\t\t\t\t\tstruct[key] as TypeName,\n\t\t\t\t\t);\n\n\t\t\t\t\t// if it's not a generic\n\t\t\t\t\tif (!generics.includes(fieldName)) {\n\t\t\t\t\t\tresult[key] = this.getTypeInterface(fieldName)._decodeRaw.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\tfieldParams as string[],\n\t\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst paramIdx = generics.indexOf(fieldName);\n\t\t\t\t\t\tlet { name, params } = this.parseTypeName(typeParams[paramIdx]);\n\n\t\t\t\t\t\t// If the type from the type parameters already exists\n\t\t\t\t\t\t// and known -> proceed with type decoding.\n\t\t\t\t\t\tif (this.hasType(name)) {\n\t\t\t\t\t\t\tresult[key] = this.getTypeInterface(name)._decodeRaw.call(\n\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!(name in typeMap)) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Unable to find a matching type definition for ${name} in ${structName}; make sure you passed a generic`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);\n\t\t\t\t\t\tresult[key] = this.getTypeInterface(innerName)._decodeRaw.call(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\treader,\n\t\t\t\t\t\t\tinnerParams,\n\t\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * Safe method to register custom enum type where each invariant holds the value of another type.\n\t * @example\n\t * bcs.registerStructType('Coin', { value: 'u64' });\n\t * bcs.registerEnumType('MyEnum', {\n\t *  single: 'Coin',\n\t *  multi: 'vector<Coin>',\n\t *  empty: null\n\t * });\n\t *\n\t * console.log(\n\t *  bcs.de('MyEnum', 'AICWmAAAAAAA', 'base64'), // { single: { value: 10000000 } }\n\t *  bcs.de('MyEnum', 'AQIBAAAAAAAAAAIAAAAAAAAA', 'base64')  // { multi: [ { value: 1 }, { value: 2 } ] }\n\t * )\n\t *\n\t * // and serialization\n\t * bcs.ser('MyEnum', { single: { value: 10000000 } }).toBytes();\n\t * bcs.ser('MyEnum', { multi: [ { value: 1 }, { value: 2 } ] });\n\t *\n\t * @param name\n\t * @param variants\n\t */\n\tpublic registerEnumType(typeName: TypeName, variants: EnumTypeDefinition): BCS {\n\t\t// When an Object is passed, we register it under a new key and store it\n\t\t// in the registered type system. This way we allow nested inline definitions.\n\t\tfor (let key in variants) {\n\t\t\tlet internalName = this.tempKey();\n\t\t\tlet value = variants[key];\n\n\t\t\tif (value !== null && !Array.isArray(value) && typeof value !== 'string') {\n\t\t\t\tvariants[key] = internalName;\n\t\t\t\tthis.registerStructType(internalName, value as StructTypeDefinition);\n\t\t\t}\n\t\t}\n\n\t\tlet struct = Object.freeze(variants); // Make sure the order doesn't get changed\n\n\t\t// IMPORTANT: enum is an ordered type and we have to preserve ordering in BCS\n\t\tlet canonicalOrder = Object.keys(struct);\n\n\t\t// Parse type parameters in advance to know the index of each generic parameter.\n\t\tlet { name, params: canonicalTypeParams } = this.parseTypeName(typeName);\n\n\t\treturn this.registerType(\n\t\t\ttypeName,\n\t\t\tfunction encodeEnum(\n\t\t\t\tthis: BCS,\n\t\t\t\twriter: BcsWriter,\n\t\t\t\tdata: { [key: string]: any | null },\n\t\t\t\ttypeParams,\n\t\t\t\ttypeMap,\n\t\t\t) {\n\t\t\t\tif (!data) {\n\t\t\t\t\tthrow new Error(`Unable to write enum \"${name}\", missing data.\\nReceived: \"${data}\"`);\n\t\t\t\t}\n\t\t\t\tif (typeof data !== 'object') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Incorrect data passed into enum \"${name}\", expected object with properties: \"${canonicalOrder.join(\n\t\t\t\t\t\t\t' | ',\n\t\t\t\t\t\t)}\".\\nReceived: \"${JSON.stringify(data)}\"`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet key = Object.keys(data)[0];\n\t\t\t\tif (key === undefined) {\n\t\t\t\t\tthrow new Error(`Empty object passed as invariant of the enum \"${name}\"`);\n\t\t\t\t}\n\n\t\t\t\tlet orderByte = canonicalOrder.indexOf(key);\n\t\t\t\tif (orderByte === -1) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Unknown invariant of the enum \"${name}\", allowed values: \"${canonicalOrder.join(\n\t\t\t\t\t\t\t' | ',\n\t\t\t\t\t\t)}\"; received \"${key}\"`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tlet invariant = canonicalOrder[orderByte];\n\t\t\t\tlet invariantType = struct[invariant] as TypeName | null;\n\n\t\t\t\t// write order byte\n\t\t\t\twriter.write8(orderByte);\n\n\t\t\t\t// When { \"key\": null } - empty value for the invariant.\n\t\t\t\tif (invariantType === null) {\n\t\t\t\t\treturn writer;\n\t\t\t\t}\n\n\t\t\t\tlet paramIndex = canonicalTypeParams.indexOf(invariantType);\n\t\t\t\tlet typeOrParam = paramIndex === -1 ? invariantType : typeParams[paramIndex];\n\n\t\t\t\t{\n\t\t\t\t\tlet { name, params } = this.parseTypeName(typeOrParam);\n\t\t\t\t\treturn this.getTypeInterface(name)._encodeRaw.call(\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\twriter,\n\t\t\t\t\t\tdata[key],\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\ttypeMap,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t\tfunction decodeEnum(this: BCS, reader: BcsReader, typeParams, typeMap) {\n\t\t\t\tlet orderByte = reader.readULEB();\n\t\t\t\tlet invariant = canonicalOrder[orderByte];\n\t\t\t\tlet invariantType = struct[invariant] as TypeName | null;\n\n\t\t\t\tif (orderByte === -1) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Decoding type mismatch, expected enum \"${name}\" invariant index, received \"${orderByte}\"`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Encode an empty value for the enum.\n\t\t\t\tif (invariantType === null) {\n\t\t\t\t\treturn { [invariant]: true };\n\t\t\t\t}\n\n\t\t\t\tlet paramIndex = canonicalTypeParams.indexOf(invariantType);\n\t\t\t\tlet typeOrParam = paramIndex === -1 ? invariantType : typeParams[paramIndex];\n\n\t\t\t\t{\n\t\t\t\t\tlet { name, params } = this.parseTypeName(typeOrParam);\n\t\t\t\t\treturn {\n\t\t\t\t\t\t[invariant]: this.getTypeInterface(name)._decodeRaw.call(this, reader, params, typeMap),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n\t/**\n\t * Get a set of encoders/decoders for specific type.\n\t * Mainly used to define custom type de/serialization logic.\n\t *\n\t * @param type\n\t * @returns {TypeInterface}\n\t */\n\tpublic getTypeInterface(type: string): TypeInterface {\n\t\tlet typeInterface = this.types.get(type);\n\n\t\t// Special case - string means an alias.\n\t\t// Goes through the alias chain and tracks recursion.\n\t\tif (typeof typeInterface === 'string') {\n\t\t\tlet chain: string[] = [];\n\t\t\twhile (typeof typeInterface === 'string') {\n\t\t\t\tif (chain.includes(typeInterface)) {\n\t\t\t\t\tthrow new Error(`Recursive definition found: ${chain.join(' -> ')} -> ${typeInterface}`);\n\t\t\t\t}\n\t\t\t\tchain.push(typeInterface);\n\t\t\t\ttypeInterface = this.types.get(typeInterface);\n\t\t\t}\n\t\t}\n\n\t\tif (typeInterface === undefined) {\n\t\t\tthrow new Error(`Type ${type} is not registered`);\n\t\t}\n\n\t\treturn typeInterface;\n\t}\n\n\t/**\n\t * Parse a type name and get the type's generics.\n\t * @example\n\t * let { typeName, typeParams } = parseTypeName('Option<Coin<SUI>>');\n\t * // typeName: Option\n\t * // typeParams: [ 'Coin<SUI>' ]\n\t *\n\t * @param name Name of the type to process\n\t * @returns Object with typeName and typeParams listed as Array\n\t */\n\tpublic parseTypeName(name: TypeName): {\n\t\tname: string;\n\t\tparams: TypeName[];\n\t} {\n\t\tif (Array.isArray(name)) {\n\t\t\tlet [typeName, ...params] = name;\n\t\t\treturn { name: typeName, params };\n\t\t}\n\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new Error(`Illegal type passed as a name of the type: ${name}`);\n\t\t}\n\n\t\tlet [left, right] = this.schema.genericSeparators || ['<', '>'];\n\n\t\tlet l_bound = name.indexOf(left);\n\t\tlet r_bound = Array.from(name).reverse().indexOf(right);\n\n\t\t// if there are no generics - exit gracefully.\n\t\tif (l_bound === -1 && r_bound === -1) {\n\t\t\treturn { name: name, params: [] };\n\t\t}\n\n\t\t// if one of the bounds is not defined - throw an Error.\n\t\tif (l_bound === -1 || r_bound === -1) {\n\t\t\tthrow new Error(`Unclosed generic in name '${name}'`);\n\t\t}\n\n\t\tlet typeName = name.slice(0, l_bound);\n\t\tlet params = splitGenericParameters(\n\t\t\tname.slice(l_bound + 1, name.length - r_bound - 1),\n\t\t\tthis.schema.genericSeparators,\n\t\t);\n\n\t\treturn { name: typeName, params };\n\t}\n}\n\n/**\n * Encode data with either `hex` or `base64`.\n *\n * @param {Uint8Array} data Data to encode.\n * @param {String} encoding Encoding to use: base64 or hex\n * @return {String} Encoded value.\n */\nexport function encodeStr(data: Uint8Array, encoding: Encoding): string {\n\tswitch (encoding) {\n\t\tcase 'base58':\n\t\t\treturn toB58(data);\n\t\tcase 'base64':\n\t\t\treturn toB64(data);\n\t\tcase 'hex':\n\t\t\treturn toHEX(data);\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported encoding, supported values are: base64, hex');\n\t}\n}\n\n/**\n * Decode either `base64` or `hex` data.\n *\n * @param {String} data Data to encode.\n * @param {String} encoding Encoding to use: base64 or hex\n * @return {Uint8Array} Encoded value.\n */\nexport function decodeStr(data: string, encoding: Encoding): Uint8Array {\n\tswitch (encoding) {\n\t\tcase 'base58':\n\t\t\treturn fromB58(data);\n\t\tcase 'base64':\n\t\t\treturn fromB64(data);\n\t\tcase 'hex':\n\t\t\treturn fromHEX(data);\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported encoding, supported values are: base64, hex');\n\t}\n}\n\n/**\n * Register the base set of primitive and common types.\n * Is called in the `BCS` constructor automatically but can\n * be ignored if the `withPrimitives` argument is not set.\n */\nexport function registerPrimitives(bcs: BCS): void {\n\tbcs.registerType(\n\t\tBCS.U8,\n\t\tfunction (writer: BcsWriter, data) {\n\t\t\treturn writer.write8(data);\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\treturn reader.read8();\n\t\t},\n\t\t(u8) => u8 < 256,\n\t);\n\n\tbcs.registerType(\n\t\tBCS.U16,\n\t\tfunction (writer: BcsWriter, data) {\n\t\t\treturn writer.write16(data);\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\treturn reader.read16();\n\t\t},\n\t\t(u16) => u16 < 65536,\n\t);\n\n\tbcs.registerType(\n\t\tBCS.U32,\n\t\tfunction (writer: BcsWriter, data) {\n\t\t\treturn writer.write32(data);\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\treturn reader.read32();\n\t\t},\n\t\t(u32) => u32 <= 4294967296n,\n\t);\n\n\tbcs.registerType(\n\t\tBCS.U64,\n\t\tfunction (writer: BcsWriter, data) {\n\t\t\treturn writer.write64(data);\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\treturn reader.read64();\n\t\t},\n\t);\n\n\tbcs.registerType(\n\t\tBCS.U128,\n\t\tfunction (writer: BcsWriter, data: bigint) {\n\t\t\treturn writer.write128(data);\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\treturn reader.read128();\n\t\t},\n\t);\n\n\tbcs.registerType(\n\t\tBCS.U256,\n\t\tfunction (writer: BcsWriter, data) {\n\t\t\treturn writer.write256(data);\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\treturn reader.read256();\n\t\t},\n\t);\n\n\tbcs.registerType(\n\t\tBCS.BOOL,\n\t\tfunction (writer: BcsWriter, data) {\n\t\t\treturn writer.write8(data);\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\treturn reader.read8().toString(10) === '1';\n\t\t},\n\t);\n\n\tbcs.registerType(\n\t\tBCS.STRING,\n\t\tfunction (writer: BcsWriter, data: string) {\n\t\t\treturn writer.writeVec(Array.from(data), (writer, el) => writer.write8(el.charCodeAt(0)));\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\treturn reader\n\t\t\t\t.readVec((reader) => reader.read8())\n\t\t\t\t.map((el: bigint) => String.fromCharCode(Number(el)))\n\t\t\t\t.join('');\n\t\t},\n\t\t(_str: string) => true,\n\t);\n\n\tbcs.registerType(\n\t\tBCS.HEX,\n\t\tfunction (writer: BcsWriter, data: string) {\n\t\t\treturn writer.writeVec(Array.from(fromHEX(data)), (writer, el) => writer.write8(el));\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\tlet bytes = reader.readVec((reader) => reader.read8());\n\t\t\treturn toHEX(new Uint8Array(bytes));\n\t\t},\n\t);\n\n\tbcs.registerType(\n\t\tBCS.BASE58,\n\t\tfunction (writer: BcsWriter, data: string) {\n\t\t\treturn writer.writeVec(Array.from(fromB58(data)), (writer, el) => writer.write8(el));\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\tlet bytes = reader.readVec((reader) => reader.read8());\n\t\t\treturn toB58(new Uint8Array(bytes));\n\t\t},\n\t);\n\n\tbcs.registerType(\n\t\tBCS.BASE64,\n\t\tfunction (writer: BcsWriter, data: string) {\n\t\t\treturn writer.writeVec(Array.from(fromB64(data)), (writer, el) => writer.write8(el));\n\t\t},\n\t\tfunction (reader: BcsReader) {\n\t\t\tlet bytes = reader.readVec((reader) => reader.read8());\n\t\t\treturn toB64(new Uint8Array(bytes));\n\t\t},\n\t);\n}\n\nexport function getRustConfig(): BcsConfig {\n\treturn {\n\t\tgenericSeparators: ['<', '>'],\n\t\tvectorType: 'Vec',\n\t\taddressLength: SUI_ADDRESS_LENGTH,\n\t\taddressEncoding: 'hex',\n\t};\n}\n\nexport function getSuiMoveConfig(): BcsConfig {\n\treturn {\n\t\tgenericSeparators: ['<', '>'],\n\t\tvectorType: 'vector',\n\t\taddressLength: SUI_ADDRESS_LENGTH,\n\t\taddressEncoding: 'hex',\n\t};\n}\n\nexport function splitGenericParameters(\n\tstr: string,\n\tgenericSeparators: [string, string] = ['<', '>'],\n) {\n\tconst [left, right] = genericSeparators;\n\tconst tok = [];\n\tlet word = '';\n\tlet nestedAngleBrackets = 0;\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tconst char = str[i];\n\t\tif (char === left) {\n\t\t\tnestedAngleBrackets++;\n\t\t}\n\t\tif (char === right) {\n\t\t\tnestedAngleBrackets--;\n\t\t}\n\t\tif (nestedAngleBrackets === 0 && char === ',') {\n\t\t\ttok.push(word.trim());\n\t\t\tword = '';\n\t\t\tcontinue;\n\t\t}\n\t\tword += char;\n\t}\n\n\ttok.push(word.trim());\n\n\treturn tok;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumTypeDefinition, StructTypeDefinition } from '@mysten/bcs';\nimport { BCS, getSuiMoveConfig } from '@mysten/bcs';\nimport type { SuiObjectRef } from '../types/objects.js';\n\n/**\n * A reference to a shared object.\n */\nexport type SharedObjectRef = {\n\t/** Hex code as string representing the object id */\n\tobjectId: string;\n\n\t/** The version the object was shared at */\n\tinitialSharedVersion: number | string;\n\n\t/** Whether reference is mutable */\n\tmutable: boolean;\n};\n\n/**\n * An object argument.\n */\nexport type ObjectArg = { ImmOrOwned: SuiObjectRef } | { Shared: SharedObjectRef };\n\n/**\n * A pure argument.\n */\nexport type PureArg = { Pure: ArrayLike<number> };\n\nexport function isPureArg(arg: any): arg is PureArg {\n\treturn (arg as PureArg).Pure !== undefined;\n}\n\n/**\n * An argument for the transaction. It is a 'meant' enum which expects to have\n * one of the optional properties. If not, the BCS error will be thrown while\n * attempting to form a transaction.\n *\n * Example:\n * ```js\n * let arg1: CallArg = { Object: { Shared: {\n *   objectId: '5460cf92b5e3e7067aaace60d88324095fd22944',\n *   initialSharedVersion: 1,\n *   mutable: true,\n * } } };\n * let arg2: CallArg = { Pure: bcs.ser(BCS.STRING, 100000).toBytes() };\n * let arg3: CallArg = { Object: { ImmOrOwned: {\n *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',\n *   version: 1,\n *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='\n * } } };\n * ```\n *\n * For `Pure` arguments BCS is required. You must encode the values with BCS according\n * to the type required by the called function. Pure accepts only serialized values\n */\nexport type CallArg = PureArg | { Object: ObjectArg };\n\n/**\n * Kind of a TypeTag which is represented by a Move type identifier.\n */\nexport type StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: TypeTag[];\n};\n\n/**\n * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.\n */\nexport type TypeTag =\n\t| { bool: null }\n\t| { u8: null }\n\t| { u64: null }\n\t| { u128: null }\n\t| { address: null }\n\t| { signer: null }\n\t| { vector: TypeTag }\n\t| { struct: StructTag }\n\t| { u16: null }\n\t| { u32: null }\n\t| { u256: null };\n\n// ========== TransactionData ===========\n\n/**\n * The GasData to be used in the transaction.\n */\nexport type GasData = {\n\tpayment: SuiObjectRef[];\n\towner: string; // Gas Object's owner\n\tprice: number;\n\tbudget: number;\n};\n\n/**\n * TransactionExpiration\n *\n * Indications the expiration time for a transaction.\n */\nexport type TransactionExpiration = { None: null } | { Epoch: number };\n\n// Move name of the Vector type.\nconst VECTOR = 'vector';\n\n// Imported to explicitly tell typescript that types match\ntype TypeSchema = {\n\tstructs?: { [key: string]: StructTypeDefinition };\n\tenums?: { [key: string]: EnumTypeDefinition };\n\taliases?: { [key: string]: string };\n};\n\nconst TransactionDataV1 = {\n\tkind: 'TransactionKind',\n\tsender: BCS.ADDRESS,\n\tgasData: 'GasData',\n\texpiration: 'TransactionExpiration',\n};\n\nconst BCS_SPEC: TypeSchema = {\n\tenums: {\n\t\t'Option<T>': {\n\t\t\tNone: null,\n\t\t\tSome: 'T',\n\t\t},\n\t\tObjectArg: {\n\t\t\tImmOrOwned: 'SuiObjectRef',\n\t\t\tShared: 'SharedObjectRef',\n\t\t},\n\t\tCallArg: {\n\t\t\tPure: [VECTOR, BCS.U8],\n\t\t\tObject: 'ObjectArg',\n\t\t\tObjVec: [VECTOR, 'ObjectArg'],\n\t\t},\n\t\tTypeTag: {\n\t\t\tbool: null,\n\t\t\tu8: null,\n\t\t\tu64: null,\n\t\t\tu128: null,\n\t\t\taddress: null,\n\t\t\tsigner: null,\n\t\t\tvector: 'TypeTag',\n\t\t\tstruct: 'StructTag',\n\t\t\tu16: null,\n\t\t\tu32: null,\n\t\t\tu256: null,\n\t\t},\n\t\tTransactionKind: {\n\t\t\t// can not be called from sui.js; dummy placement\n\t\t\t// to set the enum counter right for ProgrammableTransact\n\t\t\tProgrammableTransaction: 'ProgrammableTransaction',\n\t\t\tChangeEpoch: null,\n\t\t\tGenesis: null,\n\t\t\tConsensusCommitPrologue: null,\n\t\t},\n\t\tTransactionExpiration: {\n\t\t\tNone: null,\n\t\t\tEpoch: 'unsafe_u64',\n\t\t},\n\t\tTransactionData: {\n\t\t\tV1: 'TransactionDataV1',\n\t\t},\n\t},\n\tstructs: {\n\t\tSuiObjectRef: {\n\t\t\tobjectId: BCS.ADDRESS,\n\t\t\tversion: BCS.U64,\n\t\t\tdigest: 'ObjectDigest',\n\t\t},\n\t\tSharedObjectRef: {\n\t\t\tobjectId: BCS.ADDRESS,\n\t\t\tinitialSharedVersion: BCS.U64,\n\t\t\tmutable: BCS.BOOL,\n\t\t},\n\t\tStructTag: {\n\t\t\taddress: BCS.ADDRESS,\n\t\t\tmodule: BCS.STRING,\n\t\t\tname: BCS.STRING,\n\t\t\ttypeParams: [VECTOR, 'TypeTag'],\n\t\t},\n\t\tGasData: {\n\t\t\tpayment: [VECTOR, 'SuiObjectRef'],\n\t\t\towner: BCS.ADDRESS,\n\t\t\tprice: BCS.U64,\n\t\t\tbudget: BCS.U64,\n\t\t},\n\t\t// Signed transaction data needed to generate transaction digest.\n\t\tSenderSignedData: {\n\t\t\tdata: 'TransactionData',\n\t\t\ttxSignatures: [VECTOR, [VECTOR, BCS.U8]],\n\t\t},\n\t\tTransactionDataV1,\n\t},\n\taliases: {\n\t\tObjectDigest: BCS.BASE58,\n\t},\n};\n\nconst bcs = new BCS({ ...getSuiMoveConfig(), types: BCS_SPEC });\n\nbcs.registerType(\n\t'utf8string',\n\t(writer, str) => {\n\t\tconst bytes = Array.from(new TextEncoder().encode(str));\n\t\treturn writer.writeVec(bytes, (writer, el) => writer.write8(el));\n\t},\n\t(reader) => {\n\t\tlet bytes = reader.readVec((reader) => reader.read8());\n\t\treturn new TextDecoder().decode(new Uint8Array(bytes));\n\t},\n);\n\nbcs.registerType(\n\t'unsafe_u64',\n\t(writer, data) => writer.write64(data),\n\t(reader) => Number.parseInt(reader.read64(), 10),\n);\n\nexport { bcs };\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB58, splitGenericParameters } from '@mysten/bcs';\n\nconst TX_DIGEST_LENGTH = 32;\n\n/** Returns whether the tx digest is valid based on the serialization format */\nexport function isValidTransactionDigest(value: string): value is string {\n\ttry {\n\t\tconst buffer = fromB58(value);\n\t\treturn buffer.length === TX_DIGEST_LENGTH;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\n// TODO - can we automatically sync this with rust length definition?\n// Source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67\n// which uses the Move account address length\n// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .\n\nexport const SUI_ADDRESS_LENGTH = 32;\nexport function isValidSuiAddress(value: string): value is string {\n\treturn isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\n\nexport function isValidSuiObjectId(value: string): boolean {\n\treturn isValidSuiAddress(value);\n}\n\ntype StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: (string | StructTag)[];\n};\n\nfunction parseTypeTag(type: string): string | StructTag {\n\tif (!type.includes('::')) return type;\n\n\treturn parseStructTag(type);\n}\n\nexport function parseStructTag(type: string): StructTag {\n\tconst [address, module] = type.split('::');\n\n\tconst rest = type.slice(address.length + module.length + 4);\n\tconst name = rest.includes('<') ? rest.slice(0, rest.indexOf('<')) : rest;\n\tconst typeParams = rest.includes('<')\n\t\t? splitGenericParameters(rest.slice(rest.indexOf('<') + 1, rest.lastIndexOf('>'))).map(\n\t\t\t\t(typeParam) => parseTypeTag(typeParam.trim()),\n\t\t  )\n\t\t: [];\n\n\treturn {\n\t\taddress: normalizeSuiAddress(address),\n\t\tmodule,\n\t\tname,\n\t\ttypeParams,\n\t};\n}\n\nexport function normalizeStructTag(type: string | StructTag): string {\n\tconst { address, module, name, typeParams } =\n\t\ttypeof type === 'string' ? parseStructTag(type) : type;\n\n\tconst formattedTypeParams =\n\t\ttypeParams.length > 0\n\t\t\t? `<${typeParams\n\t\t\t\t\t.map((typeParam) =>\n\t\t\t\t\t\ttypeof typeParam === 'string' ? typeParam : normalizeStructTag(typeParam),\n\t\t\t\t\t)\n\t\t\t\t\t.join(',')}>`\n\t\t\t: '';\n\n\treturn `${address}::${module}::${name}${formattedTypeParams}`;\n}\n\n/**\n * Perform the following operations:\n * 1. Make the address lower case\n * 2. Prepend `0x` if the string does not start with `0x`.\n * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`\n *\n * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior\n * is to treat the first `0x` not as part of the address. The default behavior can be overridden by\n * setting `forceAdd0x` to true\n *\n */\nexport function normalizeSuiAddress(value: string, forceAdd0x: boolean = false): string {\n\tlet address = value.toLowerCase();\n\tif (!forceAdd0x && address.startsWith('0x')) {\n\t\taddress = address.slice(2);\n\t}\n\treturn `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, '0')}`;\n}\n\nexport function normalizeSuiObjectId(value: string, forceAdd0x: boolean = false): string {\n\treturn normalizeSuiAddress(value, forceAdd0x);\n}\n\nfunction isHex(value: string): boolean {\n\treturn /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\n\nfunction getHexByteLength(value: string): number {\n\treturn /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { splitGenericParameters } from '@mysten/bcs';\nimport type { TypeTag } from '../bcs/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\n\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\n\nexport class TypeTagSerializer {\n\tstatic parseFromStr(str: string, normalizeAddress = false): TypeTag {\n\t\tif (str === 'address') {\n\t\t\treturn { address: null };\n\t\t} else if (str === 'bool') {\n\t\t\treturn { bool: null };\n\t\t} else if (str === 'u8') {\n\t\t\treturn { u8: null };\n\t\t} else if (str === 'u16') {\n\t\t\treturn { u16: null };\n\t\t} else if (str === 'u32') {\n\t\t\treturn { u32: null };\n\t\t} else if (str === 'u64') {\n\t\t\treturn { u64: null };\n\t\t} else if (str === 'u128') {\n\t\t\treturn { u128: null };\n\t\t} else if (str === 'u256') {\n\t\t\treturn { u256: null };\n\t\t} else if (str === 'signer') {\n\t\t\treturn { signer: null };\n\t\t}\n\t\tconst vectorMatch = str.match(VECTOR_REGEX);\n\t\tif (vectorMatch) {\n\t\t\treturn {\n\t\t\t\tvector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress),\n\t\t\t};\n\t\t}\n\n\t\tconst structMatch = str.match(STRUCT_REGEX);\n\t\tif (structMatch) {\n\t\t\tconst address = normalizeAddress ? normalizeSuiAddress(structMatch[1]) : structMatch[1];\n\t\t\treturn {\n\t\t\t\tstruct: {\n\t\t\t\t\taddress,\n\t\t\t\t\tmodule: structMatch[2],\n\t\t\t\t\tname: structMatch[3],\n\t\t\t\t\ttypeParams:\n\t\t\t\t\t\tstructMatch[5] === undefined\n\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t: TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tthrow new Error(`Encountered unexpected token when parsing type args for ${str}`);\n\t}\n\n\tstatic parseStructTypeArgs(str: string, normalizeAddress = false): TypeTag[] {\n\t\treturn splitGenericParameters(str).map((tok) =>\n\t\t\tTypeTagSerializer.parseFromStr(tok, normalizeAddress),\n\t\t);\n\t}\n\n\tstatic tagToString(tag: TypeTag): string {\n\t\tif ('bool' in tag) {\n\t\t\treturn 'bool';\n\t\t}\n\t\tif ('u8' in tag) {\n\t\t\treturn 'u8';\n\t\t}\n\t\tif ('u16' in tag) {\n\t\t\treturn 'u16';\n\t\t}\n\t\tif ('u32' in tag) {\n\t\t\treturn 'u32';\n\t\t}\n\t\tif ('u64' in tag) {\n\t\t\treturn 'u64';\n\t\t}\n\t\tif ('u128' in tag) {\n\t\t\treturn 'u128';\n\t\t}\n\t\tif ('u256' in tag) {\n\t\t\treturn 'u256';\n\t\t}\n\t\tif ('address' in tag) {\n\t\t\treturn 'address';\n\t\t}\n\t\tif ('signer' in tag) {\n\t\t\treturn 'signer';\n\t\t}\n\t\tif ('vector' in tag) {\n\t\t\treturn `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n\t\t}\n\t\tif ('struct' in tag) {\n\t\t\tconst struct = tag.struct;\n\t\t\tconst typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(', ');\n\t\t\treturn `${struct.address}::${struct.module}::${struct.name}${\n\t\t\t\ttypeParams ? `<${typeParams}>` : ''\n\t\t\t}`;\n\t\t}\n\t\tthrow new Error('Invalid TypeTag');\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { TypeName } from '@mysten/bcs';\nimport { BCS } from '@mysten/bcs';\nimport { bcs } from '../bcs/index.js';\nimport type { TypeTag } from '../bcs/index.js';\nimport { TypeTagSerializer } from './type-tag-serializer.js';\nimport type { TransactionArgument, MoveCallTransaction } from './Transactions.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\n\nexport const ARGUMENT_INNER = 'Argument';\nexport const VECTOR = 'vector';\nexport const OPTION = 'Option';\nexport const CALL_ARG = 'CallArg';\nexport const TYPE_TAG = 'TypeTag';\nexport const OBJECT_ARG = 'ObjectArg';\nexport const PROGRAMMABLE_TX_BLOCK = 'ProgrammableTransaction';\nexport const PROGRAMMABLE_CALL_INNER = 'ProgrammableMoveCall';\nexport const TRANSACTION_INNER = 'Transaction';\nexport const COMPRESSED_SIGNATURE = 'CompressedSignature';\nexport const PUBLIC_KEY = 'PublicKey';\nexport const MULTISIG_PUBLIC_KEY = 'MultiSigPublicKey';\nexport const MULTISIG_PK_MAP = 'MultiSigPkMap';\nexport const MULTISIG = 'MultiSig';\n\nexport const ENUM_KIND = 'EnumKind';\n\n/** Wrapper around transaction Enum to support `kind` matching in TS */\nexport const TRANSACTION: TypeName = [ENUM_KIND, TRANSACTION_INNER];\n/** Wrapper around Argument Enum to support `kind` matching in TS */\nexport const ARGUMENT: TypeName = [ENUM_KIND, ARGUMENT_INNER];\n\n/** Custom serializer for decoding package, module, function easier */\nexport const PROGRAMMABLE_CALL = 'SimpleProgrammableMoveCall';\n\n/** Transaction types */\n\nexport type Option<T> = { some: T } | { none: true };\n\nexport const builder = new BCS(bcs);\nregisterFixedArray(builder, 'FixedArray[64]', 64);\nregisterFixedArray(builder, 'FixedArray[33]', 33);\nregisterFixedArray(builder, 'FixedArray[32]', 32);\n\nbuilder\n\t.registerStructType(PROGRAMMABLE_TX_BLOCK, {\n\t\tinputs: [VECTOR, CALL_ARG],\n\t\ttransactions: [VECTOR, TRANSACTION],\n\t})\n\t.registerEnumType(ARGUMENT_INNER, {\n\t\tGasCoin: null,\n\t\tInput: { index: BCS.U16 },\n\t\tResult: { index: BCS.U16 },\n\t\tNestedResult: { index: BCS.U16, resultIndex: BCS.U16 },\n\t})\n\t.registerStructType(PROGRAMMABLE_CALL_INNER, {\n\t\tpackage: BCS.ADDRESS,\n\t\tmodule: BCS.STRING,\n\t\tfunction: BCS.STRING,\n\t\ttype_arguments: [VECTOR, TYPE_TAG],\n\t\targuments: [VECTOR, ARGUMENT],\n\t})\n\t// Keep this in sync with crates/sui-types/src/messages.rs\n\t.registerEnumType(TRANSACTION_INNER, {\n\t\t/**\n\t\t * A Move Call - any public Move function can be called via\n\t\t * this transaction. The results can be used that instant to pass\n\t\t * into the next transaction.\n\t\t */\n\t\tMoveCall: PROGRAMMABLE_CALL,\n\t\t/**\n\t\t * Transfer vector of objects to a receiver.\n\t\t */\n\t\tTransferObjects: {\n\t\t\tobjects: [VECTOR, ARGUMENT],\n\t\t\taddress: ARGUMENT,\n\t\t},\n\t\t/**\n\t\t * Split `amount` from a `coin`.\n\t\t */\n\t\tSplitCoins: { coin: ARGUMENT, amounts: [VECTOR, ARGUMENT] },\n\t\t/**\n\t\t * Merge Vector of Coins (`sources`) into a `destination`.\n\t\t */\n\t\tMergeCoins: { destination: ARGUMENT, sources: [VECTOR, ARGUMENT] },\n\t\t/**\n\t\t * Publish a Move module.\n\t\t */\n\t\tPublish: {\n\t\t\tmodules: [VECTOR, [VECTOR, BCS.U8]],\n\t\t\tdependencies: [VECTOR, BCS.ADDRESS],\n\t\t},\n\t\t/**\n\t\t * Build a vector of objects using the input arguments.\n\t\t * It is impossible to construct a `vector<T: key>` otherwise,\n\t\t * so this call serves a utility function.\n\t\t */\n\t\tMakeMoveVec: {\n\t\t\ttype: [OPTION, TYPE_TAG],\n\t\t\tobjects: [VECTOR, ARGUMENT],\n\t\t},\n\t\t/**  */\n\t\tUpgrade: {\n\t\t\tmodules: [VECTOR, [VECTOR, BCS.U8]],\n\t\t\tdependencies: [VECTOR, BCS.ADDRESS],\n\t\t\tpackageId: BCS.ADDRESS,\n\t\t\tticket: ARGUMENT,\n\t\t},\n\t})\n\t.registerEnumType(COMPRESSED_SIGNATURE, {\n\t\tED25519: ['FixedArray[64]', 'u8'],\n\t\tSecp256k1: ['FixedArray[64]', 'u8'],\n\t\tSecp256r1: ['FixedArray[64]', 'u8'],\n\t})\n\t.registerEnumType(PUBLIC_KEY, {\n\t\tED25519: ['FixedArray[32]', 'u8'],\n\t\tSecp256k1: ['FixedArray[33]', 'u8'],\n\t\tSecp256r1: ['FixedArray[33]', 'u8'],\n\t})\n\t.registerStructType(MULTISIG_PK_MAP, {\n\t\tpubKey: PUBLIC_KEY,\n\t\tweight: BCS.U8,\n\t})\n\t.registerStructType(MULTISIG_PUBLIC_KEY, {\n\t\tpk_map: [VECTOR, MULTISIG_PK_MAP],\n\t\tthreshold: BCS.U16,\n\t})\n\t.registerStructType(MULTISIG, {\n\t\tsigs: [VECTOR, COMPRESSED_SIGNATURE],\n\t\tbitmap: BCS.U16,\n\t\tmultisig_pk: MULTISIG_PUBLIC_KEY,\n\t});\n/**\n * Utilities for better decoding.\n */\n\ntype ProgrammableCallInner = {\n\tpackage: string;\n\tmodule: string;\n\tfunction: string;\n\ttype_arguments: TypeTag[];\n\targuments: TransactionArgument[];\n};\n\n/**\n * Wrapper around Enum, which transforms any `T` into an object with `kind` property:\n * @example\n * ```\n * let bcsEnum = { TransferObjects: { objects: [], address: ... } }\n * // becomes\n * let translatedEnum = { kind: 'TransferObjects', objects: [], address: ... };\n * ```\n */\nbuilder.registerType(\n\t[ENUM_KIND, 'T'],\n\tfunction encode(this: BCS, writer, data: { kind: string }, typeParams, typeMap) {\n\t\tconst kind = data.kind;\n\t\tconst invariant = { [kind]: data };\n\t\tconst [enumType] = typeParams;\n\n\t\treturn this.getTypeInterface(enumType as string)._encodeRaw.call(\n\t\t\tthis,\n\t\t\twriter,\n\t\t\tinvariant,\n\t\t\ttypeParams,\n\t\t\ttypeMap,\n\t\t);\n\t},\n\tfunction decode(this: BCS, reader, typeParams, typeMap) {\n\t\tconst [enumType] = typeParams;\n\t\tconst data = this.getTypeInterface(enumType as string)._decodeRaw.call(\n\t\t\tthis,\n\t\t\treader,\n\t\t\ttypeParams,\n\t\t\ttypeMap,\n\t\t);\n\n\t\t// enum invariant can only have one `key` field\n\t\tconst kind = Object.keys(data)[0];\n\t\treturn { kind, ...data[kind] };\n\t},\n\t(data: { kind: string }) => {\n\t\tif (typeof data !== 'object' && !('kind' in data)) {\n\t\t\tthrow new Error(`EnumKind: Missing property \"kind\" in the input ${JSON.stringify(data)}`);\n\t\t}\n\n\t\treturn true;\n\t},\n);\n\n/**\n * Custom deserializer for the ProgrammableCall.\n *\n * Hides the inner structure and gives a simpler, more convenient\n * interface to encode and decode this struct as a part of `TransactionData`.\n *\n * - `(package)::(module)::(function)` are now `target` property.\n * - `TypeTag[]` array is now passed as strings, not as a struct.\n */\nbuilder.registerType(\n\tPROGRAMMABLE_CALL,\n\tfunction encodeProgrammableTx(this: BCS, writer, data: MoveCallTransaction, typeParams, typeMap) {\n\t\tconst [pkg, module, fun] = data.target.split('::');\n\t\tconst type_arguments = data.typeArguments.map((tag) =>\n\t\t\tTypeTagSerializer.parseFromStr(tag, true),\n\t\t);\n\n\t\treturn this.getTypeInterface(PROGRAMMABLE_CALL_INNER)._encodeRaw.call(\n\t\t\tthis,\n\t\t\twriter,\n\t\t\t{\n\t\t\t\tpackage: normalizeSuiAddress(pkg),\n\t\t\t\tmodule,\n\t\t\t\tfunction: fun,\n\t\t\t\ttype_arguments,\n\t\t\t\targuments: data.arguments,\n\t\t\t} as ProgrammableCallInner,\n\t\t\ttypeParams,\n\t\t\ttypeMap,\n\t\t);\n\t},\n\tfunction decodeProgrammableTx(this: BCS, reader, typeParams, typeMap) {\n\t\tlet data: ProgrammableCallInner = builder\n\t\t\t.getTypeInterface(PROGRAMMABLE_CALL_INNER)\n\t\t\t._decodeRaw.call(this, reader, typeParams, typeMap);\n\n\t\treturn {\n\t\t\ttarget: [data.package, data.module, data.function].join('::'),\n\t\t\targuments: data.arguments,\n\t\t\ttypeArguments: data.type_arguments.map(TypeTagSerializer.tagToString),\n\t\t};\n\t},\n\t// Validation callback to error out if the data format is invalid.\n\t// TODO: make sure TypeTag can be parsed.\n\t(data: MoveCallTransaction) => {\n\t\treturn data.target.split('::').length === 3;\n\t},\n);\n\nfunction registerFixedArray(bcs: BCS, name: string, length: number) {\n\tbcs.registerType(\n\t\tname,\n\t\tfunction encode(this: BCS, writer, data, typeParams, typeMap) {\n\t\t\tif (data.length !== length) {\n\t\t\t\tthrow new Error(`Expected fixed array of length ${length}, got ${data.length}`);\n\t\t\t}\n\n\t\t\tif (typeParams.length !== 1) {\n\t\t\t\tthrow new Error(`Expected one type parameter in a fixed array, got ${typeParams.length}`);\n\t\t\t}\n\n\t\t\tlet [type] = typeof typeParams[0] === 'string' ? [typeParams[0], []] : typeParams[0];\n\n\t\t\tfor (let piece of data) {\n\t\t\t\tthis.getTypeInterface(type)._encodeRaw.call(this, writer, piece, typeParams, typeMap);\n\t\t\t}\n\n\t\t\treturn writer;\n\t\t},\n\t\tfunction decode(this: BCS, reader, typeParams, typeMap) {\n\t\t\tif (typeParams.length !== 1) {\n\t\t\t\tthrow new Error(`Expected one type parameter in a fixed array, got ${typeParams.length}`);\n\t\t\t}\n\n\t\t\tlet result: any = [];\n\t\t\tlet [type] = typeof typeParams[0] === 'string' ? [typeParams[0], []] : typeParams[0];\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tresult.push(this.getTypeInterface(type)._decodeRaw.call(this, reader, typeParams, typeMap));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { PublicKey } from './publickey.js';\nimport type { MultiSigStruct } from '../multisig/publickey.js';\nimport { builder } from '../builder/bcs.js';\n\nexport type SignatureScheme = 'ED25519' | 'Secp256k1' | 'Secp256r1' | 'MultiSig';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SerializeSignatureInput = {\n\tsignatureScheme: SignatureScheme;\n\t/** Base64-encoded signature */\n\tsignature: Uint8Array;\n\t/** @deprecated use publicKey instead */\n\tpubKey?: PublicKey;\n\t/** Base64-encoded public key */\n\tpublicKey?: PublicKey;\n};\n\n/**\n * (`flag || signature || pubkey` bytes, as base-64 encoded string).\n * Signature is committed to the intent message of the transaction data, as base-64 encoded string.\n */\nexport type SerializedSignature = string;\n\nexport const SIGNATURE_SCHEME_TO_FLAG = {\n\tED25519: 0x00,\n\tSecp256k1: 0x01,\n\tSecp256r1: 0x02,\n\tMultiSig: 0x03,\n};\n\nexport const SIGNATURE_SCHEME_TO_SIZE = {\n\tED25519: 32,\n\tSecp256k1: 33,\n\tSecp256r1: 33,\n};\n\nexport const SIGNATURE_FLAG_TO_SCHEME = {\n\t0x00: 'ED25519',\n\t0x01: 'Secp256k1',\n\t0x02: 'Secp256r1',\n\t0x03: 'MultiSig',\n} as const;\n\nexport type SignatureFlag = keyof typeof SIGNATURE_FLAG_TO_SCHEME;\n\nexport function toSerializedSignature({\n\tsignature,\n\tsignatureScheme,\n\tpubKey,\n\tpublicKey = pubKey,\n}: SerializeSignatureInput): SerializedSignature {\n\tif (!publicKey) {\n\t\tthrow new Error('`publicKey` is required');\n\t}\n\n\tconst pubKeyBytes = publicKey.toBytes();\n\tconst serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n\tserializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n\tserializedSignature.set(signature, 1);\n\tserializedSignature.set(pubKeyBytes, 1 + signature.length);\n\treturn toB64(serializedSignature);\n}\n\nexport function parseSerializedSignature(serializedSignature: SerializedSignature) {\n\tconst bytes = fromB64(serializedSignature);\n\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tif (signatureScheme === 'MultiSig') {\n\t\tconst multisig: MultiSigStruct = builder.de('MultiSig', bytes.slice(1));\n\t\treturn {\n\t\t\tserializedSignature,\n\t\t\tsignatureScheme,\n\t\t\tmultisig,\n\t\t\tbytes,\n\t\t};\n\t}\n\n\tif (!(signatureScheme in SIGNATURE_SCHEME_TO_SIZE)) {\n\t\tthrow new Error('Unsupported signature scheme');\n\t}\n\n\tconst size = SIGNATURE_SCHEME_TO_SIZE[signatureScheme as keyof typeof SIGNATURE_SCHEME_TO_SIZE];\n\n\tconst signature = bytes.slice(1, bytes.length - size);\n\tconst publicKey = bytes.slice(1 + signature.length);\n\n\treturn {\n\t\tserializedSignature,\n\t\tsignatureScheme,\n\t\tsignature,\n\t\tpublicKey,\n\t\tbytes,\n\t};\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// See: sui/crates/sui-types/src/intent.rs\nexport enum AppId {\n\tSui = 0,\n}\n\nexport enum IntentVersion {\n\tV0 = 0,\n}\n\nexport enum IntentScope {\n\tTransactionData = 0,\n\tTransactionEffects = 1,\n\tCheckpointSummary = 2,\n\tPersonalMessage = 3,\n}\n\nexport type Intent = [IntentScope, IntentVersion, AppId];\n\nfunction intentWithScope(scope: IntentScope): Intent {\n\treturn [scope, IntentVersion.V0, AppId.Sui];\n}\n\nexport function messageWithIntent(scope: IntentScope, message: Uint8Array) {\n\tconst intent = intentWithScope(scope);\n\tconst intentMessage = new Uint8Array(intent.length + message.length);\n\tintentMessage.set(intent);\n\tintentMessage.set(message, intent.length);\n\treturn intentMessage;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toB64 } from '@mysten/bcs';\nimport { IntentScope, messageWithIntent } from './intent.js';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bcs } from '../bcs/index.js';\nimport type { SerializedSignature } from './index.js';\nimport { SUI_ADDRESS_LENGTH, normalizeSuiAddress } from '../utils/sui-types.js';\nimport { bytesToHex } from '@noble/hashes/utils';\n\n/**\n * Value to be converted into public key.\n */\nexport type PublicKeyInitData = string | Uint8Array | Iterable<number>;\n\nexport function bytesEqual(a: Uint8Array, b: Uint8Array) {\n\tif (a === b) return true;\n\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * A public key\n */\nexport abstract class PublicKey {\n\t/**\n\t * Checks if two public keys are equal\n\t */\n\tequals(publicKey: PublicKey) {\n\t\treturn bytesEqual(this.toRawBytes(), publicKey.toRawBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the public key\n\t */\n\ttoBase64() {\n\t\treturn toB64(this.toRawBytes());\n\t}\n\n\t/**\n\t * @deprecated use toBase64 instead.\n\t *\n\t * Return the base-64 representation of the public key\n\t */\n\ttoString() {\n\t\treturn this.toBase64();\n\t}\n\n\t/**\n\t * Return the Sui representation of the public key encoded in\n\t * base-64. A Sui public key is formed by the concatenation\n\t * of the scheme flag with the raw bytes of the public key\n\t */\n\ttoSuiPublicKey(): string {\n\t\tconst bytes = this.toSuiBytes();\n\t\treturn toB64(bytes);\n\t}\n\n\tverifyWithIntent(\n\t\tbytes: Uint8Array,\n\t\tsignature: Uint8Array | SerializedSignature,\n\t\tintent: IntentScope,\n\t): Promise<boolean> {\n\t\tconst intentMessage = messageWithIntent(intent, bytes);\n\t\tconst digest = blake2b(intentMessage, { dkLen: 32 });\n\n\t\treturn this.verify(digest, signature);\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided PersonalMessage\n\t */\n\tverifyPersonalMessage(\n\t\tmessage: Uint8Array,\n\t\tsignature: Uint8Array | SerializedSignature,\n\t): Promise<boolean> {\n\t\treturn this.verifyWithIntent(\n\t\t\tbcs.ser(['vector', 'u8'], message).toBytes(),\n\t\t\tsignature,\n\t\t\tIntentScope.PersonalMessage,\n\t\t);\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided TransactionBlock\n\t */\n\tverifyTransactionBlock(\n\t\ttransactionBlock: Uint8Array,\n\t\tsignature: Uint8Array | SerializedSignature,\n\t): Promise<boolean> {\n\t\treturn this.verifyWithIntent(transactionBlock, signature, IntentScope.TransactionData);\n\t}\n\n\t/**\n\t * Returns the bytes representation of the public key\n\t * prefixed with the signature scheme flag\n\t */\n\ttoSuiBytes(): Uint8Array {\n\t\tconst rawBytes = this.toRawBytes();\n\t\tconst suiBytes = new Uint8Array(rawBytes.length + 1);\n\t\tsuiBytes.set([this.flag()]);\n\t\tsuiBytes.set(rawBytes, 1);\n\n\t\treturn suiBytes;\n\t}\n\n\t/**\n\t * @deprecated use `toRawBytes` instead.\n\t */\n\ttoBytes() {\n\t\treturn this.toRawBytes();\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\ttoSuiAddress(): string {\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(this.toSuiBytes(), { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the byte array representation of the public key\n\t */\n\tabstract toRawBytes(): Uint8Array;\n\n\t/**\n\t * Return signature scheme flag of the public key\n\t */\n\tabstract flag(): number;\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tabstract verify(data: Uint8Array, signature: Uint8Array | SerializedSignature): Promise<boolean>;\n}\n", "/**\r\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\r\n *\r\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\r\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\r\n *\r\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\r\n * @module\r\n * @deprecated\r\n */\r\nimport {\r\n  SHA224 as SHA224n,\r\n  sha224 as sha224n,\r\n  SHA256 as SHA256n,\r\n  sha256 as sha256n,\r\n} from './sha2.ts';\r\n/** @deprecated Use import from `noble/hashes/sha2` module */\r\nexport const SHA256: typeof SHA256n = SHA256n;\r\n/** @deprecated Use import from `noble/hashes/sha2` module */\r\nexport const sha256: typeof sha256n = sha256n;\r\n/** @deprecated Use import from `noble/hashes/sha2` module */\r\nexport const SHA224: typeof SHA224n = SHA224n;\r\n/** @deprecated Use import from `noble/hashes/sha2` module */\r\nexport const sha224: typeof sha224n = sha224n;\r\n", "/**\r\n * Hex, bytes and number utilities.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport {\r\n  abytes as abytes_,\r\n  bytesToHex as bytesToHex_,\r\n  concatBytes as concatBytes_,\r\n  hexToBytes as hexToBytes_,\r\n  isBytes as isBytes_,\r\n} from '@noble/hashes/utils.js';\r\nexport {\r\n  abytes,\r\n  anumber,\r\n  bytesToHex,\r\n  bytesToUtf8,\r\n  concatBytes,\r\n  hexToBytes,\r\n  isBytes,\r\n  randomBytes,\r\n  utf8ToBytes,\r\n} from '@noble/hashes/utils.js';\r\nconst _0n = /* @__PURE__ */ BigInt(0);\r\nconst _1n = /* @__PURE__ */ BigInt(1);\r\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\r\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\r\nexport type CHash = {\r\n  (message: Uint8Array | string): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create(opts?: { dkLen?: number }): any; // For shake\r\n};\r\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\r\n\r\nexport function abool(title: string, value: boolean): void {\r\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\r\n}\r\n\r\n// tmp name until v2\r\nexport function _abool2(value: boolean, title: string = ''): boolean {\r\n  if (typeof value !== 'boolean') {\r\n    const prefix = title && `\"${title}\"`;\r\n    throw new Error(prefix + 'expected boolean, got type=' + typeof value);\r\n  }\r\n  return value;\r\n}\r\n\r\n// tmp name until v2\r\n/** Asserts something is Uint8Array. */\r\nexport function _abytes2(value: Uint8Array, length?: number, title: string = ''): Uint8Array {\r\n  const bytes = isBytes_(value);\r\n  const len = value?.length;\r\n  const needsLen = length !== undefined;\r\n  if (!bytes || (needsLen && len !== length)) {\r\n    const prefix = title && `\"${title}\" `;\r\n    const ofLen = needsLen ? ` of length ${length}` : '';\r\n    const got = bytes ? `length=${len}` : `type=${typeof value}`;\r\n    throw new Error(prefix + 'expected Uint8Array' + ofLen + ', got ' + got);\r\n  }\r\n  return value;\r\n}\r\n\r\n// Used in weierstrass, der\r\nexport function numberToHexUnpadded(num: number | bigint): string {\r\n  const hex = num.toString(16);\r\n  return hex.length & 1 ? '0' + hex : hex;\r\n}\r\n\r\nexport function hexToNumber(hex: string): bigint {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\r\n}\r\n\r\n// BE: Big Endian, LE: Little Endian\r\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\r\n  return hexToNumber(bytesToHex_(bytes));\r\n}\r\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\r\n  abytes_(bytes);\r\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\r\n}\r\n\r\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\r\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\r\n}\r\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\r\n  return numberToBytesBE(n, len).reverse();\r\n}\r\n// Unpadded, rarely used\r\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\r\n  return hexToBytes_(numberToHexUnpadded(n));\r\n}\r\n\r\n/**\r\n * Takes hex string or Uint8Array, converts to Uint8Array.\r\n * Validates output length.\r\n * Will throw error for other types.\r\n * @param title descriptive title for an error e.g. 'secret key'\r\n * @param hex hex string or Uint8Array\r\n * @param expectedLength optional, will compare to result array's length\r\n * @returns\r\n */\r\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\r\n  let res: Uint8Array;\r\n  if (typeof hex === 'string') {\r\n    try {\r\n      res = hexToBytes_(hex);\r\n    } catch (e) {\r\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\r\n    }\r\n  } else if (isBytes_(hex)) {\r\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\r\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\r\n    res = Uint8Array.from(hex);\r\n  } else {\r\n    throw new Error(title + ' must be hex string or Uint8Array');\r\n  }\r\n  const len = res.length;\r\n  if (typeof expectedLength === 'number' && len !== expectedLength)\r\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\r\n  return res;\r\n}\r\n\r\n// Compares 2 u8a-s in kinda constant time\r\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\r\n  if (a.length !== b.length) return false;\r\n  let diff = 0;\r\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\r\n  return diff === 0;\r\n}\r\n/**\r\n * Copies Uint8Array. We can't use u8a.slice(), because u8a can be Buffer,\r\n * and Buffer#slice creates mutable copy. Never use Buffers!\r\n */\r\nexport function copyBytes(bytes: Uint8Array): Uint8Array {\r\n  return Uint8Array.from(bytes);\r\n}\r\n\r\n/**\r\n * Decodes 7-bit ASCII string to Uint8Array, throws on non-ascii symbols\r\n * Should be safe to use for things expected to be ASCII.\r\n * Returns exact same result as utf8ToBytes for ASCII or throws.\r\n */\r\nexport function asciiToBytes(ascii: string): Uint8Array {\r\n  return Uint8Array.from(ascii, (c, i) => {\r\n    const charCode = c.charCodeAt(0);\r\n    if (c.length !== 1 || charCode > 127) {\r\n      throw new Error(\r\n        `string contains non-ASCII character \"${ascii[i]}\" with code ${charCode} at position ${i}`\r\n      );\r\n    }\r\n    return charCode;\r\n  });\r\n}\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\r\n/**\r\n * Converts bytes to string using UTF8 encoding.\r\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\r\n */\r\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\r\n\r\n// Is positive bigint\r\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\r\n\r\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\r\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\r\n}\r\n\r\n/**\r\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\r\n * @example\r\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\r\n */\r\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\r\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\r\n  // consider P=256n, min=0n, max=P\r\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\r\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\r\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\r\n  if (!inRange(n, min, max))\r\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\r\n}\r\n\r\n// Bit operations\r\n\r\n/**\r\n * Calculates amount of bits in a bigint.\r\n * Same as `n.toString(2).length`\r\n * TODO: merge with nLength in modular\r\n */\r\nexport function bitLen(n: bigint): number {\r\n  let len;\r\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\r\n  return len;\r\n}\r\n\r\n/**\r\n * Gets single bit at position.\r\n * NOTE: first bit position is 0 (same as arrays)\r\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\r\n */\r\nexport function bitGet(n: bigint, pos: number): bigint {\r\n  return (n >> BigInt(pos)) & _1n;\r\n}\r\n\r\n/**\r\n * Sets single bit at position.\r\n */\r\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\r\n  return n | ((value ? _1n : _0n) << BigInt(pos));\r\n}\r\n\r\n/**\r\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\r\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\r\n */\r\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\r\n\r\n// DRBG\r\n\r\ntype Pred<T> = (v: Uint8Array) => T | undefined;\r\n/**\r\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n * @returns function that will call DRBG until 2nd arg returns something meaningful\r\n * @example\r\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\r\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\r\n */\r\nexport function createHmacDrbg<T>(\r\n  hashLen: number,\r\n  qByteLen: number,\r\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\r\n): (seed: Uint8Array, predicate: Pred<T>) => T {\r\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\r\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\r\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\r\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\r\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\r\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\r\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\r\n  let i = 0; // Iterations counter, will throw when over 1000\r\n  const reset = () => {\r\n    v.fill(1);\r\n    k.fill(0);\r\n    i = 0;\r\n  };\r\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\r\n  const reseed = (seed = u8n(0)) => {\r\n    // HMAC-DRBG reseed() function. Steps D-G\r\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n    if (seed.length === 0) return;\r\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n  };\r\n  const gen = () => {\r\n    // HMAC-DRBG generate() function\r\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\r\n    let len = 0;\r\n    const out: Uint8Array[] = [];\r\n    while (len < qByteLen) {\r\n      v = h();\r\n      const sl = v.slice();\r\n      out.push(sl);\r\n      len += v.length;\r\n    }\r\n    return concatBytes_(...out);\r\n  };\r\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\r\n    reset();\r\n    reseed(seed); // Steps D-G\r\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\r\n    while (!(res = pred(gen()))) reseed();\r\n    reset();\r\n    return res;\r\n  };\r\n  return genUntil;\r\n}\r\n\r\n// Validating curves and fields\r\n\r\nconst validatorFns = {\r\n  bigint: (val: any): boolean => typeof val === 'bigint',\r\n  function: (val: any): boolean => typeof val === 'function',\r\n  boolean: (val: any): boolean => typeof val === 'boolean',\r\n  string: (val: any): boolean => typeof val === 'string',\r\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\r\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\r\n  array: (val: any): boolean => Array.isArray(val),\r\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\r\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\r\n} as const;\r\ntype Validator = keyof typeof validatorFns;\r\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\r\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\r\n\r\nexport function validateObject<T extends Record<string, any>>(\r\n  object: T,\r\n  validators: ValMap<T>,\r\n  optValidators: ValMap<T> = {}\r\n): T {\r\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\r\n    const checkVal = validatorFns[type];\r\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\r\n\r\n    const val = object[fieldName as keyof typeof object];\r\n    if (isOptional && val === undefined) return;\r\n    if (!checkVal(val, object)) {\r\n      throw new Error(\r\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\r\n      );\r\n    }\r\n  };\r\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\r\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\r\n  return object;\r\n}\r\n// validate type tests\r\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\r\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\r\n// // Should fail type-check\r\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\r\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\r\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\r\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\r\n\r\nexport function isHash(val: CHash): boolean {\r\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\r\n}\r\nexport function _validateObject(\r\n  object: Record<string, any>,\r\n  fields: Record<string, string>,\r\n  optFields: Record<string, string> = {}\r\n): void {\r\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\r\n  type Item = keyof typeof object;\r\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\r\n    const val = object[fieldName];\r\n    if (isOpt && val === undefined) return;\r\n    const current = typeof val;\r\n    if (current !== expectedType || val === null)\r\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\r\n  }\r\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\r\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\r\n}\r\n\r\n/**\r\n * throws not implemented error\r\n */\r\nexport const notImplemented = (): never => {\r\n  throw new Error('not implemented');\r\n};\r\n\r\n/**\r\n * Memoizes (caches) computation result.\r\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\r\n */\r\nexport function memoized<T extends object, R, O extends any[]>(\r\n  fn: (arg: T, ...args: O) => R\r\n): (arg: T, ...args: O) => R {\r\n  const map = new WeakMap<T, R>();\r\n  return (arg: T, ...args: O): R => {\r\n    const val = map.get(arg);\r\n    if (val !== undefined) return val;\r\n    const computed = fn(arg, ...args);\r\n    map.set(arg, computed);\r\n    return computed;\r\n  };\r\n}\r\n", "/**\r\n * Utils for modular division and fields.\r\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\r\n * There is no division: it is replaced by modular multiplicative inverse.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport {\r\n  _validateObject,\r\n  anumber,\r\n  bitMask,\r\n  bytesToNumberBE,\r\n  bytesToNumberLE,\r\n  ensureBytes,\r\n  numberToBytesBE,\r\n  numberToBytesLE,\r\n} from '../utils.ts';\r\n\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\r\n// prettier-ignore\r\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _7n = /* @__PURE__ */ BigInt(7);\r\n// prettier-ignore\r\nconst _8n = /* @__PURE__ */ BigInt(8), _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\r\n\r\n// Calculates a modulo b\r\nexport function mod(a: bigint, b: bigint): bigint {\r\n  const result = a % b;\r\n  return result >= _0n ? result : b + result;\r\n}\r\n/**\r\n * Efficiently raise num to power and do modular division.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n * @example\r\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\r\n */\r\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\r\n  return FpPow(Field(modulo), num, power);\r\n}\r\n\r\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\r\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\r\n  let res = x;\r\n  while (power-- > _0n) {\r\n    res *= res;\r\n    res %= modulo;\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * Inverses number over modulo.\r\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\r\n */\r\nexport function invert(number: bigint, modulo: bigint): bigint {\r\n  if (number === _0n) throw new Error('invert: expected non-zero number');\r\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\r\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\r\n  let a = mod(number, modulo);\r\n  let b = modulo;\r\n  // prettier-ignore\r\n  let x = _0n, y = _1n, u = _1n, v = _0n;\r\n  while (a !== _0n) {\r\n    // JIT applies optimization if those two lines follow each other\r\n    const q = b / a;\r\n    const r = b % a;\r\n    const m = x - u * q;\r\n    const n = y - v * q;\r\n    // prettier-ignore\r\n    b = a, a = r, x = u, y = v, u = m, v = n;\r\n  }\r\n  const gcd = b;\r\n  if (gcd !== _1n) throw new Error('invert: does not exist');\r\n  return mod(x, modulo);\r\n}\r\n\r\nfunction assertIsSquare<T>(Fp: IField<T>, root: T, n: T): void {\r\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n}\r\n\r\n// Not all roots are possible! Example which will throw:\r\n// const NUM =\r\n// n = 72057594037927816n;\r\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\r\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\r\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\r\n  const root = Fp.pow(n, p1div4);\r\n  assertIsSquare(Fp, root, n);\r\n  return root;\r\n}\r\n\r\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\r\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\r\n  const n2 = Fp.mul(n, _2n);\r\n  const v = Fp.pow(n2, p5div8);\r\n  const nv = Fp.mul(n, v);\r\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\r\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\r\n  assertIsSquare(Fp, root, n);\r\n  return root;\r\n}\r\n\r\n// Based on RFC9380, Kong algorithm\r\n// prettier-ignore\r\nfunction sqrt9mod16(P: bigint): <T>(Fp: IField<T>, n: T) => T {\r\n  const Fp_ = Field(P);\r\n  const tn = tonelliShanks(P);\r\n  const c1 = tn(Fp_, Fp_.neg(Fp_.ONE));//  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\r\n  const c2 = tn(Fp_, c1);              //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\r\n  const c3 = tn(Fp_, Fp_.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\r\n  const c4 = (P + _7n) / _16n;         //  4. c4 = (q + 7) / 16        # Integer arithmetic\r\n  return <T>(Fp: IField<T>, n: T) => {\r\n    let tv1 = Fp.pow(n, c4);           //  1. tv1 = x^c4\r\n    let tv2 = Fp.mul(tv1, c1);         //  2. tv2 = c1 * tv1\r\n    const tv3 = Fp.mul(tv1, c2);       //  3. tv3 = c2 * tv1\r\n    const tv4 = Fp.mul(tv1, c3);       //  4. tv4 = c3 * tv1\r\n    const e1 = Fp.eql(Fp.sqr(tv2), n); //  5.  e1 = (tv2^2) == x\r\n    const e2 = Fp.eql(Fp.sqr(tv3), n); //  6.  e2 = (tv3^2) == x\r\n    tv1 = Fp.cmov(tv1, tv2, e1);       //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\r\n    tv2 = Fp.cmov(tv4, tv3, e2);       //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\r\n    const e3 = Fp.eql(Fp.sqr(tv2), n); //  9.  e3 = (tv2^2) == x\r\n    const root = Fp.cmov(tv1, tv2, e3);// 10.  z = CMOV(tv1, tv2, e3)   # Select sqrt from tv1 & tv2\r\n    assertIsSquare(Fp, root, n);\r\n    return root;\r\n  };\r\n}\r\n\r\n/**\r\n * Tonelli-Shanks square root search algorithm.\r\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\r\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\r\n * @param P field order\r\n * @returns function that takes field Fp (created from P) and number n\r\n */\r\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\r\n  // Initialization (precomputation).\r\n  // Caching initialization could boost perf by 7%.\r\n  if (P < _3n) throw new Error('sqrt is not defined for small field');\r\n  // Factor P - 1 = Q * 2^S, where Q is odd\r\n  let Q = P - _1n;\r\n  let S = 0;\r\n  while (Q % _2n === _0n) {\r\n    Q /= _2n;\r\n    S++;\r\n  }\r\n\r\n  // Find the first quadratic non-residue Z >= 2\r\n  let Z = _2n;\r\n  const _Fp = Field(P);\r\n  while (FpLegendre(_Fp, Z) === 1) {\r\n    // Basic primality test for P. After x iterations, chance of\r\n    // not finding quadratic non-residue is 2^x, so 2^1000.\r\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\r\n  }\r\n  // Fast-path; usually done before Z, but we do \"primality test\".\r\n  if (S === 1) return sqrt3mod4;\r\n\r\n  // Slow-path\r\n  // TODO: test on Fp2 and others\r\n  let cc = _Fp.pow(Z, Q); // c = z^Q\r\n  const Q1div2 = (Q + _1n) / _2n;\r\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\r\n    if (Fp.is0(n)) return n;\r\n    // Check if n is a quadratic residue using Legendre symbol\r\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\r\n\r\n    // Initialize variables for the main loop\r\n    let M = S;\r\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\r\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\r\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\r\n\r\n    // Main loop\r\n    // while t != 1\r\n    while (!Fp.eql(t, Fp.ONE)) {\r\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\r\n      let i = 1;\r\n\r\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\r\n      let t_tmp = Fp.sqr(t); // t^(2^1)\r\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\r\n        i++;\r\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\r\n        if (i === M) throw new Error('Cannot find square root');\r\n      }\r\n\r\n      // Calculate the exponent for b: 2^(M - i - 1)\r\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\r\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\r\n\r\n      // Update variables\r\n      M = i;\r\n      c = Fp.sqr(b); // c = b^2\r\n      t = Fp.mul(t, c); // t = (t * b^2)\r\n      R = Fp.mul(R, b); // R = R*b\r\n    }\r\n    return R;\r\n  };\r\n}\r\n\r\n/**\r\n * Square root for a finite field. Will try optimized versions first:\r\n *\r\n * 1. P ≡ 3 (mod 4)\r\n * 2. P ≡ 5 (mod 8)\r\n * 3. P ≡ 9 (mod 16)\r\n * 4. Tonelli-Shanks algorithm\r\n *\r\n * Different algorithms can give different roots, it is up to user to decide which one they want.\r\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\r\n */\r\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\r\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\r\n  if (P % _4n === _3n) return sqrt3mod4;\r\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\r\n  if (P % _8n === _5n) return sqrt5mod8;\r\n  // P ≡ 9 (mod 16) => Kong algorithm, page 11 of https://eprint.iacr.org/2012/685.pdf (algorithm 4)\r\n  if (P % _16n === _9n) return sqrt9mod16(P);\r\n  // Tonelli-Shanks algorithm\r\n  return tonelliShanks(P);\r\n}\r\n\r\n// Little-endian check for first LE bit (last BE bit);\r\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\r\n  (mod(num, modulo) & _1n) === _1n;\r\n\r\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\r\nexport interface IField<T> {\r\n  ORDER: bigint;\r\n  isLE: boolean;\r\n  BYTES: number;\r\n  BITS: number;\r\n  MASK: bigint;\r\n  ZERO: T;\r\n  ONE: T;\r\n  // 1-arg\r\n  create: (num: T) => T;\r\n  isValid: (num: T) => boolean;\r\n  is0: (num: T) => boolean;\r\n  isValidNot0: (num: T) => boolean;\r\n  neg(num: T): T;\r\n  inv(num: T): T;\r\n  sqrt(num: T): T;\r\n  sqr(num: T): T;\r\n  // 2-args\r\n  eql(lhs: T, rhs: T): boolean;\r\n  add(lhs: T, rhs: T): T;\r\n  sub(lhs: T, rhs: T): T;\r\n  mul(lhs: T, rhs: T | bigint): T;\r\n  pow(lhs: T, power: bigint): T;\r\n  div(lhs: T, rhs: T | bigint): T;\r\n  // N for NonNormalized (for now)\r\n  addN(lhs: T, rhs: T): T;\r\n  subN(lhs: T, rhs: T): T;\r\n  mulN(lhs: T, rhs: T | bigint): T;\r\n  sqrN(num: T): T;\r\n\r\n  // Optional\r\n  // Should be same as sgn0 function in\r\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\r\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\r\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\r\n  allowedLengths?: number[];\r\n  // legendre?(num: T): T;\r\n  invertBatch: (lst: T[]) => T[];\r\n  toBytes(num: T): Uint8Array;\r\n  fromBytes(bytes: Uint8Array, skipValidation?: boolean): T;\r\n  // If c is False, CMOV returns a, otherwise it returns b.\r\n  cmov(a: T, b: T, c: boolean): T;\r\n}\r\n// prettier-ignore\r\nconst FIELD_FIELDS = [\r\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\r\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\r\n  'addN', 'subN', 'mulN', 'sqrN'\r\n] as const;\r\nexport function validateField<T>(field: IField<T>): IField<T> {\r\n  const initial = {\r\n    ORDER: 'bigint',\r\n    MASK: 'bigint',\r\n    BYTES: 'number',\r\n    BITS: 'number',\r\n  } as Record<string, string>;\r\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\r\n    map[val] = 'function';\r\n    return map;\r\n  }, initial);\r\n  _validateObject(field, opts);\r\n  // const max = 16384;\r\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\r\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\r\n  return field;\r\n}\r\n\r\n// Generic field functions\r\n\r\n/**\r\n * Same as `pow` but for Fp: non-constant-time.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n */\r\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\r\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\r\n  if (power === _0n) return Fp.ONE;\r\n  if (power === _1n) return num;\r\n  let p = Fp.ONE;\r\n  let d = num;\r\n  while (power > _0n) {\r\n    if (power & _1n) p = Fp.mul(p, d);\r\n    d = Fp.sqr(d);\r\n    power >>= _1n;\r\n  }\r\n  return p;\r\n}\r\n\r\n/**\r\n * Efficiently invert an array of Field elements.\r\n * Exception-free. Will return `undefined` for 0 elements.\r\n * @param passZero map 0 to 0 (instead of undefined)\r\n */\r\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\r\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\r\n  // Walk from first to last, multiply them by each other MOD p\r\n  const multipliedAcc = nums.reduce((acc, num, i) => {\r\n    if (Fp.is0(num)) return acc;\r\n    inverted[i] = acc;\r\n    return Fp.mul(acc, num);\r\n  }, Fp.ONE);\r\n  // Invert last element\r\n  const invertedAcc = Fp.inv(multipliedAcc);\r\n  // Walk from last to first, multiply them by inverted each other MOD p\r\n  nums.reduceRight((acc, num, i) => {\r\n    if (Fp.is0(num)) return acc;\r\n    inverted[i] = Fp.mul(acc, inverted[i]);\r\n    return Fp.mul(acc, num);\r\n  }, invertedAcc);\r\n  return inverted;\r\n}\r\n\r\n// TODO: remove\r\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\r\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\r\n}\r\n\r\n/**\r\n * Legendre symbol.\r\n * Legendre constant is used to calculate Legendre symbol (a | p)\r\n * which denotes the value of a^((p-1)/2) (mod p).\r\n *\r\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\r\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\r\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\r\n */\r\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\r\n  // We can use 3rd argument as optional cache of this value\r\n  // but seems unneeded for now. The operation is very fast.\r\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\r\n  const powered = Fp.pow(n, p1mod2);\r\n  const yes = Fp.eql(powered, Fp.ONE);\r\n  const zero = Fp.eql(powered, Fp.ZERO);\r\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\r\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\r\n  return yes ? 1 : zero ? 0 : -1;\r\n}\r\n\r\n// This function returns True whenever the value x is a square in the field F.\r\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\r\n  const l = FpLegendre(Fp, n);\r\n  return l === 1;\r\n}\r\n\r\nexport type NLength = { nByteLength: number; nBitLength: number };\r\n// CURVE.n lengths\r\nexport function nLength(n: bigint, nBitLength?: number): NLength {\r\n  // Bit size, byte size of CURVE.n\r\n  if (nBitLength !== undefined) anumber(nBitLength);\r\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\r\n  const nByteLength = Math.ceil(_nBitLength / 8);\r\n  return { nBitLength: _nBitLength, nByteLength };\r\n}\r\n\r\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\r\ntype SqrtFn = (n: bigint) => bigint;\r\ntype FieldOpts = Partial<{\r\n  sqrt: SqrtFn;\r\n  isLE: boolean;\r\n  BITS: number;\r\n  modFromBytes: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\r\n  allowedLengths?: readonly number[]; // for P521 (adds padding for smaller sizes)\r\n}>;\r\n/**\r\n * Creates a finite field. Major performance optimizations:\r\n * * 1. Denormalized operations like mulN instead of mul.\r\n * * 2. Identical object shape: never add or remove keys.\r\n * * 3. `Object.freeze`.\r\n * Fragile: always run a benchmark on a change.\r\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\r\n * it is caller responsibility to check this.\r\n * This is low-level code, please make sure you know what you're doing.\r\n *\r\n * Note about field properties:\r\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\r\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\r\n *\r\n * @param ORDER field order, probably prime, or could be composite\r\n * @param bitLen how many bits the field consumes\r\n * @param isLE (default: false) if encoding / decoding should be in little-endian\r\n * @param redef optional faster redefinitions of sqrt and other methods\r\n */\r\nexport function Field(\r\n  ORDER: bigint,\r\n  bitLenOrOpts?: number | FieldOpts, // TODO: use opts only in v2?\r\n  isLE = false,\r\n  opts: { sqrt?: SqrtFn } = {}\r\n): Readonly<FpField> {\r\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\r\n  let _nbitLength: number | undefined = undefined;\r\n  let _sqrt: SqrtFn | undefined = undefined;\r\n  let modFromBytes: boolean = false;\r\n  let allowedLengths: undefined | readonly number[] = undefined;\r\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\r\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\r\n    const _opts = bitLenOrOpts;\r\n    if (_opts.BITS) _nbitLength = _opts.BITS;\r\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\r\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\r\n    if (typeof _opts.modFromBytes === 'boolean') modFromBytes = _opts.modFromBytes;\r\n    allowedLengths = _opts.allowedLengths;\r\n  } else {\r\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\r\n    if (opts.sqrt) _sqrt = opts.sqrt;\r\n  }\r\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\r\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\r\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\r\n  const f: Readonly<FpField> = Object.freeze({\r\n    ORDER,\r\n    isLE,\r\n    BITS,\r\n    BYTES,\r\n    MASK: bitMask(BITS),\r\n    ZERO: _0n,\r\n    ONE: _1n,\r\n    allowedLengths: allowedLengths,\r\n    create: (num) => mod(num, ORDER),\r\n    isValid: (num) => {\r\n      if (typeof num !== 'bigint')\r\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\r\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\r\n    },\r\n    is0: (num) => num === _0n,\r\n    // is valid and invertible\r\n    isValidNot0: (num: bigint) => !f.is0(num) && f.isValid(num),\r\n    isOdd: (num) => (num & _1n) === _1n,\r\n    neg: (num) => mod(-num, ORDER),\r\n    eql: (lhs, rhs) => lhs === rhs,\r\n\r\n    sqr: (num) => mod(num * num, ORDER),\r\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\r\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\r\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\r\n    pow: (num, power) => FpPow(f, num, power),\r\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\r\n\r\n    // Same as above, but doesn't normalize\r\n    sqrN: (num) => num * num,\r\n    addN: (lhs, rhs) => lhs + rhs,\r\n    subN: (lhs, rhs) => lhs - rhs,\r\n    mulN: (lhs, rhs) => lhs * rhs,\r\n\r\n    inv: (num) => invert(num, ORDER),\r\n    sqrt:\r\n      _sqrt ||\r\n      ((n) => {\r\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\r\n        return sqrtP(f, n);\r\n      }),\r\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\r\n    fromBytes: (bytes, skipValidation = true) => {\r\n      if (allowedLengths) {\r\n        if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\r\n          throw new Error(\r\n            'Field.fromBytes: expected ' + allowedLengths + ' bytes, got ' + bytes.length\r\n          );\r\n        }\r\n        const padded = new Uint8Array(BYTES);\r\n        // isLE add 0 to right, !isLE to the left.\r\n        padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\r\n        bytes = padded;\r\n      }\r\n      if (bytes.length !== BYTES)\r\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\r\n      let scalar = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\r\n      if (modFromBytes) scalar = mod(scalar, ORDER);\r\n      if (!skipValidation)\r\n        if (!f.isValid(scalar)) throw new Error('invalid field element: outside of range 0..ORDER');\r\n      // NOTE: we don't validate scalar here, please use isValid. This done such way because some\r\n      // protocol may allow non-reduced scalar that reduced later or changed some other way.\r\n      return scalar;\r\n    },\r\n    // TODO: we don't need it here, move out to separate fn\r\n    invertBatch: (lst) => FpInvertBatch(f, lst),\r\n    // We can't move this out because Fp6, Fp12 implement it\r\n    // and it's unclear what to return in there.\r\n    cmov: (a, b, c) => (c ? b : a),\r\n  } as FpField);\r\n  return Object.freeze(f);\r\n}\r\n\r\n// Generic random scalar, we can do same for other fields if via Fp2.mul(Fp2.ONE, Fp2.random)?\r\n// This allows unsafe methods like ignore bias or zero. These unsafe, but often used in different protocols (if deterministic RNG).\r\n// which mean we cannot force this via opts.\r\n// Not sure what to do with randomBytes, we can accept it inside opts if wanted.\r\n// Probably need to export getMinHashLength somewhere?\r\n// random(bytes?: Uint8Array, unsafeAllowZero = false, unsafeAllowBias = false) {\r\n//   const LEN = !unsafeAllowBias ? getMinHashLength(ORDER) : BYTES;\r\n//   if (bytes === undefined) bytes = randomBytes(LEN); // _opts.randomBytes?\r\n//   const num = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\r\n//   // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\r\n//   const reduced = unsafeAllowZero ? mod(num, ORDER) : mod(num, ORDER - _1n) + _1n;\r\n//   return reduced;\r\n// },\r\n\r\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\r\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? root : Fp.neg(root);\r\n}\r\n\r\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\r\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\r\n}\r\n\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\r\n * Which makes it slightly more biased, less secure.\r\n * @deprecated use `mapKeyToField` instead\r\n */\r\nexport function hashToPrivateScalar(\r\n  hash: string | Uint8Array,\r\n  groupOrder: bigint,\r\n  isLE = false\r\n): bigint {\r\n  hash = ensureBytes('privateHash', hash);\r\n  const hashLen = hash.length;\r\n  const minLen = nLength(groupOrder).nByteLength + 8;\r\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\r\n    throw new Error(\r\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\r\n    );\r\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\r\n  return mod(num, groupOrder - _1n) + _1n;\r\n}\r\n\r\n/**\r\n * Returns total number of bytes consumed by the field element.\r\n * For example, 32 bytes for usual 256-bit weierstrass curve.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of field\r\n */\r\nexport function getFieldBytesLength(fieldOrder: bigint): number {\r\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\r\n  const bitLength = fieldOrder.toString(2).length;\r\n  return Math.ceil(bitLength / 8);\r\n}\r\n\r\n/**\r\n * Returns minimal amount of bytes that can be safely reduced\r\n * by field order.\r\n * Should be 2^-128 for 128-bit curve such as P256.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of target hash\r\n */\r\nexport function getMinHashLength(fieldOrder: bigint): number {\r\n  const length = getFieldBytesLength(fieldOrder);\r\n  return length + Math.ceil(length / 2);\r\n}\r\n\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\r\n * and convert them into private scalar, with the modulo bias being negligible.\r\n * Needs at least 48 bytes of input for 32-byte private key.\r\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\r\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\r\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\r\n * @param hash hash output from SHA3 or a similar function\r\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\r\n * @param isLE interpret hash bytes as LE num\r\n * @returns valid private scalar\r\n */\r\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\r\n  const len = key.length;\r\n  const fieldLen = getFieldBytesLength(fieldOrder);\r\n  const minLen = getMinHashLength(fieldOrder);\r\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\r\n  if (len < 16 || len < minLen || len > 1024)\r\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\r\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\r\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\r\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\r\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\r\n}\r\n", "/**\r\n * hash-to-curve from RFC 9380.\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\r\n * https://www.rfc-editor.org/rfc/rfc9380\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport type { CHash } from '../utils.ts';\r\nimport {\r\n  _validateObject,\r\n  abytes,\r\n  bytesToNumberBE,\r\n  concatBytes,\r\n  isBytes,\r\n  isHash,\r\n  utf8ToBytes,\r\n} from '../utils.ts';\r\nimport type { AffinePoint, Group, GroupConstructor } from './curve.ts';\r\nimport { FpInvertBatch, mod, type IField } from './modular.ts';\r\n\r\nexport type UnicodeOrBytes = string | Uint8Array;\r\n\r\n/**\r\n * * `DST` is a domain separation tag, defined in section 2.2.5\r\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\r\n * * `m` is extension degree (1 for prime fields)\r\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\r\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\r\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\r\n */\r\nexport type H2COpts = {\r\n  DST: UnicodeOrBytes;\r\n  expand: 'xmd' | 'xof';\r\n  hash: CHash;\r\n  p: bigint;\r\n  m: number;\r\n  k: number;\r\n};\r\nexport type H2CHashOpts = {\r\n  expand: 'xmd' | 'xof';\r\n  hash: CHash;\r\n};\r\n// todo: remove\r\nexport type Opts = H2COpts;\r\n\r\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\r\nconst os2ip = bytesToNumberBE;\r\n\r\n// Integer to Octet Stream (numberToBytesBE)\r\nfunction i2osp(value: number, length: number): Uint8Array {\r\n  anum(value);\r\n  anum(length);\r\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\r\n  const res = Array.from({ length }).fill(0) as number[];\r\n  for (let i = length - 1; i >= 0; i--) {\r\n    res[i] = value & 0xff;\r\n    value >>>= 8;\r\n  }\r\n  return new Uint8Array(res);\r\n}\r\n\r\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\r\n  const arr = new Uint8Array(a.length);\r\n  for (let i = 0; i < a.length; i++) {\r\n    arr[i] = a[i] ^ b[i];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction anum(item: unknown): void {\r\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\r\n}\r\n\r\nfunction normDST(DST: UnicodeOrBytes): Uint8Array {\r\n  if (!isBytes(DST) && typeof DST !== 'string') throw new Error('DST must be Uint8Array or string');\r\n  return typeof DST === 'string' ? utf8ToBytes(DST) : DST;\r\n}\r\n\r\n/**\r\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\r\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\r\n */\r\nexport function expand_message_xmd(\r\n  msg: Uint8Array,\r\n  DST: UnicodeOrBytes,\r\n  lenInBytes: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  abytes(msg);\r\n  anum(lenInBytes);\r\n  DST = normDST(DST);\r\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\r\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\r\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\r\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\r\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\r\n  const Z_pad = i2osp(0, r_in_bytes);\r\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\r\n  const b = new Array<Uint8Array>(ell);\r\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\r\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\r\n  for (let i = 1; i <= ell; i++) {\r\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\r\n    b[i] = H(concatBytes(...args));\r\n  }\r\n  const pseudo_random_bytes = concatBytes(...b);\r\n  return pseudo_random_bytes.slice(0, lenInBytes);\r\n}\r\n\r\n/**\r\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\r\n * 1. The collision resistance of H MUST be at least k bits.\r\n * 2. H MUST be an XOF that has been proved indifferentiable from\r\n *    a random oracle under a reasonable cryptographic assumption.\r\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\r\n */\r\nexport function expand_message_xof(\r\n  msg: Uint8Array,\r\n  DST: UnicodeOrBytes,\r\n  lenInBytes: number,\r\n  k: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  abytes(msg);\r\n  anum(lenInBytes);\r\n  DST = normDST(DST);\r\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\r\n  if (DST.length > 255) {\r\n    const dkLen = Math.ceil((2 * k) / 8);\r\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\r\n  }\r\n  if (lenInBytes > 65535 || DST.length > 255)\r\n    throw new Error('expand_message_xof: invalid lenInBytes');\r\n  return (\r\n    H.create({ dkLen: lenInBytes })\r\n      .update(msg)\r\n      .update(i2osp(lenInBytes, 2))\r\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\r\n      .update(DST)\r\n      .update(i2osp(DST.length, 1))\r\n      .digest()\r\n  );\r\n}\r\n\r\n/**\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\r\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\r\n * @param msg a byte string containing the message to hash\r\n * @param count the number of elements of F to output\r\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\r\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\r\n */\r\nexport function hash_to_field(msg: Uint8Array, count: number, options: H2COpts): bigint[][] {\r\n  _validateObject(options, {\r\n    p: 'bigint',\r\n    m: 'number',\r\n    k: 'number',\r\n    hash: 'function',\r\n  });\r\n  const { p, k, m, hash, expand, DST } = options;\r\n  if (!isHash(options.hash)) throw new Error('expected valid hash');\r\n  abytes(msg);\r\n  anum(count);\r\n  const log2p = p.toString(2).length;\r\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\r\n  const len_in_bytes = count * m * L;\r\n  let prb; // pseudo_random_bytes\r\n  if (expand === 'xmd') {\r\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\r\n  } else if (expand === 'xof') {\r\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\r\n  } else if (expand === '_internal_pass') {\r\n    // for internal tests only\r\n    prb = msg;\r\n  } else {\r\n    throw new Error('expand must be \"xmd\" or \"xof\"');\r\n  }\r\n  const u = new Array(count);\r\n  for (let i = 0; i < count; i++) {\r\n    const e = new Array(m);\r\n    for (let j = 0; j < m; j++) {\r\n      const elm_offset = L * (j + i * m);\r\n      const tv = prb.subarray(elm_offset, elm_offset + L);\r\n      e[j] = mod(os2ip(tv), p);\r\n    }\r\n    u[i] = e;\r\n  }\r\n  return u;\r\n}\r\n\r\nexport type XY<T> = (x: T, y: T) => { x: T; y: T };\r\nexport type XYRatio<T> = [T[], T[], T[], T[]]; // xn/xd, yn/yd\r\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: XYRatio<T>): XY<T> {\r\n  // Make same order as in spec\r\n  const coeff = map.map((i) => Array.from(i).reverse());\r\n  return (x: T, y: T) => {\r\n    const [xn, xd, yn, yd] = coeff.map((val) =>\r\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\r\n    );\r\n    // 6.6.3\r\n    // Exceptional cases of iso_map are inputs that cause the denominator of\r\n    // either rational function to evaluate to zero; such cases MUST return\r\n    // the identity point on E.\r\n    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);\r\n    x = field.mul(xn, xd_inv); // xNum / xDen\r\n    y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\r\n    return { x, y };\r\n  };\r\n}\r\n\r\n/** Point interface, which curves must implement to work correctly with the module. */\r\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\r\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\r\n  toAffine(iz?: bigint): AffinePoint<T>;\r\n  clearCofactor(): H2CPoint<T>;\r\n  assertValidity(): void;\r\n}\r\n\r\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\r\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\r\n}\r\n\r\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\r\n\r\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\r\n// (changing DST is ok!)\r\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\r\nexport type H2CMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\r\n// TODO: remove\r\nexport type HTFMethod<T> = H2CMethod<T>;\r\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\r\nexport type H2CHasherBase<T> = {\r\n  hashToCurve: H2CMethod<T>;\r\n  hashToScalar: (msg: Uint8Array, options: htfBasicOpts) => bigint;\r\n};\r\n/**\r\n * RFC 9380 methods, with cofactor clearing. See https://www.rfc-editor.org/rfc/rfc9380#section-3.\r\n *\r\n * * hashToCurve: `map(hash(input))`, encodes RANDOM bytes to curve (WITH hashing)\r\n * * encodeToCurve: `map(hash(input))`, encodes NON-UNIFORM bytes to curve (WITH hashing)\r\n * * mapToCurve: `map(scalars)`, encodes NON-UNIFORM scalars to curve (NO hashing)\r\n */\r\nexport type H2CHasher<T> = H2CHasherBase<T> & {\r\n  encodeToCurve: H2CMethod<T>;\r\n  mapToCurve: MapMethod<T>;\r\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes };\r\n};\r\n// TODO: remove\r\nexport type Hasher<T> = H2CHasher<T>;\r\n\r\nexport const _DST_scalar: Uint8Array = utf8ToBytes('HashToScalar-');\r\n\r\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. See {@link H2CHasher}. */\r\nexport function createHasher<T>(\r\n  Point: H2CPointConstructor<T>,\r\n  mapToCurve: MapToCurve<T>,\r\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes }\r\n): H2CHasher<T> {\r\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\r\n  function map(num: bigint[]) {\r\n    return Point.fromAffine(mapToCurve(num));\r\n  }\r\n  function clear(initial: H2CPoint<T>) {\r\n    const P = initial.clearCofactor();\r\n    if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\r\n    P.assertValidity();\r\n    return P;\r\n  }\r\n\r\n  return {\r\n    defaults,\r\n\r\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\r\n      const opts = Object.assign({}, defaults, options);\r\n      const u = hash_to_field(msg, 2, opts);\r\n      const u0 = map(u[0]);\r\n      const u1 = map(u[1]);\r\n      return clear(u0.add(u1));\r\n    },\r\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\r\n      const optsDst = defaults.encodeDST ? { DST: defaults.encodeDST } : {};\r\n      const opts = Object.assign({}, defaults, optsDst, options);\r\n      const u = hash_to_field(msg, 1, opts);\r\n      const u0 = map(u[0]);\r\n      return clear(u0);\r\n    },\r\n    /** See {@link H2CHasher} */\r\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\r\n      if (!Array.isArray(scalars)) throw new Error('expected array of bigints');\r\n      for (const i of scalars)\r\n        if (typeof i !== 'bigint') throw new Error('expected array of bigints');\r\n      return clear(map(scalars));\r\n    },\r\n\r\n    // hash_to_scalar can produce 0: https://www.rfc-editor.org/errata/eid8393\r\n    // RFC 9380, draft-irtf-cfrg-bbs-signatures-08\r\n    hashToScalar(msg: Uint8Array, options?: htfBasicOpts): bigint {\r\n      // @ts-ignore\r\n      const N = Point.Fn.ORDER;\r\n      const opts = Object.assign({}, defaults, { p: N, m: 1, DST: _DST_scalar }, options);\r\n      return hash_to_field(msg, 1, opts)[0][0];\r\n    },\r\n  };\r\n}\r\n", "/**\r\n * Methods for elliptic curve multiplication by scalars.\r\n * Contains wNAF, pippenger.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { bitLen, bitMask, validateObject } from '../utils.ts';\r\nimport { Field, FpInvertBatch, nLength, validateField, type IField } from './modular.ts';\r\n\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\n\r\nexport type AffinePoint<T> = {\r\n  x: T;\r\n  y: T;\r\n} & { Z?: never };\r\n\r\n// This was initialy do this way to re-use montgomery ladder in field (add->mul,double->sqr), but\r\n// that didn't happen and there is probably not much reason to have separate Group like this?\r\nexport interface Group<T extends Group<T>> {\r\n  double(): T;\r\n  negate(): T;\r\n  add(other: T): T;\r\n  subtract(other: T): T;\r\n  equals(other: T): boolean;\r\n  multiply(scalar: bigint): T;\r\n  toAffine?(invertedZ?: any): AffinePoint<any>;\r\n}\r\n\r\n// We can't \"abstract out\" coordinates (X, Y, Z; and T in Edwards): argument names of constructor\r\n// are not accessible. See Typescript gh-56093, gh-41594.\r\n//\r\n// We have to use recursive types, so it will return actual point, not constained `CurvePoint`.\r\n// If, at any point, P is `any`, it will erase all types and replace it\r\n// with `any`, because of recursion, `any implements CurvePoint`,\r\n// but we lose all constrains on methods.\r\n\r\n/** Base interface for all elliptic curve Points. */\r\nexport interface CurvePoint<F, P extends CurvePoint<F, P>> extends Group<P> {\r\n  /** Affine x coordinate. Different from projective / extended X coordinate. */\r\n  x: F;\r\n  /** Affine y coordinate. Different from projective / extended Y coordinate. */\r\n  y: F;\r\n  Z?: F;\r\n  double(): P;\r\n  negate(): P;\r\n  add(other: P): P;\r\n  subtract(other: P): P;\r\n  equals(other: P): boolean;\r\n  multiply(scalar: bigint): P;\r\n  assertValidity(): void;\r\n  clearCofactor(): P;\r\n  is0(): boolean;\r\n  isTorsionFree(): boolean;\r\n  isSmallOrder(): boolean;\r\n  multiplyUnsafe(scalar: bigint): P;\r\n  /**\r\n   * Massively speeds up `p.multiply(n)` by using precompute tables (caching). See {@link wNAF}.\r\n   * @param isLazy calculate cache now. Default (true) ensures it's deferred to first `multiply()`\r\n   */\r\n  precompute(windowSize?: number, isLazy?: boolean): P;\r\n  /** Converts point to 2D xy affine coordinates */\r\n  toAffine(invertedZ?: F): AffinePoint<F>;\r\n  toBytes(): Uint8Array;\r\n  toHex(): string;\r\n}\r\n\r\n/** Base interface for all elliptic curve Point constructors. */\r\nexport interface CurvePointCons<P extends CurvePoint<any, P>> {\r\n  [Symbol.hasInstance]: (item: unknown) => boolean;\r\n  BASE: P;\r\n  ZERO: P;\r\n  /** Field for basic curve math */\r\n  Fp: IField<P_F<P>>;\r\n  /** Scalar field, for scalars in multiply and others */\r\n  Fn: IField<bigint>;\r\n  /** Creates point from x, y. Does NOT validate if the point is valid. Use `.assertValidity()`. */\r\n  fromAffine(p: AffinePoint<P_F<P>>): P;\r\n  fromBytes(bytes: Uint8Array): P;\r\n  fromHex(hex: Uint8Array | string): P;\r\n}\r\n\r\n// Type inference helpers: PC - PointConstructor, P - Point, Fp - Field element\r\n// Short names, because we use them a lot in result types:\r\n// * we can't do 'P = GetCurvePoint<PC>': this is default value and doesn't constrain anything\r\n// * we can't do 'type X = GetCurvePoint<PC>': it won't be accesible for arguments/return types\r\n// * `CurvePointCons<P extends CurvePoint<any, P>>` constraints from interface definition\r\n//   won't propagate, if `PC extends CurvePointCons<any>`: the P would be 'any', which is incorrect\r\n// * PC could be super specific with super specific P, which implements CurvePoint<any, P>.\r\n//   this means we need to do stuff like\r\n//   `function test<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(`\r\n//   if we want type safety around P, otherwise PC_P<PC> will be any\r\n\r\n/** Returns Fp type from Point (P_F<P> == P.F) */\r\nexport type P_F<P extends CurvePoint<any, P>> = P extends CurvePoint<infer F, P> ? F : never;\r\n/** Returns Fp type from PointCons (PC_F<PC> == PC.P.F) */\r\nexport type PC_F<PC extends CurvePointCons<CurvePoint<any, any>>> = PC['Fp']['ZERO'];\r\n/** Returns Point type from PointCons (PC_P<PC> == PC.P) */\r\nexport type PC_P<PC extends CurvePointCons<CurvePoint<any, any>>> = PC['ZERO'];\r\n\r\n// Ugly hack to get proper type inference, because in typescript fails to infer resursively.\r\n// The hack allows to do up to 10 chained operations without applying type erasure.\r\n//\r\n// Types which won't work:\r\n// * `CurvePointCons<CurvePoint<any, any>>`, will return `any` after 1 operation\r\n// * `CurvePointCons<any>: WeierstrassPointCons<bigint> extends CurvePointCons<any> = false`\r\n// * `P extends CurvePoint, PC extends CurvePointCons<P>`\r\n//     * It can't infer P from PC alone\r\n//     * Too many relations between F, P & PC\r\n//     * It will infer P/F if `arg: CurvePointCons<F, P>`, but will fail if PC is generic\r\n//     * It will work correctly if there is an additional argument of type P\r\n//     * But generally, we don't want to parametrize `CurvePointCons` over `F`: it will complicate\r\n//       types, making them un-inferable\r\n// prettier-ignore\r\nexport type PC_ANY = CurvePointCons<\r\n  CurvePoint<any,\r\n  CurvePoint<any,\r\n  CurvePoint<any,\r\n  CurvePoint<any,\r\n  CurvePoint<any,\r\n  CurvePoint<any,\r\n  CurvePoint<any,\r\n  CurvePoint<any,\r\n  CurvePoint<any,\r\n  CurvePoint<any, any>\r\n  >>>>>>>>>\r\n>;\r\n\r\nexport interface CurveLengths {\r\n  secretKey?: number;\r\n  publicKey?: number;\r\n  publicKeyUncompressed?: number;\r\n  publicKeyHasPrefix?: boolean;\r\n  signature?: number;\r\n  seed?: number;\r\n}\r\nexport type GroupConstructor<T> = {\r\n  BASE: T;\r\n  ZERO: T;\r\n};\r\n/** @deprecated */\r\nexport type ExtendedGroupConstructor<T> = GroupConstructor<T> & {\r\n  Fp: IField<any>;\r\n  Fn: IField<bigint>;\r\n  fromAffine(ap: AffinePoint<any>): T;\r\n};\r\nexport type Mapper<T> = (i: T[]) => T[];\r\n\r\nexport function negateCt<T extends { negate: () => T }>(condition: boolean, item: T): T {\r\n  const neg = item.negate();\r\n  return condition ? neg : item;\r\n}\r\n\r\n/**\r\n * Takes a bunch of Projective Points but executes only one\r\n * inversion on all of them. Inversion is very slow operation,\r\n * so this improves performance massively.\r\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\r\n */\r\nexport function normalizeZ<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\r\n  c: PC,\r\n  points: P[]\r\n): P[] {\r\n  const invertedZs = FpInvertBatch(\r\n    c.Fp,\r\n    points.map((p) => p.Z!)\r\n  );\r\n  return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\r\n}\r\n\r\nfunction validateW(W: number, bits: number) {\r\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\r\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\r\n}\r\n\r\n/** Internal wNAF opts for specific W and scalarBits */\r\nexport type WOpts = {\r\n  windows: number;\r\n  windowSize: number;\r\n  mask: bigint;\r\n  maxNumber: number;\r\n  shiftBy: bigint;\r\n};\r\n\r\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\r\n  validateW(W, scalarBits);\r\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\r\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\r\n  const maxNumber = 2 ** W; // W=8 256\r\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\r\n  const shiftBy = BigInt(W); // W=8 8\r\n  return { windows, windowSize, mask, maxNumber, shiftBy };\r\n}\r\n\r\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\r\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\r\n  let wbits = Number(n & mask); // extract W bits.\r\n  let nextN = n >> shiftBy; // shift number by W bits.\r\n\r\n  // What actually happens here:\r\n  // const highestBit = Number(mask ^ (mask >> 1n));\r\n  // let wbits2 = wbits - 1; // skip zero\r\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\r\n\r\n  // split if bits > max: +224 => 256-32\r\n  if (wbits > windowSize) {\r\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\r\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\r\n    nextN += _1n; // +256 (carry)\r\n  }\r\n  const offsetStart = window * windowSize;\r\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\r\n  const isZero = wbits === 0; // is current window slice a 0?\r\n  const isNeg = wbits < 0; // is current window slice negative?\r\n  const isNegF = window % 2 !== 0; // fake random statement for noise\r\n  const offsetF = offsetStart; // fake offset for noise\r\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\r\n}\r\n\r\nfunction validateMSMPoints(points: any[], c: any) {\r\n  if (!Array.isArray(points)) throw new Error('array expected');\r\n  points.forEach((p, i) => {\r\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\r\n  });\r\n}\r\nfunction validateMSMScalars(scalars: any[], field: any) {\r\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\r\n  scalars.forEach((s, i) => {\r\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\r\n  });\r\n}\r\n\r\n// Since points in different groups cannot be equal (different object constructor),\r\n// we can have single place to store precomputes.\r\n// Allows to make points frozen / immutable.\r\nconst pointPrecomputes = new WeakMap<any, any[]>();\r\nconst pointWindowSizes = new WeakMap<any, number>();\r\n\r\nfunction getW(P: any): number {\r\n  // To disable precomputes:\r\n  // return 1;\r\n  return pointWindowSizes.get(P) || 1;\r\n}\r\n\r\nfunction assert0(n: bigint): void {\r\n  if (n !== _0n) throw new Error('invalid wNAF');\r\n}\r\n\r\n/**\r\n * Elliptic curve multiplication of Point by scalar. Fragile.\r\n * Table generation takes **30MB of ram and 10ms on high-end CPU**,\r\n * but may take much longer on slow devices. Actual generation will happen on\r\n * first call of `multiply()`. By default, `BASE` point is precomputed.\r\n *\r\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\r\n * Creates precomputation tables for fast multiplication:\r\n * - private scalar is split by fixed size windows of W bits\r\n * - every window point is collected from window's table & added to accumulator\r\n * - since windows are different, same point inside tables won't be accessed more than once per calc\r\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\r\n * - +1 window is neccessary for wNAF\r\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\r\n *\r\n * @todo Research returning 2d JS array of windows, instead of a single window.\r\n * This would allow windows to be in different memory locations\r\n */\r\nexport class wNAF<PC extends PC_ANY> {\r\n  private readonly BASE: PC_P<PC>;\r\n  private readonly ZERO: PC_P<PC>;\r\n  private readonly Fn: PC['Fn'];\r\n  readonly bits: number;\r\n\r\n  // Parametrized with a given Point class (not individual point)\r\n  constructor(Point: PC, bits: number) {\r\n    this.BASE = Point.BASE;\r\n    this.ZERO = Point.ZERO;\r\n    this.Fn = Point.Fn;\r\n    this.bits = bits;\r\n  }\r\n\r\n  // non-const time multiplication ladder\r\n  _unsafeLadder(elm: PC_P<PC>, n: bigint, p: PC_P<PC> = this.ZERO): PC_P<PC> {\r\n    let d: PC_P<PC> = elm;\r\n    while (n > _0n) {\r\n      if (n & _1n) p = p.add(d);\r\n      d = d.double();\r\n      n >>= _1n;\r\n    }\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Creates a wNAF precomputation window. Used for caching.\r\n   * Default window size is set by `utils.precompute()` and is equal to 8.\r\n   * Number of precomputed points depends on the curve size:\r\n   * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\r\n   * - 𝑊 is the window size\r\n   * - 𝑛 is the bitlength of the curve order.\r\n   * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\r\n   * @param point Point instance\r\n   * @param W window size\r\n   * @returns precomputed point tables flattened to a single array\r\n   */\r\n  private precomputeWindow(point: PC_P<PC>, W: number): PC_P<PC>[] {\r\n    const { windows, windowSize } = calcWOpts(W, this.bits);\r\n    const points: PC_P<PC>[] = [];\r\n    let p: PC_P<PC> = point;\r\n    let base = p;\r\n    for (let window = 0; window < windows; window++) {\r\n      base = p;\r\n      points.push(base);\r\n      // i=1, bc we skip 0\r\n      for (let i = 1; i < windowSize; i++) {\r\n        base = base.add(p);\r\n        points.push(base);\r\n      }\r\n      p = base.double();\r\n    }\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\r\n   * More compact implementation:\r\n   * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\r\n   * @returns real and fake (for const-time) points\r\n   */\r\n  private wNAF(W: number, precomputes: PC_P<PC>[], n: bigint): { p: PC_P<PC>; f: PC_P<PC> } {\r\n    // Scalar should be smaller than field order\r\n    if (!this.Fn.isValid(n)) throw new Error('invalid scalar');\r\n    // Accumulators\r\n    let p = this.ZERO;\r\n    let f = this.BASE;\r\n    // This code was first written with assumption that 'f' and 'p' will never be infinity point:\r\n    // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\r\n    // there is negate now: it is possible that negated element from low value\r\n    // would be the same as high element, which will create carry into next window.\r\n    // It's not obvious how this can fail, but still worth investigating later.\r\n    const wo = calcWOpts(W, this.bits);\r\n    for (let window = 0; window < wo.windows; window++) {\r\n      // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\r\n      const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\r\n      n = nextN;\r\n      if (isZero) {\r\n        // bits are 0: add garbage to fake point\r\n        // Important part for const-time getPublicKey: add random \"noise\" point to f.\r\n        f = f.add(negateCt(isNegF, precomputes[offsetF]));\r\n      } else {\r\n        // bits are 1: add to result point\r\n        p = p.add(negateCt(isNeg, precomputes[offset]));\r\n      }\r\n    }\r\n    assert0(n);\r\n    // Return both real and fake points: JIT won't eliminate f.\r\n    // At this point there is a way to F be infinity-point even if p is not,\r\n    // which makes it less const-time: around 1 bigint multiply.\r\n    return { p, f };\r\n  }\r\n\r\n  /**\r\n   * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\r\n   * @param acc accumulator point to add result of multiplication\r\n   * @returns point\r\n   */\r\n  private wNAFUnsafe(\r\n    W: number,\r\n    precomputes: PC_P<PC>[],\r\n    n: bigint,\r\n    acc: PC_P<PC> = this.ZERO\r\n  ): PC_P<PC> {\r\n    const wo = calcWOpts(W, this.bits);\r\n    for (let window = 0; window < wo.windows; window++) {\r\n      if (n === _0n) break; // Early-exit, skip 0 value\r\n      const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\r\n      n = nextN;\r\n      if (isZero) {\r\n        // Window bits are 0: skip processing.\r\n        // Move to next window.\r\n        continue;\r\n      } else {\r\n        const item = precomputes[offset];\r\n        acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\r\n      }\r\n    }\r\n    assert0(n);\r\n    return acc;\r\n  }\r\n\r\n  private getPrecomputes(W: number, point: PC_P<PC>, transform?: Mapper<PC_P<PC>>): PC_P<PC>[] {\r\n    // Calculate precomputes on a first run, reuse them after\r\n    let comp = pointPrecomputes.get(point);\r\n    if (!comp) {\r\n      comp = this.precomputeWindow(point, W) as PC_P<PC>[];\r\n      if (W !== 1) {\r\n        // Doing transform outside of if brings 15% perf hit\r\n        if (typeof transform === 'function') comp = transform(comp);\r\n        pointPrecomputes.set(point, comp);\r\n      }\r\n    }\r\n    return comp;\r\n  }\r\n\r\n  cached(\r\n    point: PC_P<PC>,\r\n    scalar: bigint,\r\n    transform?: Mapper<PC_P<PC>>\r\n  ): { p: PC_P<PC>; f: PC_P<PC> } {\r\n    const W = getW(point);\r\n    return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\r\n  }\r\n\r\n  unsafe(point: PC_P<PC>, scalar: bigint, transform?: Mapper<PC_P<PC>>, prev?: PC_P<PC>): PC_P<PC> {\r\n    const W = getW(point);\r\n    if (W === 1) return this._unsafeLadder(point, scalar, prev); // For W=1 ladder is ~x2 faster\r\n    return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\r\n  }\r\n\r\n  // We calculate precomputes for elliptic curve point multiplication\r\n  // using windowed method. This specifies window size and\r\n  // stores precomputed values. Usually only base point would be precomputed.\r\n  createCache(P: PC_P<PC>, W: number): void {\r\n    validateW(W, this.bits);\r\n    pointWindowSizes.set(P, W);\r\n    pointPrecomputes.delete(P);\r\n  }\r\n\r\n  hasCache(elm: PC_P<PC>): boolean {\r\n    return getW(elm) !== 1;\r\n  }\r\n}\r\n\r\n/**\r\n * Endomorphism-specific multiplication for Koblitz curves.\r\n * Cost: 128 dbl, 0-256 adds.\r\n */\r\nexport function mulEndoUnsafe<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\r\n  Point: PC,\r\n  point: P,\r\n  k1: bigint,\r\n  k2: bigint\r\n): { p1: P; p2: P } {\r\n  let acc = point;\r\n  let p1 = Point.ZERO;\r\n  let p2 = Point.ZERO;\r\n  while (k1 > _0n || k2 > _0n) {\r\n    if (k1 & _1n) p1 = p1.add(acc);\r\n    if (k2 & _1n) p2 = p2.add(acc);\r\n    acc = acc.double();\r\n    k1 >>= _1n;\r\n    k2 >>= _1n;\r\n  }\r\n  return { p1, p2 };\r\n}\r\n\r\n/**\r\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\r\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\r\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\r\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\r\n * @param c Curve Point constructor\r\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\r\n * @param points array of L curve points\r\n * @param scalars array of L scalars (aka secret keys / bigints)\r\n */\r\nexport function pippenger<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\r\n  c: PC,\r\n  fieldN: IField<bigint>,\r\n  points: P[],\r\n  scalars: bigint[]\r\n): P {\r\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\r\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\r\n  // TODO:\r\n  // - https://eprint.iacr.org/2024/750.pdf\r\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\r\n  // 0 is accepted in scalars\r\n  validateMSMPoints(points, c);\r\n  validateMSMScalars(scalars, fieldN);\r\n  const plength = points.length;\r\n  const slength = scalars.length;\r\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\r\n  // if (plength === 0) throw new Error('array must be of length >= 2');\r\n  const zero = c.ZERO;\r\n  const wbits = bitLen(BigInt(plength));\r\n  let windowSize = 1; // bits\r\n  if (wbits > 12) windowSize = wbits - 3;\r\n  else if (wbits > 4) windowSize = wbits - 2;\r\n  else if (wbits > 0) windowSize = 2;\r\n  const MASK = bitMask(windowSize);\r\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\r\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\r\n  let sum = zero;\r\n  for (let i = lastBits; i >= 0; i -= windowSize) {\r\n    buckets.fill(zero);\r\n    for (let j = 0; j < slength; j++) {\r\n      const scalar = scalars[j];\r\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\r\n      buckets[wbits] = buckets[wbits].add(points[j]);\r\n    }\r\n    let resI = zero; // not using this will do small speed-up, but will lose ct\r\n    // Skip first bucket, because it is zero\r\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\r\n      sumI = sumI.add(buckets[j]);\r\n      resI = resI.add(sumI);\r\n    }\r\n    sum = sum.add(resI);\r\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\r\n  }\r\n  return sum as P;\r\n}\r\n/**\r\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\r\n * @param c Curve Point constructor\r\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\r\n * @param points array of L curve points\r\n * @returns function which multiplies points with scaars\r\n */\r\nexport function precomputeMSMUnsafe<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\r\n  c: PC,\r\n  fieldN: IField<bigint>,\r\n  points: P[],\r\n  windowSize: number\r\n): (scalars: bigint[]) => P {\r\n  /**\r\n   * Performance Analysis of Window-based Precomputation\r\n   *\r\n   * Base Case (256-bit scalar, 8-bit window):\r\n   * - Standard precomputation requires:\r\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\r\n   *   - Plus 255 summary additions = 8,191 total ops\r\n   *   Note: Summary additions can be optimized via accumulator\r\n   *\r\n   * Chunked Precomputation Analysis:\r\n   * - Using 32 chunks requires:\r\n   *   - 255 additions per chunk\r\n   *   - 256 doublings\r\n   *   - Total: (255 × 32) + 256 = 8,416 ops\r\n   *\r\n   * Memory Usage Comparison:\r\n   * Window Size | Standard Points | Chunked Points\r\n   * ------------|-----------------|---------------\r\n   *     4-bit   |     520         |      15\r\n   *     8-bit   |    4,224        |     255\r\n   *    10-bit   |   13,824        |   1,023\r\n   *    16-bit   |  557,056        |  65,535\r\n   *\r\n   * Key Advantages:\r\n   * 1. Enables larger window sizes due to reduced memory overhead\r\n   * 2. More efficient for smaller scalar counts:\r\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\r\n   *    - ~2x faster than standard 8,191 ops\r\n   *\r\n   * Limitations:\r\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\r\n   * - Performance degrades with larger scalar counts:\r\n   *   - Optimal for ~256 scalars\r\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\r\n   */\r\n  validateW(windowSize, fieldN.BITS);\r\n  validateMSMPoints(points, c);\r\n  const zero = c.ZERO;\r\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\r\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\r\n  const MASK = bitMask(windowSize);\r\n  const tables = points.map((p: P) => {\r\n    const res = [];\r\n    for (let i = 0, acc = p; i < tableSize; i++) {\r\n      res.push(acc);\r\n      acc = acc.add(p);\r\n    }\r\n    return res;\r\n  });\r\n  return (scalars: bigint[]): P => {\r\n    validateMSMScalars(scalars, fieldN);\r\n    if (scalars.length > points.length)\r\n      throw new Error('array of scalars must be smaller than array of points');\r\n    let res = zero;\r\n    for (let i = 0; i < chunks; i++) {\r\n      // No need to double if accumulator is still zero.\r\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\r\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\r\n      for (let j = 0; j < scalars.length; j++) {\r\n        const n = scalars[j];\r\n        const curr = Number((n >> shiftBy) & MASK);\r\n        if (!curr) continue; // skip zero scalars chunks\r\n        res = res.add(tables[j][curr - 1]);\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n}\r\n\r\n// TODO: remove\r\n/**\r\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\r\n * Though generator can be different (Fp2 / Fp6 for BLS).\r\n */\r\nexport type BasicCurve<T> = {\r\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\r\n  n: bigint; // Curve order, total count of valid points in the field\r\n  nBitLength?: number; // bit length of curve order\r\n  nByteLength?: number; // byte length of curve order\r\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\r\n  hEff?: bigint; // Number to multiply to clear cofactor\r\n  Gx: T; // base point X coordinate\r\n  Gy: T; // base point Y coordinate\r\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\r\n};\r\n\r\n// TODO: remove\r\n/** @deprecated */\r\nexport function validateBasic<FP, T>(\r\n  curve: BasicCurve<FP> & T\r\n): Readonly<\r\n  {\r\n    readonly nBitLength: number;\r\n    readonly nByteLength: number;\r\n  } & BasicCurve<FP> &\r\n    T & {\r\n      p: bigint;\r\n    }\r\n> {\r\n  validateField(curve.Fp);\r\n  validateObject(\r\n    curve,\r\n    {\r\n      n: 'bigint',\r\n      h: 'bigint',\r\n      Gx: 'field',\r\n      Gy: 'field',\r\n    },\r\n    {\r\n      nBitLength: 'isSafeInteger',\r\n      nByteLength: 'isSafeInteger',\r\n    }\r\n  );\r\n  // Set defaults\r\n  return Object.freeze({\r\n    ...nLength(curve.n, curve.nBitLength),\r\n    ...curve,\r\n    ...{ p: curve.Fp.ORDER },\r\n  } as const);\r\n}\r\n\r\nexport type ValidCurveParams<T> = {\r\n  p: bigint;\r\n  n: bigint;\r\n  h: bigint;\r\n  a: T;\r\n  b?: T;\r\n  d?: T;\r\n  Gx: T;\r\n  Gy: T;\r\n};\r\n\r\nfunction createField<T>(order: bigint, field?: IField<T>, isLE?: boolean): IField<T> {\r\n  if (field) {\r\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\r\n    validateField(field);\r\n    return field;\r\n  } else {\r\n    return Field(order, { isLE }) as unknown as IField<T>;\r\n  }\r\n}\r\nexport type FpFn<T> = { Fp: IField<T>; Fn: IField<bigint> };\r\n\r\n/** Validates CURVE opts and creates fields */\r\nexport function _createCurveFields<T>(\r\n  type: 'weierstrass' | 'edwards',\r\n  CURVE: ValidCurveParams<T>,\r\n  curveOpts: Partial<FpFn<T>> = {},\r\n  FpFnLE?: boolean\r\n): FpFn<T> & { CURVE: ValidCurveParams<T> } {\r\n  if (FpFnLE === undefined) FpFnLE = type === 'edwards';\r\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\r\n  for (const p of ['p', 'n', 'h'] as const) {\r\n    const val = CURVE[p];\r\n    if (!(typeof val === 'bigint' && val > _0n))\r\n      throw new Error(`CURVE.${p} must be positive bigint`);\r\n  }\r\n  const Fp = createField(CURVE.p, curveOpts.Fp, FpFnLE);\r\n  const Fn = createField(CURVE.n, curveOpts.Fn, FpFnLE);\r\n  const _b: 'b' | 'd' = type === 'weierstrass' ? 'b' : 'd';\r\n  const params = ['Gx', 'Gy', 'a', _b] as const;\r\n  for (const p of params) {\r\n    // @ts-ignore\r\n    if (!Fp.isValid(CURVE[p]))\r\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\r\n  }\r\n  CURVE = Object.freeze(Object.assign({}, CURVE));\r\n  return { CURVE, Fp, Fn };\r\n}\r\n", "/**\r\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\r\n *\r\n * ### Design rationale for types\r\n *\r\n * * Interaction between classes from different curves should fail:\r\n *   `k256.Point.BASE.add(p256.Point.BASE)`\r\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\r\n * * Different calls of `curve()` would return different classes -\r\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\r\n *   it won't affect others\r\n *\r\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\r\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\r\n * unique type for every function call.\r\n *\r\n * We can use generic types via some param, like curve opts, but that would:\r\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\r\n *     which is hard to debug.\r\n *     2. Params can be generic and we can't enforce them to be constant value:\r\n *     if somebody creates curve from non-constant params,\r\n *     it would be allowed to interact with other curves with non-constant params\r\n *\r\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { hmac as nobleHmac } from '@noble/hashes/hmac.js';\r\nimport { ahash } from '@noble/hashes/utils';\r\nimport {\r\n  _validateObject,\r\n  _abool2 as abool,\r\n  _abytes2 as abytes,\r\n  aInRange,\r\n  bitLen,\r\n  bitMask,\r\n  bytesToHex,\r\n  bytesToNumberBE,\r\n  concatBytes,\r\n  createHmacDrbg,\r\n  ensureBytes,\r\n  hexToBytes,\r\n  inRange,\r\n  isBytes,\r\n  memoized,\r\n  numberToHexUnpadded,\r\n  randomBytes as randomBytesWeb,\r\n  type CHash,\r\n  type Hex,\r\n  type PrivKey,\r\n} from '../utils.ts';\r\nimport {\r\n  _createCurveFields,\r\n  mulEndoUnsafe,\r\n  negateCt,\r\n  normalizeZ,\r\n  pippenger,\r\n  wNAF,\r\n  type AffinePoint,\r\n  type BasicCurve,\r\n  type CurveLengths,\r\n  type CurvePoint,\r\n  type CurvePointCons,\r\n} from './curve.ts';\r\nimport {\r\n  Field,\r\n  FpInvertBatch,\r\n  getMinHashLength,\r\n  mapHashToField,\r\n  nLength,\r\n  validateField,\r\n  type IField,\r\n  type NLength,\r\n} from './modular.ts';\r\n\r\nexport type { AffinePoint };\r\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\r\n\r\ntype EndoBasis = [[bigint, bigint], [bigint, bigint]];\r\n/**\r\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\r\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\r\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\r\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\r\n *\r\n * Endomorphism consists of beta, lambda and splitScalar:\r\n *\r\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\r\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\r\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\r\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\r\n *    one 256-bit multiplication.\r\n *\r\n * where\r\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\r\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\r\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\r\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\r\n *\r\n * Check out `test/misc/endomorphism.js` and\r\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\r\n */\r\nexport type EndomorphismOpts = {\r\n  beta: bigint;\r\n  basises?: EndoBasis;\r\n  splitScalar?: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\r\n};\r\n\r\n// We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\r\nconst divNearest = (num: bigint, den: bigint) => (num + (num >= 0 ? den : -den) / _2n) / den;\r\n\r\nexport type ScalarEndoParts = { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\r\n\r\n/**\r\n * Splits scalar for GLV endomorphism.\r\n */\r\nexport function _splitEndoScalar(k: bigint, basis: EndoBasis, n: bigint): ScalarEndoParts {\r\n  // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\r\n  // Since part can be negative, we need to do this on point.\r\n  // TODO: verifyScalar function which consumes lambda\r\n  const [[a1, b1], [a2, b2]] = basis;\r\n  const c1 = divNearest(b2 * k, n);\r\n  const c2 = divNearest(-b1 * k, n);\r\n  // |k1|/|k2| is < sqrt(N), but can be negative.\r\n  // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\r\n  let k1 = k - c1 * a1 - c2 * a2;\r\n  let k2 = -c1 * b1 - c2 * b2;\r\n  const k1neg = k1 < _0n;\r\n  const k2neg = k2 < _0n;\r\n  if (k1neg) k1 = -k1;\r\n  if (k2neg) k2 = -k2;\r\n  // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\r\n  // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\r\n  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n; // Half bits of N\r\n  if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\r\n    throw new Error('splitScalar (endomorphism): failed, k=' + k);\r\n  }\r\n  return { k1neg, k1, k2neg, k2 };\r\n}\r\n\r\nexport type ECDSASigFormat = 'compact' | 'recovered' | 'der';\r\nexport type ECDSARecoverOpts = {\r\n  prehash?: boolean;\r\n};\r\nexport type ECDSAVerifyOpts = {\r\n  prehash?: boolean;\r\n  lowS?: boolean;\r\n  format?: ECDSASigFormat;\r\n};\r\nexport type ECDSASignOpts = {\r\n  prehash?: boolean;\r\n  lowS?: boolean;\r\n  format?: ECDSASigFormat;\r\n  extraEntropy?: Uint8Array | boolean;\r\n};\r\n\r\nfunction validateSigFormat(format: string): ECDSASigFormat {\r\n  if (!['compact', 'recovered', 'der'].includes(format))\r\n    throw new Error('Signature format must be \"compact\", \"recovered\", or \"der\"');\r\n  return format as ECDSASigFormat;\r\n}\r\n\r\nfunction validateSigOpts<T extends ECDSASignOpts, D extends Required<ECDSASignOpts>>(\r\n  opts: T,\r\n  def: D\r\n): Required<ECDSASignOpts> {\r\n  const optsn: ECDSASignOpts = {};\r\n  for (let optName of Object.keys(def)) {\r\n    // @ts-ignore\r\n    optsn[optName] = opts[optName] === undefined ? def[optName] : opts[optName];\r\n  }\r\n  abool(optsn.lowS!, 'lowS');\r\n  abool(optsn.prehash!, 'prehash');\r\n  if (optsn.format !== undefined) validateSigFormat(optsn.format);\r\n  return optsn as Required<ECDSASignOpts>;\r\n}\r\n\r\n/** Instance methods for 3D XYZ projective points. */\r\nexport interface WeierstrassPoint<T> extends CurvePoint<T, WeierstrassPoint<T>> {\r\n  /** projective X coordinate. Different from affine x. */\r\n  readonly X: T;\r\n  /** projective Y coordinate. Different from affine y. */\r\n  readonly Y: T;\r\n  /** projective z coordinate */\r\n  readonly Z: T;\r\n  /** affine x coordinate. Different from projective X. */\r\n  get x(): T;\r\n  /** affine y coordinate. Different from projective Y. */\r\n  get y(): T;\r\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\r\n  toBytes(isCompressed?: boolean): Uint8Array;\r\n  toHex(isCompressed?: boolean): string;\r\n\r\n  /** @deprecated use `.X` */\r\n  readonly px: T;\r\n  /** @deprecated use `.Y` */\r\n  readonly py: T;\r\n  /** @deprecated use `.Z` */\r\n  readonly pz: T;\r\n  /** @deprecated use `toBytes` */\r\n  toRawBytes(isCompressed?: boolean): Uint8Array;\r\n  /** @deprecated use `multiplyUnsafe` */\r\n  multiplyAndAddUnsafe(\r\n    Q: WeierstrassPoint<T>,\r\n    a: bigint,\r\n    b: bigint\r\n  ): WeierstrassPoint<T> | undefined;\r\n  /** @deprecated use `p.y % 2n === 0n` */\r\n  hasEvenY(): boolean;\r\n  /** @deprecated use `p.precompute(windowSize)` */\r\n  _setWindowSize(windowSize: number): void;\r\n}\r\n\r\n/** Static methods for 3D XYZ projective points. */\r\nexport interface WeierstrassPointCons<T> extends CurvePointCons<WeierstrassPoint<T>> {\r\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\r\n  new (X: T, Y: T, Z: T): WeierstrassPoint<T>;\r\n  CURVE(): WeierstrassOpts<T>;\r\n  /** @deprecated use `Point.BASE.multiply(Point.Fn.fromBytes(privateKey))` */\r\n  fromPrivateKey(privateKey: PrivKey): WeierstrassPoint<T>;\r\n  /** @deprecated use `import { normalizeZ } from '@noble/curves/abstract/curve.js';` */\r\n  normalizeZ(points: WeierstrassPoint<T>[]): WeierstrassPoint<T>[];\r\n  /** @deprecated use `import { pippenger } from '@noble/curves/abstract/curve.js';` */\r\n  msm(points: WeierstrassPoint<T>[], scalars: bigint[]): WeierstrassPoint<T>;\r\n}\r\n\r\n/**\r\n * Weierstrass curve options.\r\n *\r\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\r\n * * n: order of prime subgroup a.k.a total amount of valid curve points\r\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\r\n * * a: formula param, must be in field of p\r\n * * b: formula param, must be in field of p\r\n * * Gx: x coordinate of generator point a.k.a. base point\r\n * * Gy: y coordinate of generator point\r\n */\r\nexport type WeierstrassOpts<T> = Readonly<{\r\n  p: bigint;\r\n  n: bigint;\r\n  h: bigint;\r\n  a: T;\r\n  b: T;\r\n  Gx: T;\r\n  Gy: T;\r\n}>;\r\n\r\n// When a cofactor != 1, there can be an effective methods to:\r\n// 1. Determine whether a point is torsion-free\r\n// 2. Clear torsion component\r\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\r\nexport type WeierstrassExtraOpts<T> = Partial<{\r\n  Fp: IField<T>;\r\n  Fn: IField<bigint>;\r\n  allowInfinityPoint: boolean;\r\n  endo: EndomorphismOpts;\r\n  isTorsionFree: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\r\n  clearCofactor: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\r\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\r\n  toBytes: (\r\n    c: WeierstrassPointCons<T>,\r\n    point: WeierstrassPoint<T>,\r\n    isCompressed: boolean\r\n  ) => Uint8Array;\r\n}>;\r\n\r\n/**\r\n * Options for ECDSA signatures over a Weierstrass curve.\r\n *\r\n * * lowS: (default: true) whether produced / verified signatures occupy low half of ecdsaOpts.p. Prevents malleability.\r\n * * hmac: (default: noble-hashes hmac) function, would be used to init hmac-drbg for k generation.\r\n * * randomBytes: (default: webcrypto os-level CSPRNG) custom method for fetching secure randomness.\r\n * * bits2int, bits2int_modN: used in sigs, sometimes overridden by curves\r\n */\r\nexport type ECDSAOpts = Partial<{\r\n  lowS: boolean;\r\n  hmac: HmacFnSync;\r\n  randomBytes: (bytesLength?: number) => Uint8Array;\r\n  bits2int: (bytes: Uint8Array) => bigint;\r\n  bits2int_modN: (bytes: Uint8Array) => bigint;\r\n}>;\r\n\r\n/**\r\n * Elliptic Curve Diffie-Hellman interface.\r\n * Provides keygen, secret-to-public conversion, calculating shared secrets.\r\n */\r\nexport interface ECDH {\r\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\r\n  getPublicKey: (secretKey: PrivKey, isCompressed?: boolean) => Uint8Array;\r\n  getSharedSecret: (secretKeyA: PrivKey, publicKeyB: Hex, isCompressed?: boolean) => Uint8Array;\r\n  Point: WeierstrassPointCons<bigint>;\r\n  utils: {\r\n    isValidSecretKey: (secretKey: PrivKey) => boolean;\r\n    isValidPublicKey: (publicKey: Uint8Array, isCompressed?: boolean) => boolean;\r\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\r\n    /** @deprecated use `randomSecretKey` */\r\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\r\n    /** @deprecated use `isValidSecretKey` */\r\n    isValidPrivateKey: (secretKey: PrivKey) => boolean;\r\n    /** @deprecated use `Point.Fn.fromBytes()` */\r\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n    /** @deprecated use `point.precompute()` */\r\n    precompute: (windowSize?: number, point?: WeierstrassPoint<bigint>) => WeierstrassPoint<bigint>;\r\n  };\r\n  lengths: CurveLengths;\r\n}\r\n\r\n/**\r\n * ECDSA interface.\r\n * Only supported for prime fields, not Fp2 (extension fields).\r\n */\r\nexport interface ECDSA extends ECDH {\r\n  sign: (message: Hex, secretKey: PrivKey, opts?: ECDSASignOpts) => ECDSASigRecovered;\r\n  verify: (\r\n    signature: Uint8Array,\r\n    message: Uint8Array,\r\n    publicKey: Uint8Array,\r\n    opts?: ECDSAVerifyOpts\r\n  ) => boolean;\r\n  recoverPublicKey(signature: Uint8Array, message: Uint8Array, opts?: ECDSARecoverOpts): Uint8Array;\r\n  Signature: ECDSASignatureCons;\r\n}\r\nexport class DERErr extends Error {\r\n  constructor(m = '') {\r\n    super(m);\r\n  }\r\n}\r\nexport type IDER = {\r\n  // asn.1 DER encoding utils\r\n  Err: typeof DERErr;\r\n  // Basic building block is TLV (Tag-Length-Value)\r\n  _tlv: {\r\n    encode: (tag: number, data: string) => string;\r\n    // v - value, l - left bytes (unparsed)\r\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\r\n  };\r\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n  // since we always use positive integers here. It must always be empty:\r\n  // - add zero byte if exists\r\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n  _int: {\r\n    encode(num: bigint): string;\r\n    decode(data: Uint8Array): bigint;\r\n  };\r\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\r\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\r\n};\r\n/**\r\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\r\n *\r\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\r\n *\r\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\r\n */\r\nexport const DER: IDER = {\r\n  // asn.1 DER encoding utils\r\n  Err: DERErr,\r\n  // Basic building block is TLV (Tag-Length-Value)\r\n  _tlv: {\r\n    encode: (tag: number, data: string): string => {\r\n      const { Err: E } = DER;\r\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\r\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\r\n      const dataLen = data.length / 2;\r\n      const len = numberToHexUnpadded(dataLen);\r\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\r\n      // length of length with long form flag\r\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\r\n      const t = numberToHexUnpadded(tag);\r\n      return t + lenLen + len + data;\r\n    },\r\n    // v - value, l - left bytes (unparsed)\r\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\r\n      const { Err: E } = DER;\r\n      let pos = 0;\r\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\r\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\r\n      const first = data[pos++];\r\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\r\n      let length = 0;\r\n      if (!isLong) length = first;\r\n      else {\r\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\r\n        const lenLen = first & 0b0111_1111;\r\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\r\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\r\n        const lengthBytes = data.subarray(pos, pos + lenLen);\r\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\r\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\r\n        for (const b of lengthBytes) length = (length << 8) | b;\r\n        pos += lenLen;\r\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\r\n      }\r\n      const v = data.subarray(pos, pos + length);\r\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\r\n      return { v, l: data.subarray(pos + length) };\r\n    },\r\n  },\r\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n  // since we always use positive integers here. It must always be empty:\r\n  // - add zero byte if exists\r\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n  _int: {\r\n    encode(num: bigint): string {\r\n      const { Err: E } = DER;\r\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\r\n      let hex = numberToHexUnpadded(num);\r\n      // Pad with zero byte if negative flag is present\r\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\r\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\r\n      return hex;\r\n    },\r\n    decode(data: Uint8Array): bigint {\r\n      const { Err: E } = DER;\r\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\r\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\r\n        throw new E('invalid signature integer: unnecessary leading zero');\r\n      return bytesToNumberBE(data);\r\n    },\r\n  },\r\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\r\n    // parse DER signature\r\n    const { Err: E, _int: int, _tlv: tlv } = DER;\r\n    const data = ensureBytes('signature', hex);\r\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\r\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\r\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\r\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\r\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\r\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\r\n  },\r\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\r\n    const { _tlv: tlv, _int: int } = DER;\r\n    const rs = tlv.encode(0x02, int.encode(sig.r));\r\n    const ss = tlv.encode(0x02, int.encode(sig.s));\r\n    const seq = rs + ss;\r\n    return tlv.encode(0x30, seq);\r\n  },\r\n};\r\n\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\r\n\r\nexport function _normFnElement(Fn: IField<bigint>, key: PrivKey): bigint {\r\n  const { BYTES: expected } = Fn;\r\n  let num: bigint;\r\n  if (typeof key === 'bigint') {\r\n    num = key;\r\n  } else {\r\n    let bytes = ensureBytes('private key', key);\r\n    try {\r\n      num = Fn.fromBytes(bytes);\r\n    } catch (error) {\r\n      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\r\n    }\r\n  }\r\n  if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\r\n  return num;\r\n}\r\n\r\n/**\r\n * Creates weierstrass Point constructor, based on specified curve options.\r\n *\r\n * @example\r\n```js\r\nconst opts = {\r\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\r\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\r\n  h: BigInt(1),\r\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\r\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\r\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\r\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\r\n};\r\nconst p256_Point = weierstrass(opts);\r\n```\r\n */\r\nexport function weierstrassN<T>(\r\n  params: WeierstrassOpts<T>,\r\n  extraOpts: WeierstrassExtraOpts<T> = {}\r\n): WeierstrassPointCons<T> {\r\n  const validated = _createCurveFields('weierstrass', params, extraOpts);\r\n  const { Fp, Fn } = validated;\r\n  let CURVE = validated.CURVE as WeierstrassOpts<T>;\r\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\r\n  _validateObject(\r\n    extraOpts,\r\n    {},\r\n    {\r\n      allowInfinityPoint: 'boolean',\r\n      clearCofactor: 'function',\r\n      isTorsionFree: 'function',\r\n      fromBytes: 'function',\r\n      toBytes: 'function',\r\n      endo: 'object',\r\n      wrapPrivateKey: 'boolean',\r\n    }\r\n  );\r\n\r\n  const { endo } = extraOpts;\r\n  if (endo) {\r\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\r\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\r\n      throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\r\n    }\r\n  }\r\n\r\n  const lengths = getWLengths(Fp, Fn);\r\n\r\n  function assertCompressionIsSupported() {\r\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\r\n  }\r\n\r\n  // Implements IEEE P1363 point encoding\r\n  function pointToBytes(\r\n    _c: WeierstrassPointCons<T>,\r\n    point: WeierstrassPoint<T>,\r\n    isCompressed: boolean\r\n  ): Uint8Array {\r\n    const { x, y } = point.toAffine();\r\n    const bx = Fp.toBytes(x);\r\n    abool(isCompressed, 'isCompressed');\r\n    if (isCompressed) {\r\n      assertCompressionIsSupported();\r\n      const hasEvenY = !Fp.isOdd!(y);\r\n      return concatBytes(pprefix(hasEvenY), bx);\r\n    } else {\r\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\r\n    }\r\n  }\r\n  function pointFromBytes(bytes: Uint8Array) {\r\n    abytes(bytes, undefined, 'Point');\r\n    const { publicKey: comp, publicKeyUncompressed: uncomp } = lengths; // e.g. for 32-byte: 33, 65\r\n    const length = bytes.length;\r\n    const head = bytes[0];\r\n    const tail = bytes.subarray(1);\r\n    // No actual validation is done here: use .assertValidity()\r\n    if (length === comp && (head === 0x02 || head === 0x03)) {\r\n      const x = Fp.fromBytes(tail);\r\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\r\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\r\n      let y: T;\r\n      try {\r\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\r\n      } catch (sqrtError) {\r\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\r\n        throw new Error('bad point: is not on curve, sqrt error' + err);\r\n      }\r\n      assertCompressionIsSupported();\r\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\r\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\r\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\r\n      return { x, y };\r\n    } else if (length === uncomp && head === 0x04) {\r\n      // TODO: more checks\r\n      const L = Fp.BYTES;\r\n      const x = Fp.fromBytes(tail.subarray(0, L));\r\n      const y = Fp.fromBytes(tail.subarray(L, L * 2));\r\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\r\n      return { x, y };\r\n    } else {\r\n      throw new Error(\r\n        `bad point: got length ${length}, expected compressed=${comp} or uncompressed=${uncomp}`\r\n      );\r\n    }\r\n  }\r\n\r\n  const encodePoint = extraOpts.toBytes || pointToBytes;\r\n  const decodePoint = extraOpts.fromBytes || pointFromBytes;\r\n  function weierstrassEquation(x: T): T {\r\n    const x2 = Fp.sqr(x); // x * x\r\n    const x3 = Fp.mul(x2, x); // x² * x\r\n    return Fp.add(Fp.add(x3, Fp.mul(x, CURVE.a)), CURVE.b); // x³ + a * x + b\r\n  }\r\n\r\n  // TODO: move top-level\r\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\r\n  function isValidXY(x: T, y: T): boolean {\r\n    const left = Fp.sqr(y); // y²\r\n    const right = weierstrassEquation(x); // x³ + ax + b\r\n    return Fp.eql(left, right);\r\n  }\r\n\r\n  // Validate whether the passed curve params are valid.\r\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\r\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\r\n\r\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\r\n  // Guarantees curve is genus-1, smooth (non-singular).\r\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\r\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\r\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\r\n\r\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\r\n  function acoord(title: string, n: T, banZero = false) {\r\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\r\n    return n;\r\n  }\r\n\r\n  function aprjpoint(other: unknown) {\r\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\r\n  }\r\n\r\n  function splitEndoScalarN(k: bigint) {\r\n    if (!endo || !endo.basises) throw new Error('no endo');\r\n    return _splitEndoScalar(k, endo.basises, Fn.ORDER);\r\n  }\r\n\r\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\r\n\r\n  // Converts Projective point to affine (x, y) coordinates.\r\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\r\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\r\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\r\n    const { X, Y, Z } = p;\r\n    // Fast-path for normalized points\r\n    if (Fp.eql(Z, Fp.ONE)) return { x: X, y: Y };\r\n    const is0 = p.is0();\r\n    // If invZ was 0, we return zero point. However we still want to execute\r\n    // all operations, so we replace invZ with a random number, 1.\r\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\r\n    const x = Fp.mul(X, iz);\r\n    const y = Fp.mul(Y, iz);\r\n    const zz = Fp.mul(Z, iz);\r\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\r\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\r\n    return { x, y };\r\n  });\r\n  // NOTE: on exception this will crash 'cached' and no value will be set.\r\n  // Otherwise true will be return\r\n  const assertValidMemo = memoized((p: Point) => {\r\n    if (p.is0()) {\r\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\r\n      // In BLS, ZERO can be serialized, so we allow it.\r\n      // (0, 0, 0) is invalid representation of ZERO.\r\n      if (extraOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\r\n      throw new Error('bad point: ZERO');\r\n    }\r\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\r\n    const { x, y } = p.toAffine();\r\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\r\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\r\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\r\n    return true;\r\n  });\r\n\r\n  function finishEndo(\r\n    endoBeta: EndomorphismOpts['beta'],\r\n    k1p: Point,\r\n    k2p: Point,\r\n    k1neg: boolean,\r\n    k2neg: boolean\r\n  ) {\r\n    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\r\n    k1p = negateCt(k1neg, k1p);\r\n    k2p = negateCt(k2neg, k2p);\r\n    return k1p.add(k2p);\r\n  }\r\n\r\n  /**\r\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\r\n   * Default Point works in 2d / affine coordinates: (x, y).\r\n   * We're doing calculations in projective, because its operations don't require costly inversion.\r\n   */\r\n  class Point implements WeierstrassPoint<T> {\r\n    // base / generator point\r\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\r\n    // zero / infinity / identity point\r\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\r\n    // math field\r\n    static readonly Fp = Fp;\r\n    // scalar field\r\n    static readonly Fn = Fn;\r\n\r\n    readonly X: T;\r\n    readonly Y: T;\r\n    readonly Z: T;\r\n\r\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\r\n    constructor(X: T, Y: T, Z: T) {\r\n      this.X = acoord('x', X);\r\n      this.Y = acoord('y', Y, true);\r\n      this.Z = acoord('z', Z);\r\n      Object.freeze(this);\r\n    }\r\n\r\n    static CURVE(): WeierstrassOpts<T> {\r\n      return CURVE;\r\n    }\r\n\r\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\r\n    static fromAffine(p: AffinePoint<T>): Point {\r\n      const { x, y } = p || {};\r\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\r\n      if (p instanceof Point) throw new Error('projective point not allowed');\r\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\r\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\r\n      return new Point(x, y, Fp.ONE);\r\n    }\r\n\r\n    static fromBytes(bytes: Uint8Array): Point {\r\n      const P = Point.fromAffine(decodePoint(abytes(bytes, undefined, 'point')));\r\n      P.assertValidity();\r\n      return P;\r\n    }\r\n    static fromHex(hex: Hex): Point {\r\n      return Point.fromBytes(ensureBytes('pointHex', hex));\r\n    }\r\n\r\n    get x(): T {\r\n      return this.toAffine().x;\r\n    }\r\n    get y(): T {\r\n      return this.toAffine().y;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param windowSize\r\n     * @param isLazy true will defer table computation until the first multiplication\r\n     * @returns\r\n     */\r\n    precompute(windowSize: number = 8, isLazy = true): Point {\r\n      wnaf.createCache(this, windowSize);\r\n      if (!isLazy) this.multiply(_3n); // random number\r\n      return this;\r\n    }\r\n\r\n    // TODO: return `this`\r\n    /** A point on curve is valid if it conforms to equation. */\r\n    assertValidity(): void {\r\n      assertValidMemo(this);\r\n    }\r\n\r\n    hasEvenY(): boolean {\r\n      const { y } = this.toAffine();\r\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\r\n      return !Fp.isOdd(y);\r\n    }\r\n\r\n    /** Compare one point to another. */\r\n    equals(other: Point): boolean {\r\n      aprjpoint(other);\r\n      const { X: X1, Y: Y1, Z: Z1 } = this;\r\n      const { X: X2, Y: Y2, Z: Z2 } = other;\r\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\r\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\r\n      return U1 && U2;\r\n    }\r\n\r\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\r\n    negate(): Point {\r\n      return new Point(this.X, Fp.neg(this.Y), this.Z);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free doubling formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 3\r\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\r\n    double() {\r\n      const { a, b } = CURVE;\r\n      const b3 = Fp.mul(b, _3n);\r\n      const { X: X1, Y: Y1, Z: Z1 } = this;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      let t0 = Fp.mul(X1, X1); // step 1\r\n      let t1 = Fp.mul(Y1, Y1);\r\n      let t2 = Fp.mul(Z1, Z1);\r\n      let t3 = Fp.mul(X1, Y1);\r\n      t3 = Fp.add(t3, t3); // step 5\r\n      Z3 = Fp.mul(X1, Z1);\r\n      Z3 = Fp.add(Z3, Z3);\r\n      X3 = Fp.mul(a, Z3);\r\n      Y3 = Fp.mul(b3, t2);\r\n      Y3 = Fp.add(X3, Y3); // step 10\r\n      X3 = Fp.sub(t1, Y3);\r\n      Y3 = Fp.add(t1, Y3);\r\n      Y3 = Fp.mul(X3, Y3);\r\n      X3 = Fp.mul(t3, X3);\r\n      Z3 = Fp.mul(b3, Z3); // step 15\r\n      t2 = Fp.mul(a, t2);\r\n      t3 = Fp.sub(t0, t2);\r\n      t3 = Fp.mul(a, t3);\r\n      t3 = Fp.add(t3, Z3);\r\n      Z3 = Fp.add(t0, t0); // step 20\r\n      t0 = Fp.add(Z3, t0);\r\n      t0 = Fp.add(t0, t2);\r\n      t0 = Fp.mul(t0, t3);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t2 = Fp.mul(Y1, Z1); // step 25\r\n      t2 = Fp.add(t2, t2);\r\n      t0 = Fp.mul(t2, t3);\r\n      X3 = Fp.sub(X3, t0);\r\n      Z3 = Fp.mul(t2, t1);\r\n      Z3 = Fp.add(Z3, Z3); // step 30\r\n      Z3 = Fp.add(Z3, Z3);\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free addition formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 1\r\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\r\n    add(other: Point): Point {\r\n      aprjpoint(other);\r\n      const { X: X1, Y: Y1, Z: Z1 } = this;\r\n      const { X: X2, Y: Y2, Z: Z2 } = other;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      const a = CURVE.a;\r\n      const b3 = Fp.mul(CURVE.b, _3n);\r\n      let t0 = Fp.mul(X1, X2); // step 1\r\n      let t1 = Fp.mul(Y1, Y2);\r\n      let t2 = Fp.mul(Z1, Z2);\r\n      let t3 = Fp.add(X1, Y1);\r\n      let t4 = Fp.add(X2, Y2); // step 5\r\n      t3 = Fp.mul(t3, t4);\r\n      t4 = Fp.add(t0, t1);\r\n      t3 = Fp.sub(t3, t4);\r\n      t4 = Fp.add(X1, Z1);\r\n      let t5 = Fp.add(X2, Z2); // step 10\r\n      t4 = Fp.mul(t4, t5);\r\n      t5 = Fp.add(t0, t2);\r\n      t4 = Fp.sub(t4, t5);\r\n      t5 = Fp.add(Y1, Z1);\r\n      X3 = Fp.add(Y2, Z2); // step 15\r\n      t5 = Fp.mul(t5, X3);\r\n      X3 = Fp.add(t1, t2);\r\n      t5 = Fp.sub(t5, X3);\r\n      Z3 = Fp.mul(a, t4);\r\n      X3 = Fp.mul(b3, t2); // step 20\r\n      Z3 = Fp.add(X3, Z3);\r\n      X3 = Fp.sub(t1, Z3);\r\n      Z3 = Fp.add(t1, Z3);\r\n      Y3 = Fp.mul(X3, Z3);\r\n      t1 = Fp.add(t0, t0); // step 25\r\n      t1 = Fp.add(t1, t0);\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.mul(b3, t4);\r\n      t1 = Fp.add(t1, t2);\r\n      t2 = Fp.sub(t0, t2); // step 30\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.add(t4, t2);\r\n      t0 = Fp.mul(t1, t4);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t0 = Fp.mul(t5, t4); // step 35\r\n      X3 = Fp.mul(t3, X3);\r\n      X3 = Fp.sub(X3, t0);\r\n      t0 = Fp.mul(t3, t1);\r\n      Z3 = Fp.mul(t5, Z3);\r\n      Z3 = Fp.add(Z3, t0); // step 40\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    subtract(other: Point) {\r\n      return this.add(other.negate());\r\n    }\r\n\r\n    is0(): boolean {\r\n      return this.equals(Point.ZERO);\r\n    }\r\n\r\n    /**\r\n     * Constant time multiplication.\r\n     * Uses wNAF method. Windowed method may be 10% faster,\r\n     * but takes 2x longer to generate and consumes 2x memory.\r\n     * Uses precomputes when available.\r\n     * Uses endomorphism for Koblitz curves.\r\n     * @param scalar by which the point would be multiplied\r\n     * @returns New point\r\n     */\r\n    multiply(scalar: bigint): Point {\r\n      const { endo } = extraOpts;\r\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\r\n      let point: Point, fake: Point; // Fake point is used to const-time mult\r\n      const mul = (n: bigint) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));\r\n      /** See docs for {@link EndomorphismOpts} */\r\n      if (endo) {\r\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);\r\n        const { p: k1p, f: k1f } = mul(k1);\r\n        const { p: k2p, f: k2f } = mul(k2);\r\n        fake = k1f.add(k2f);\r\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\r\n      } else {\r\n        const { p, f } = mul(scalar);\r\n        point = p;\r\n        fake = f;\r\n      }\r\n      // Normalize `z` for both points, but return only real one\r\n      return normalizeZ(Point, [point, fake])[0];\r\n    }\r\n\r\n    /**\r\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\r\n     * It's faster, but should only be used when you don't care about\r\n     * an exposed secret key e.g. sig verification, which works over *public* keys.\r\n     */\r\n    multiplyUnsafe(sc: bigint): Point {\r\n      const { endo } = extraOpts;\r\n      const p = this as Point;\r\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\r\n      if (sc === _0n || p.is0()) return Point.ZERO;\r\n      if (sc === _1n) return p; // fast-path\r\n      if (wnaf.hasCache(this)) return this.multiply(sc);\r\n      if (endo) {\r\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);\r\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\r\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\r\n      } else {\r\n        return wnaf.unsafe(p, sc);\r\n      }\r\n    }\r\n\r\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\r\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\r\n      return sum.is0() ? undefined : sum;\r\n    }\r\n\r\n    /**\r\n     * Converts Projective point to affine (x, y) coordinates.\r\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\r\n     */\r\n    toAffine(invertedZ?: T): AffinePoint<T> {\r\n      return toAffineMemo(this, invertedZ);\r\n    }\r\n\r\n    /**\r\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\r\n     * Always torsion-free for cofactor=1 curves.\r\n     */\r\n    isTorsionFree(): boolean {\r\n      const { isTorsionFree } = extraOpts;\r\n      if (cofactor === _1n) return true;\r\n      if (isTorsionFree) return isTorsionFree(Point, this);\r\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\r\n    }\r\n\r\n    clearCofactor(): Point {\r\n      const { clearCofactor } = extraOpts;\r\n      if (cofactor === _1n) return this; // Fast-path\r\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\r\n      return this.multiplyUnsafe(cofactor);\r\n    }\r\n\r\n    isSmallOrder(): boolean {\r\n      // can we use this.clearCofactor()?\r\n      return this.multiplyUnsafe(cofactor).is0();\r\n    }\r\n\r\n    toBytes(isCompressed = true): Uint8Array {\r\n      abool(isCompressed, 'isCompressed');\r\n      this.assertValidity();\r\n      return encodePoint(Point, this, isCompressed);\r\n    }\r\n\r\n    toHex(isCompressed = true): string {\r\n      return bytesToHex(this.toBytes(isCompressed));\r\n    }\r\n\r\n    toString() {\r\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\r\n    }\r\n\r\n    // TODO: remove\r\n    get px(): T {\r\n      return this.X;\r\n    }\r\n    get py(): T {\r\n      return this.X;\r\n    }\r\n    get pz(): T {\r\n      return this.Z;\r\n    }\r\n    toRawBytes(isCompressed = true): Uint8Array {\r\n      return this.toBytes(isCompressed);\r\n    }\r\n    _setWindowSize(windowSize: number) {\r\n      this.precompute(windowSize);\r\n    }\r\n    static normalizeZ(points: Point[]): Point[] {\r\n      return normalizeZ(Point, points);\r\n    }\r\n    static msm(points: Point[], scalars: bigint[]): Point {\r\n      return pippenger(Point, Fn, points, scalars);\r\n    }\r\n    static fromPrivateKey(privateKey: PrivKey) {\r\n      return Point.BASE.multiply(_normFnElement(Fn, privateKey));\r\n    }\r\n  }\r\n  const bits = Fn.BITS;\r\n  const wnaf = new wNAF(Point, extraOpts.endo ? Math.ceil(bits / 2) : bits);\r\n  Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\r\n  return Point;\r\n}\r\n\r\n/** Methods of ECDSA signature instance. */\r\nexport interface ECDSASignature {\r\n  readonly r: bigint;\r\n  readonly s: bigint;\r\n  readonly recovery?: number;\r\n  addRecoveryBit(recovery: number): ECDSASigRecovered;\r\n  hasHighS(): boolean;\r\n  toBytes(format?: string): Uint8Array;\r\n  toHex(format?: string): string;\r\n\r\n  /** @deprecated */\r\n  assertValidity(): void;\r\n  /** @deprecated */\r\n  normalizeS(): ECDSASignature;\r\n  /** @deprecated use standalone method `curve.recoverPublicKey(sig.toBytes('recovered'), msg)` */\r\n  recoverPublicKey(msgHash: Hex): WeierstrassPoint<bigint>;\r\n  /** @deprecated use `.toBytes('compact')` */\r\n  toCompactRawBytes(): Uint8Array;\r\n  /** @deprecated use `.toBytes('compact')` */\r\n  toCompactHex(): string;\r\n  /** @deprecated use `.toBytes('der')` */\r\n  toDERRawBytes(): Uint8Array;\r\n  /** @deprecated use `.toBytes('der')` */\r\n  toDERHex(): string;\r\n}\r\nexport type ECDSASigRecovered = ECDSASignature & {\r\n  readonly recovery: number;\r\n};\r\n/** Methods of ECDSA signature constructor. */\r\nexport type ECDSASignatureCons = {\r\n  new (r: bigint, s: bigint, recovery?: number): ECDSASignature;\r\n  fromBytes(bytes: Uint8Array, format?: ECDSASigFormat): ECDSASignature;\r\n  fromHex(hex: string, format?: ECDSASigFormat): ECDSASignature;\r\n\r\n  /** @deprecated use `.fromBytes(bytes, 'compact')` */\r\n  fromCompact(hex: Hex): ECDSASignature;\r\n  /** @deprecated use `.fromBytes(bytes, 'der')` */\r\n  fromDER(hex: Hex): ECDSASignature;\r\n};\r\n\r\n// Points start with byte 0x02 when y is even; otherwise 0x03\r\nfunction pprefix(hasEvenY: boolean): Uint8Array {\r\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\r\n}\r\n\r\n/**\r\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\r\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\r\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\r\n * b = False and y = sqrt(Z * (u / v)) otherwise.\r\n * @param Fp\r\n * @param Z\r\n * @returns\r\n */\r\nexport function SWUFpSqrtRatio<T>(\r\n  Fp: IField<T>,\r\n  Z: T\r\n): (u: T, v: T) => { isValid: boolean; value: T } {\r\n  // Generic implementation\r\n  const q = Fp.ORDER;\r\n  let l = _0n;\r\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\r\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\r\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\r\n  // 2n ** c1 == 2n << (c1-1)\r\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\r\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\r\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\r\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\r\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\r\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\r\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\r\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\r\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\r\n    let tv1 = c6; // 1. tv1 = c6\r\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\r\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\r\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\r\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\r\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\r\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\r\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\r\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\r\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\r\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\r\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\r\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\r\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\r\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\r\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\r\n    // 17. for i in (c1, c1 - 1, ..., 2):\r\n    for (let i = c1; i > _1n; i--) {\r\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\r\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\r\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\r\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\r\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\r\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\r\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\r\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\r\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\r\n    }\r\n    return { isValid: isQR, value: tv3 };\r\n  };\r\n  if (Fp.ORDER % _4n === _3n) {\r\n    // sqrt_ratio_3mod4(u, v)\r\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\r\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\r\n    sqrtRatio = (u: T, v: T) => {\r\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\r\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\r\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\r\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\r\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\r\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\r\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\r\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\r\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\r\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\r\n    };\r\n  }\r\n  // No curves uses that\r\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\r\n  return sqrtRatio;\r\n}\r\n/**\r\n * Simplified Shallue-van de Woestijne-Ulas Method\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\r\n */\r\nexport function mapToCurveSimpleSWU<T>(\r\n  Fp: IField<T>,\r\n  opts: {\r\n    A: T;\r\n    B: T;\r\n    Z: T;\r\n  }\r\n): (u: T) => { x: T; y: T } {\r\n  validateField(Fp);\r\n  const { A, B, Z } = opts;\r\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\r\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\r\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\r\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\r\n  // Input: u, an element of F.\r\n  // Output: (x, y), a point on E.\r\n  return (u: T): { x: T; y: T } => {\r\n    // prettier-ignore\r\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\r\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\r\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\r\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\r\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\r\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\r\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\r\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\r\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\r\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\r\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\r\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\r\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\r\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\r\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\r\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\r\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\r\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\r\n    y = Fp.mul(y, value); // 20.   y = y * y1\r\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\r\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\r\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\r\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\r\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\r\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\r\n    return { x, y };\r\n  };\r\n}\r\n\r\nfunction getWLengths<T>(Fp: IField<T>, Fn: IField<bigint>) {\r\n  return {\r\n    secretKey: Fn.BYTES,\r\n    publicKey: 1 + Fp.BYTES,\r\n    publicKeyUncompressed: 1 + 2 * Fp.BYTES,\r\n    publicKeyHasPrefix: true,\r\n    signature: 2 * Fn.BYTES,\r\n  };\r\n}\r\n\r\n/**\r\n * Sometimes users only need getPublicKey, getSharedSecret, and secret key handling.\r\n * This helper ensures no signature functionality is present. Less code, smaller bundle size.\r\n */\r\nexport function ecdh(\r\n  Point: WeierstrassPointCons<bigint>,\r\n  ecdhOpts: { randomBytes?: (bytesLength?: number) => Uint8Array } = {}\r\n): ECDH {\r\n  const { Fn } = Point;\r\n  const randomBytes_ = ecdhOpts.randomBytes || randomBytesWeb;\r\n  const lengths = Object.assign(getWLengths(Point.Fp, Fn), { seed: getMinHashLength(Fn.ORDER) });\r\n\r\n  function isValidSecretKey(secretKey: PrivKey) {\r\n    try {\r\n      return !!_normFnElement(Fn, secretKey);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function isValidPublicKey(publicKey: Uint8Array, isCompressed?: boolean): boolean {\r\n    const { publicKey: comp, publicKeyUncompressed } = lengths;\r\n    try {\r\n      const l = publicKey.length;\r\n      if (isCompressed === true && l !== comp) return false;\r\n      if (isCompressed === false && l !== publicKeyUncompressed) return false;\r\n      return !!Point.fromBytes(publicKey);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces cryptographically secure secret key from random of size\r\n   * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\r\n   */\r\n  function randomSecretKey(seed = randomBytes_(lengths.seed)): Uint8Array {\r\n    return mapHashToField(abytes(seed, lengths.seed, 'seed'), Fn.ORDER);\r\n  }\r\n\r\n  /**\r\n   * Computes public key for a secret key. Checks for validity of the secret key.\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\r\n   */\r\n  function getPublicKey(secretKey: PrivKey, isCompressed = true): Uint8Array {\r\n    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\r\n  }\r\n\r\n  function keygen(seed?: Uint8Array) {\r\n    const secretKey = randomSecretKey(seed);\r\n    return { secretKey, publicKey: getPublicKey(secretKey) };\r\n  }\r\n\r\n  /**\r\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\r\n   */\r\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\r\n    if (typeof item === 'bigint') return false;\r\n    if (item instanceof Point) return true;\r\n    const { secretKey, publicKey, publicKeyUncompressed } = lengths;\r\n    if (Fn.allowedLengths || secretKey === publicKey) return undefined;\r\n    const l = ensureBytes('key', item).length;\r\n    return l === publicKey || l === publicKeyUncompressed;\r\n  }\r\n\r\n  /**\r\n   * ECDH (Elliptic Curve Diffie Hellman).\r\n   * Computes shared public key from secret key A and public key B.\r\n   * Checks: 1) secret key validity 2) shared key is on-curve.\r\n   * Does NOT hash the result.\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns shared public key\r\n   */\r\n  function getSharedSecret(secretKeyA: PrivKey, publicKeyB: Hex, isCompressed = true): Uint8Array {\r\n    if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\r\n    if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\r\n    const s = _normFnElement(Fn, secretKeyA);\r\n    const b = Point.fromHex(publicKeyB); // checks for being on-curve\r\n    return b.multiply(s).toBytes(isCompressed);\r\n  }\r\n\r\n  const utils = {\r\n    isValidSecretKey,\r\n    isValidPublicKey,\r\n    randomSecretKey,\r\n\r\n    // TODO: remove\r\n    isValidPrivateKey: isValidSecretKey,\r\n    randomPrivateKey: randomSecretKey,\r\n    normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\r\n    precompute(windowSize = 8, point = Point.BASE): WeierstrassPoint<bigint> {\r\n      return point.precompute(windowSize, false);\r\n    },\r\n  };\r\n\r\n  return Object.freeze({ getPublicKey, getSharedSecret, keygen, Point, utils, lengths });\r\n}\r\n\r\n/**\r\n * Creates ECDSA signing interface for given elliptic curve `Point` and `hash` function.\r\n * We need `hash` for 2 features:\r\n * 1. Message prehash-ing. NOT used if `sign` / `verify` are called with `prehash: false`\r\n * 2. k generation in `sign`, using HMAC-drbg(hash)\r\n *\r\n * ECDSAOpts are only rarely needed.\r\n *\r\n * @example\r\n * ```js\r\n * const p256_Point = weierstrass(...);\r\n * const p256_sha256 = ecdsa(p256_Point, sha256);\r\n * const p256_sha224 = ecdsa(p256_Point, sha224);\r\n * const p256_sha224_r = ecdsa(p256_Point, sha224, { randomBytes: (length) => { ... } });\r\n * ```\r\n */\r\nexport function ecdsa(\r\n  Point: WeierstrassPointCons<bigint>,\r\n  hash: CHash,\r\n  ecdsaOpts: ECDSAOpts = {}\r\n): ECDSA {\r\n  ahash(hash);\r\n  _validateObject(\r\n    ecdsaOpts,\r\n    {},\r\n    {\r\n      hmac: 'function',\r\n      lowS: 'boolean',\r\n      randomBytes: 'function',\r\n      bits2int: 'function',\r\n      bits2int_modN: 'function',\r\n    }\r\n  );\r\n\r\n  const randomBytes = ecdsaOpts.randomBytes || randomBytesWeb;\r\n  const hmac: HmacFnSync =\r\n    ecdsaOpts.hmac ||\r\n    (((key, ...msgs) => nobleHmac(hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\r\n\r\n  const { Fp, Fn } = Point;\r\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\r\n  const { keygen, getPublicKey, getSharedSecret, utils, lengths } = ecdh(Point, ecdsaOpts);\r\n  const defaultSigOpts: Required<ECDSASignOpts> = {\r\n    prehash: false,\r\n    lowS: typeof ecdsaOpts.lowS === 'boolean' ? ecdsaOpts.lowS : false,\r\n    format: undefined as any, //'compact' as ECDSASigFormat,\r\n    extraEntropy: false,\r\n  };\r\n  const defaultSigOpts_format = 'compact';\r\n\r\n  function isBiggerThanHalfOrder(number: bigint) {\r\n    const HALF = CURVE_ORDER >> _1n;\r\n    return number > HALF;\r\n  }\r\n  function validateRS(title: string, num: bigint): bigint {\r\n    if (!Fn.isValidNot0(num))\r\n      throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);\r\n    return num;\r\n  }\r\n  function validateSigLength(bytes: Uint8Array, format: ECDSASigFormat) {\r\n    validateSigFormat(format);\r\n    const size = lengths.signature!;\r\n    const sizer = format === 'compact' ? size : format === 'recovered' ? size + 1 : undefined;\r\n    return abytes(bytes, sizer, `${format} signature`);\r\n  }\r\n\r\n  /**\r\n   * ECDSA signature with its (r, s) properties. Supports compact, recovered & DER representations.\r\n   */\r\n  class Signature implements ECDSASignature {\r\n    readonly r: bigint;\r\n    readonly s: bigint;\r\n    readonly recovery?: number;\r\n    constructor(r: bigint, s: bigint, recovery?: number) {\r\n      this.r = validateRS('r', r); // r in [1..N-1];\r\n      this.s = validateRS('s', s); // s in [1..N-1];\r\n      if (recovery != null) this.recovery = recovery;\r\n      Object.freeze(this);\r\n    }\r\n\r\n    static fromBytes(bytes: Uint8Array, format: ECDSASigFormat = defaultSigOpts_format): Signature {\r\n      validateSigLength(bytes, format);\r\n      let recid: number | undefined;\r\n      if (format === 'der') {\r\n        const { r, s } = DER.toSig(abytes(bytes));\r\n        return new Signature(r, s);\r\n      }\r\n      if (format === 'recovered') {\r\n        recid = bytes[0];\r\n        format = 'compact';\r\n        bytes = bytes.subarray(1);\r\n      }\r\n      const L = Fn.BYTES;\r\n      const r = bytes.subarray(0, L);\r\n      const s = bytes.subarray(L, L * 2);\r\n      return new Signature(Fn.fromBytes(r), Fn.fromBytes(s), recid);\r\n    }\r\n\r\n    static fromHex(hex: string, format?: ECDSASigFormat) {\r\n      return this.fromBytes(hexToBytes(hex), format);\r\n    }\r\n\r\n    addRecoveryBit(recovery: number): RecoveredSignature {\r\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\r\n    }\r\n\r\n    recoverPublicKey(messageHash: Hex): WeierstrassPoint<bigint> {\r\n      const FIELD_ORDER = Fp.ORDER;\r\n      const { r, s, recovery: rec } = this;\r\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\r\n\r\n      // ECDSA recovery is hard for cofactor > 1 curves.\r\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\r\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\r\n      // However, for cofactor>1, r+n may not get q.x:\r\n      // r+n*i would need to be done instead where i is unknown.\r\n      // To easily get i, we either need to:\r\n      // a. increase amount of valid recid values (4, 5...); OR\r\n      // b. prohibit non-prime-order signatures (recid > 1).\r\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\r\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\r\n\r\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\r\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\r\n      const x = Fp.toBytes(radj);\r\n      const R = Point.fromBytes(concatBytes(pprefix((rec & 1) === 0), x));\r\n      const ir = Fn.inv(radj); // r^-1\r\n      const h = bits2int_modN(ensureBytes('msgHash', messageHash)); // Truncate hash\r\n      const u1 = Fn.create(-h * ir); // -hr^-1\r\n      const u2 = Fn.create(s * ir); // sr^-1\r\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\r\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\r\n      if (Q.is0()) throw new Error('point at infinify');\r\n      Q.assertValidity();\r\n      return Q;\r\n    }\r\n\r\n    // Signatures should be low-s, to prevent malleability.\r\n    hasHighS(): boolean {\r\n      return isBiggerThanHalfOrder(this.s);\r\n    }\r\n\r\n    toBytes(format: ECDSASigFormat = defaultSigOpts_format) {\r\n      validateSigFormat(format);\r\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\r\n      const r = Fn.toBytes(this.r);\r\n      const s = Fn.toBytes(this.s);\r\n      if (format === 'recovered') {\r\n        if (this.recovery == null) throw new Error('recovery bit must be present');\r\n        return concatBytes(Uint8Array.of(this.recovery), r, s);\r\n      }\r\n      return concatBytes(r, s);\r\n    }\r\n\r\n    toHex(format?: ECDSASigFormat) {\r\n      return bytesToHex(this.toBytes(format));\r\n    }\r\n\r\n    // TODO: remove\r\n    assertValidity(): void {}\r\n    static fromCompact(hex: Hex) {\r\n      return Signature.fromBytes(ensureBytes('sig', hex), 'compact');\r\n    }\r\n    static fromDER(hex: Hex) {\r\n      return Signature.fromBytes(ensureBytes('sig', hex), 'der');\r\n    }\r\n    normalizeS() {\r\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\r\n    }\r\n    toDERRawBytes() {\r\n      return this.toBytes('der');\r\n    }\r\n    toDERHex() {\r\n      return bytesToHex(this.toBytes('der'));\r\n    }\r\n    toCompactRawBytes() {\r\n      return this.toBytes('compact');\r\n    }\r\n    toCompactHex() {\r\n      return bytesToHex(this.toBytes('compact'));\r\n    }\r\n  }\r\n  type RecoveredSignature = Signature & { recovery: number };\r\n\r\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\r\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\r\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\r\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\r\n  const bits2int =\r\n    ecdsaOpts.bits2int ||\r\n    function bits2int_def(bytes: Uint8Array): bigint {\r\n      // Our custom check \"just in case\", for protection against DoS\r\n      if (bytes.length > 8192) throw new Error('input is too large');\r\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\r\n      // for some cases, since bytes.length * 8 is not actual bitLength.\r\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\r\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\r\n      return delta > 0 ? num >> BigInt(delta) : num;\r\n    };\r\n  const bits2int_modN =\r\n    ecdsaOpts.bits2int_modN ||\r\n    function bits2int_modN_def(bytes: Uint8Array): bigint {\r\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\r\n    };\r\n  // Pads output with zero as per spec\r\n  const ORDER_MASK = bitMask(fnBits);\r\n  /** Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`. */\r\n  function int2octets(num: bigint): Uint8Array {\r\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\r\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\r\n    return Fn.toBytes(num);\r\n  }\r\n\r\n  function validateMsgAndHash(message: Uint8Array, prehash: boolean) {\r\n    abytes(message, undefined, 'message');\r\n    return prehash ? abytes(hash(message), undefined, 'prehashed message') : message;\r\n  }\r\n\r\n  /**\r\n   * Steps A, D of RFC6979 3.2.\r\n   * Creates RFC6979 seed; converts msg/privKey to numbers.\r\n   * Used only in sign, not in verify.\r\n   *\r\n   * Warning: we cannot assume here that message has same amount of bytes as curve order,\r\n   * this will be invalid at least for P521. Also it can be bigger for P224 + SHA256.\r\n   */\r\n  function prepSig(message: Uint8Array, privateKey: PrivKey, opts: ECDSASignOpts) {\r\n    if (['recovered', 'canonical'].some((k) => k in opts))\r\n      throw new Error('sign() legacy options not supported');\r\n    const { lowS, prehash, extraEntropy } = validateSigOpts(opts, defaultSigOpts);\r\n    message = validateMsgAndHash(message, prehash); // RFC6979 3.2 A: h1 = H(m)\r\n    // We can't later call bits2octets, since nested bits2int is broken for curves\r\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\r\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\r\n    const h1int = bits2int_modN(message);\r\n    const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\r\n    const seedArgs = [int2octets(d), int2octets(h1int)];\r\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\r\n    if (extraEntropy != null && extraEntropy !== false) {\r\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\r\n      // gen random bytes OR pass as-is\r\n      const e = extraEntropy === true ? randomBytes(lengths.secretKey) : extraEntropy;\r\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\r\n    }\r\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\r\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\r\n    // Converts signature params into point w r/s, checks result for validity.\r\n    // To transform k => Signature:\r\n    // q = k⋅G\r\n    // r = q.x mod n\r\n    // s = k^-1(m + rd) mod n\r\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\r\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\r\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\r\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\r\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\r\n      // Important: all mod() calls here must be done over N\r\n      const k = bits2int(kBytes); // mod n, not mod p\r\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\r\n      const ik = Fn.inv(k); // k^-1 mod n\r\n      const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\r\n      const r = Fn.create(q.x); // r = q.x mod n\r\n      if (r === _0n) return;\r\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\r\n      if (s === _0n) return;\r\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\r\n      let normS = s;\r\n      if (lowS && isBiggerThanHalfOrder(s)) {\r\n        normS = Fn.neg(s); // if lowS was passed, ensure s is always\r\n        recovery ^= 1; // // in the bottom half of N\r\n      }\r\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\r\n    }\r\n    return { seed, k2sig };\r\n  }\r\n\r\n  /**\r\n   * Signs message hash with a secret key.\r\n   *\r\n   * ```\r\n   * sign(m, d) where\r\n   *   k = rfc6979_hmac_drbg(m, d)\r\n   *   (x, y) = G × k\r\n   *   r = x mod n\r\n   *   s = (m + dr) / k mod n\r\n   * ```\r\n   */\r\n  function sign(message: Hex, secretKey: PrivKey, opts: ECDSASignOpts = {}): RecoveredSignature {\r\n    message = ensureBytes('message', message);\r\n    const { seed, k2sig } = prepSig(message, secretKey, opts); // Steps A, D of RFC6979 3.2.\r\n    const drbg = createHmacDrbg<RecoveredSignature>(hash.outputLen, Fn.BYTES, hmac);\r\n    const sig = drbg(seed, k2sig); // Steps B, C, D, E, F, G\r\n    return sig;\r\n  }\r\n\r\n  function tryParsingSig(sg: Hex | SignatureLike) {\r\n    // Try to deduce format\r\n    let sig: Signature | undefined = undefined;\r\n    const isHex = typeof sg === 'string' || isBytes(sg);\r\n    const isObj =\r\n      !isHex &&\r\n      sg !== null &&\r\n      typeof sg === 'object' &&\r\n      typeof sg.r === 'bigint' &&\r\n      typeof sg.s === 'bigint';\r\n    if (!isHex && !isObj)\r\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\r\n    if (isObj) {\r\n      sig = new Signature(sg.r, sg.s);\r\n    } else if (isHex) {\r\n      try {\r\n        sig = Signature.fromBytes(ensureBytes('sig', sg), 'der');\r\n      } catch (derError) {\r\n        if (!(derError instanceof DER.Err)) throw derError;\r\n      }\r\n      if (!sig) {\r\n        try {\r\n          sig = Signature.fromBytes(ensureBytes('sig', sg), 'compact');\r\n        } catch (error) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    if (!sig) return false;\r\n    return sig;\r\n  }\r\n\r\n  /**\r\n   * Verifies a signature against message and public key.\r\n   * Rejects lowS signatures by default: see {@link ECDSAVerifyOpts}.\r\n   * Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\r\n   *\r\n   * ```\r\n   * verify(r, s, h, P) where\r\n   *   u1 = hs^-1 mod n\r\n   *   u2 = rs^-1 mod n\r\n   *   R = u1⋅G + u2⋅P\r\n   *   mod(R.x, n) == r\r\n   * ```\r\n   */\r\n  function verify(\r\n    signature: Hex | SignatureLike,\r\n    message: Hex,\r\n    publicKey: Hex,\r\n    opts: ECDSAVerifyOpts = {}\r\n  ): boolean {\r\n    const { lowS, prehash, format } = validateSigOpts(opts, defaultSigOpts);\r\n    publicKey = ensureBytes('publicKey', publicKey);\r\n    message = validateMsgAndHash(ensureBytes('message', message), prehash);\r\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\r\n    const sig =\r\n      format === undefined\r\n        ? tryParsingSig(signature)\r\n        : Signature.fromBytes(ensureBytes('sig', signature as Hex), format);\r\n    if (sig === false) return false;\r\n    try {\r\n      const P = Point.fromBytes(publicKey);\r\n      if (lowS && sig.hasHighS()) return false;\r\n      const { r, s } = sig;\r\n      const h = bits2int_modN(message); // mod n, not mod p\r\n      const is = Fn.inv(s); // s^-1 mod n\r\n      const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\r\n      const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\r\n      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2)); // u1⋅G + u2⋅P\r\n      if (R.is0()) return false;\r\n      const v = Fn.create(R.x); // v = r.x mod n\r\n      return v === r;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function recoverPublicKey(\r\n    signature: Uint8Array,\r\n    message: Uint8Array,\r\n    opts: ECDSARecoverOpts = {}\r\n  ): Uint8Array {\r\n    const { prehash } = validateSigOpts(opts, defaultSigOpts);\r\n    message = validateMsgAndHash(message, prehash);\r\n    return Signature.fromBytes(signature, 'recovered').recoverPublicKey(message).toBytes();\r\n  }\r\n\r\n  return Object.freeze({\r\n    keygen,\r\n    getPublicKey,\r\n    getSharedSecret,\r\n    utils,\r\n    lengths,\r\n    Point,\r\n    sign,\r\n    verify,\r\n    recoverPublicKey,\r\n    Signature,\r\n    hash,\r\n  });\r\n}\r\n\r\n// TODO: remove everything below\r\n/** @deprecated use ECDSASignature */\r\nexport type SignatureType = ECDSASignature;\r\n/** @deprecated use ECDSASigRecovered */\r\nexport type RecoveredSignatureType = ECDSASigRecovered;\r\n/** @deprecated switch to Uint8Array signatures in format 'compact' */\r\nexport type SignatureLike = { r: bigint; s: bigint };\r\nexport type ECDSAExtraEntropy = Hex | boolean;\r\n/** @deprecated use `ECDSAExtraEntropy` */\r\nexport type Entropy = Hex | boolean;\r\nexport type BasicWCurve<T> = BasicCurve<T> & {\r\n  // Params: a, b\r\n  a: T;\r\n  b: T;\r\n\r\n  // Optional params\r\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\r\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\r\n  endo?: EndomorphismOpts;\r\n  // When a cofactor != 1, there can be an effective methods to:\r\n  // 1. Determine whether a point is torsion-free\r\n  isTorsionFree?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\r\n  // 2. Clear torsion component\r\n  clearCofactor?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\r\n};\r\n/** @deprecated use ECDSASignOpts */\r\nexport type SignOpts = ECDSASignOpts;\r\n/** @deprecated use ECDSASignOpts */\r\nexport type VerOpts = ECDSAVerifyOpts;\r\n\r\n/** @deprecated use WeierstrassPoint */\r\nexport type ProjPointType<T> = WeierstrassPoint<T>;\r\n/** @deprecated use WeierstrassPointCons */\r\nexport type ProjConstructor<T> = WeierstrassPointCons<T>;\r\n/** @deprecated use ECDSASignatureCons */\r\nexport type SignatureConstructor = ECDSASignatureCons;\r\n\r\n// TODO: remove\r\nexport type CurvePointsType<T> = BasicWCurve<T> & {\r\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\r\n  toBytes?: (\r\n    c: WeierstrassPointCons<T>,\r\n    point: WeierstrassPoint<T>,\r\n    isCompressed: boolean\r\n  ) => Uint8Array;\r\n};\r\n\r\n// LegacyWeierstrassOpts\r\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\r\n\r\n// LegacyWeierstrass\r\nexport type CurvePointsRes<T> = {\r\n  Point: WeierstrassPointCons<T>;\r\n\r\n  /** @deprecated use `Point.CURVE()` */\r\n  CURVE: CurvePointsType<T>;\r\n  /** @deprecated use `Point` */\r\n  ProjectivePoint: WeierstrassPointCons<T>;\r\n  /** @deprecated use `Point.Fn.fromBytes(privateKey)` */\r\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n  /** @deprecated */\r\n  weierstrassEquation: (x: T) => T;\r\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\r\n  isWithinCurveOrder: (num: bigint) => boolean;\r\n};\r\n\r\n// Aliases to legacy types\r\n// export type CurveType = LegacyECDSAOpts;\r\n// export type CurveFn = LegacyECDSA;\r\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\r\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\r\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\r\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\r\n\r\n/** @deprecated use `Uint8Array` */\r\nexport type PubKey = Hex | WeierstrassPoint<bigint>;\r\nexport type CurveType = BasicWCurve<bigint> & {\r\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\r\n  hmac?: HmacFnSync;\r\n  randomBytes?: (bytesLength?: number) => Uint8Array;\r\n  lowS?: boolean;\r\n  bits2int?: (bytes: Uint8Array) => bigint;\r\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\r\n};\r\nexport type CurveFn = {\r\n  /** @deprecated use `Point.CURVE()` */\r\n  CURVE: CurvePointsType<bigint>;\r\n  keygen: ECDSA['keygen'];\r\n  getPublicKey: ECDSA['getPublicKey'];\r\n  getSharedSecret: ECDSA['getSharedSecret'];\r\n  sign: ECDSA['sign'];\r\n  verify: ECDSA['verify'];\r\n  Point: WeierstrassPointCons<bigint>;\r\n  /** @deprecated use `Point` */\r\n  ProjectivePoint: WeierstrassPointCons<bigint>;\r\n  Signature: ECDSASignatureCons;\r\n  utils: ECDSA['utils'];\r\n  lengths: ECDSA['lengths'];\r\n};\r\n/** @deprecated use `weierstrass` in newer releases */\r\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\r\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\r\n  const Point = weierstrassN(CURVE, curveOpts);\r\n  return _weierstrass_new_output_to_legacy(c, Point);\r\n}\r\nexport type WsPointComposed<T> = {\r\n  CURVE: WeierstrassOpts<T>;\r\n  curveOpts: WeierstrassExtraOpts<T>;\r\n};\r\nexport type WsComposed = {\r\n  /** @deprecated use `Point.CURVE()` */\r\n  CURVE: WeierstrassOpts<bigint>;\r\n  hash: CHash;\r\n  curveOpts: WeierstrassExtraOpts<bigint>;\r\n  ecdsaOpts: ECDSAOpts;\r\n};\r\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\r\n  const CURVE: WeierstrassOpts<T> = {\r\n    a: c.a,\r\n    b: c.b,\r\n    p: c.Fp.ORDER,\r\n    n: c.n,\r\n    h: c.h,\r\n    Gx: c.Gx,\r\n    Gy: c.Gy,\r\n  };\r\n  const Fp = c.Fp;\r\n  let allowedLengths = c.allowedPrivateKeyLengths\r\n    ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l) => Math.ceil(l / 2))))\r\n    : undefined;\r\n  const Fn = Field(CURVE.n, {\r\n    BITS: c.nBitLength,\r\n    allowedLengths: allowedLengths,\r\n    modFromBytes: c.wrapPrivateKey,\r\n  });\r\n  const curveOpts: WeierstrassExtraOpts<T> = {\r\n    Fp,\r\n    Fn,\r\n    allowInfinityPoint: c.allowInfinityPoint,\r\n    endo: c.endo,\r\n    isTorsionFree: c.isTorsionFree,\r\n    clearCofactor: c.clearCofactor,\r\n    fromBytes: c.fromBytes,\r\n    toBytes: c.toBytes,\r\n  };\r\n  return { CURVE, curveOpts };\r\n}\r\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\r\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\r\n  const ecdsaOpts: ECDSAOpts = {\r\n    hmac: c.hmac,\r\n    randomBytes: c.randomBytes,\r\n    lowS: c.lowS,\r\n    bits2int: c.bits2int,\r\n    bits2int_modN: c.bits2int_modN,\r\n  };\r\n  return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };\r\n}\r\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\r\n  /**\r\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\r\n   * @returns y²\r\n   */\r\n  function weierstrassEquation(x: T): T {\r\n    const x2 = Fp.sqr(x); // x * x\r\n    const x3 = Fp.mul(x2, x); // x² * x\r\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\r\n  }\r\n  return weierstrassEquation;\r\n}\r\nfunction _weierstrass_new_output_to_legacy<T>(\r\n  c: CurvePointsType<T>,\r\n  Point: WeierstrassPointCons<T>\r\n): CurvePointsRes<T> {\r\n  const { Fp, Fn } = Point;\r\n  function isWithinCurveOrder(num: bigint): boolean {\r\n    return inRange(num, _1n, Fn.ORDER);\r\n  }\r\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\r\n  return Object.assign(\r\n    {},\r\n    {\r\n      CURVE: c,\r\n      Point: Point,\r\n      ProjectivePoint: Point,\r\n      normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\r\n      weierstrassEquation,\r\n      isWithinCurveOrder,\r\n    }\r\n  );\r\n}\r\nfunction _ecdsa_new_output_to_legacy(c: CurveType, _ecdsa: ECDSA): CurveFn {\r\n  const Point = _ecdsa.Point;\r\n  return Object.assign({}, _ecdsa, {\r\n    ProjectivePoint: Point,\r\n    CURVE: Object.assign({}, c, nLength(Point.Fn.ORDER, Point.Fn.BITS)),\r\n  });\r\n}\r\n\r\n// _ecdsa_legacy\r\nexport function weierstrass(c: CurveType): CurveFn {\r\n  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\r\n  const Point = weierstrassN(CURVE, curveOpts);\r\n  const signs = ecdsa(Point, hash, ecdsaOpts);\r\n  return _ecdsa_new_output_to_legacy(c, signs);\r\n}\r\n", "/**\r\n * Utilities for short weierstrass curves, combined with noble-hashes.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.ts';\r\nimport type { CHash } from './utils.ts';\r\n\r\n/** connects noble-curves to noble-hashes */\r\nexport function getHash(hash: CHash): { hash: CHash } {\r\n  return { hash };\r\n}\r\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\r\nexport type CurveDef = Readonly<Omit<CurveType, 'hash'>>;\r\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\r\n\r\n/** @deprecated use new `weierstrass()` and `ecdsa()` methods */\r\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\r\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, hash: hash });\r\n  return { ...create(defHash), create };\r\n}\r\n", "/**\r\n * Internal module for NIST P256, P384, P521 curves.\r\n * Do not use for now.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2.js';\r\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\r\nimport { createHasher, type H2CHasher } from './abstract/hash-to-curve.ts';\r\nimport { Field } from './abstract/modular.ts';\r\nimport {\r\n  mapToCurveSimpleSWU,\r\n  type WeierstrassOpts,\r\n  type WeierstrassPointCons,\r\n} from './abstract/weierstrass.ts';\r\n\r\n// p = 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n - 1n\r\n// a = Fp256.create(BigInt('-3'));\r\nconst p256_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\r\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\r\n  h: BigInt(1),\r\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\r\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\r\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\r\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\r\n};\r\n\r\n// p = 2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n\r\nconst p384_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt(\r\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'\r\n  ),\r\n  n: BigInt(\r\n    '0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'\r\n  ),\r\n  h: BigInt(1),\r\n  a: BigInt(\r\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc'\r\n  ),\r\n  b: BigInt(\r\n    '0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'\r\n  ),\r\n  Gx: BigInt(\r\n    '0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'\r\n  ),\r\n  Gy: BigInt(\r\n    '0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'\r\n  ),\r\n};\r\n\r\n// p = 2n**521n - 1n\r\nconst p521_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt(\r\n    '0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\r\n  ),\r\n  n: BigInt(\r\n    '0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'\r\n  ),\r\n  h: BigInt(1),\r\n  a: BigInt(\r\n    '0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc'\r\n  ),\r\n  b: BigInt(\r\n    '0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'\r\n  ),\r\n  Gx: BigInt(\r\n    '0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'\r\n  ),\r\n  Gy: BigInt(\r\n    '0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'\r\n  ),\r\n};\r\n\r\nconst Fp256 = Field(p256_CURVE.p);\r\nconst Fp384 = Field(p384_CURVE.p);\r\nconst Fp521 = Field(p521_CURVE.p);\r\ntype SwuOpts = {\r\n  A: bigint;\r\n  B: bigint;\r\n  Z: bigint;\r\n};\r\nfunction createSWU(Point: WeierstrassPointCons<bigint>, opts: SwuOpts) {\r\n  const map = mapToCurveSimpleSWU(Point.Fp, opts);\r\n  return (scalars: bigint[]) => map(scalars[0]);\r\n}\r\n\r\n/** NIST P256 (aka secp256r1, prime256v1) curve, ECDSA and ECDH methods. */\r\nexport const p256: CurveFnWithCreate = createCurve(\r\n  { ...p256_CURVE, Fp: Fp256, lowS: false },\r\n  sha256\r\n);\r\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\r\nexport const p256_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p256.Point,\r\n    createSWU(p256.Point, {\r\n      A: p256_CURVE.a,\r\n      B: p256_CURVE.b,\r\n      Z: p256.Point.Fp.create(BigInt('-10')),\r\n    }),\r\n    {\r\n      DST: 'P256_XMD:SHA-256_SSWU_RO_',\r\n      encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\r\n      p: p256_CURVE.p,\r\n      m: 1,\r\n      k: 128,\r\n      expand: 'xmd',\r\n      hash: sha256,\r\n    }\r\n  );\r\n})();\r\n\r\n// export const p256_oprf: OPRF = createORPF({\r\n//   name: 'P256-SHA256',\r\n//   Point: p256.Point,\r\n//   hash: sha256,\r\n//   hashToGroup: p256_hasher.hashToCurve,\r\n//   hashToScalar: p256_hasher.hashToScalar,\r\n// });\r\n\r\n/** NIST P384 (aka secp384r1) curve, ECDSA and ECDH methods. */\r\nexport const p384: CurveFnWithCreate = createCurve(\r\n  { ...p384_CURVE, Fp: Fp384, lowS: false },\r\n  sha384\r\n);\r\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\r\nexport const p384_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p384.Point,\r\n    createSWU(p384.Point, {\r\n      A: p384_CURVE.a,\r\n      B: p384_CURVE.b,\r\n      Z: p384.Point.Fp.create(BigInt('-12')),\r\n    }),\r\n    {\r\n      DST: 'P384_XMD:SHA-384_SSWU_RO_',\r\n      encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\r\n      p: p384_CURVE.p,\r\n      m: 1,\r\n      k: 192,\r\n      expand: 'xmd',\r\n      hash: sha384,\r\n    }\r\n  );\r\n})();\r\n\r\n// export const p384_oprf: OPRF = createORPF({\r\n//   name: 'P384-SHA384',\r\n//   Point: p384.Point,\r\n//   hash: sha384,\r\n//   hashToGroup: p384_hasher.hashToCurve,\r\n//   hashToScalar: p384_hasher.hashToScalar,\r\n// });\r\n\r\n// const Fn521 = Field(p521_CURVE.n, { allowedScalarLengths: [65, 66] });\r\n/** NIST P521 (aka secp521r1) curve, ECDSA and ECDH methods. */\r\nexport const p521: CurveFnWithCreate = createCurve(\r\n  { ...p521_CURVE, Fp: Fp521, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] },\r\n  sha512\r\n);\r\n\r\n/** @deprecated use `p256` for consistency with `p256_hasher` */\r\nexport const secp256r1: typeof p256 = p256;\r\n/** @deprecated use `p384` for consistency with `p384_hasher` */\r\nexport const secp384r1: typeof p384 = p384;\r\n/** @deprecated use `p521` for consistency with `p521_hasher` */\r\nexport const secp521r1: typeof p521 = p521;\r\n\r\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\r\nexport const p521_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() => {\r\n  return createHasher(\r\n    p521.Point,\r\n    createSWU(p521.Point, {\r\n      A: p521_CURVE.a,\r\n      B: p521_CURVE.b,\r\n      Z: p521.Point.Fp.create(BigInt('-4')),\r\n    }),\r\n    {\r\n      DST: 'P521_XMD:SHA-512_SSWU_RO_',\r\n      encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\r\n      p: p521_CURVE.p,\r\n      m: 1,\r\n      k: 256,\r\n      expand: 'xmd',\r\n      hash: sha512,\r\n    }\r\n  );\r\n})();\r\n\r\n// export const p521_oprf: OPRF = createORPF({\r\n//   name: 'P521-SHA512',\r\n//   Point: p521.Point,\r\n//   hash: sha512,\r\n//   hashToGroup: p521_hasher.hashToCurve,\r\n//   hashToScalar: p521_hasher.hashToScalar, // produces L=98 just like in RFC\r\n// });\r\n", "/**\r\n * NIST secp256r1 aka p256.\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { type H2CMethod } from './abstract/hash-to-curve.ts';\r\nimport { p256_hasher, p256 as p256n } from './nist.ts';\r\n/** @deprecated use `import { p256 } from '@noble/curves/nist.js';` */\r\nexport const p256: typeof p256n = p256n;\r\n/** @deprecated use `import { p256 } from '@noble/curves/nist.js';` */\r\nexport const secp256r1: typeof p256n = p256n;\r\n/** @deprecated use `import { p256_hasher } from '@noble/curves/nist.js';` */\r\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.hashToCurve)();\r\n/** @deprecated use `import { p256_hasher } from '@noble/curves/nist.js';` */\r\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.encodeToCurve)();\r\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport { PublicKey, bytesEqual } from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport type { SerializedSignature } from '../../cryptography/signature.js';\nimport {\n\tSIGNATURE_SCHEME_TO_FLAG,\n\tparseSerializedSignature,\n} from '../../cryptography/signature.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { secp256r1 } from '@noble/curves/p256';\n\nconst SECP256R1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256r1 public key\n */\nexport class Secp256r1PublicKey extends PublicKey {\n\tstatic SIZE = SECP256R1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256r1PublicKey object\n\t * @param value secp256r1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256R1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256R1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256r1 public keys are equal\n\t */\n\toverride equals(publicKey: Secp256r1PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256r1 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256r1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256r1'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | SerializedSignature): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'Secp256r1') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn secp256r1.verify(\n\t\t\tsecp256r1.Signature.fromCompact(bytes),\n\t\t\tsha256(message),\n\t\t\tthis.toRawBytes(),\n\t\t);\n\t}\n}\n", "/**\r\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\r\n *\r\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\r\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\r\n * @module\r\n */\r\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256 } from '@noble/hashes/sha2.js';\r\nimport { randomBytes } from '@noble/hashes/utils.js';\r\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\r\nimport type { CurveLengths } from './abstract/curve.ts';\r\nimport {\r\n  createHasher,\r\n  type H2CHasher,\r\n  type H2CMethod,\r\n  isogenyMap,\r\n} from './abstract/hash-to-curve.ts';\r\nimport { Field, mapHashToField, mod, pow2 } from './abstract/modular.ts';\r\nimport {\r\n  _normFnElement,\r\n  type EndomorphismOpts,\r\n  mapToCurveSimpleSWU,\r\n  type WeierstrassPoint as PointType,\r\n  type WeierstrassOpts,\r\n  type WeierstrassPointCons,\r\n} from './abstract/weierstrass.ts';\r\nimport type { Hex, PrivKey } from './utils.ts';\r\nimport {\r\n  bytesToNumberBE,\r\n  concatBytes,\r\n  ensureBytes,\r\n  inRange,\r\n  numberToBytesBE,\r\n  utf8ToBytes,\r\n} from './utils.ts';\r\n\r\n// Seems like generator was produced from some seed:\r\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\r\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\r\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\r\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\r\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\r\n  h: BigInt(1),\r\n  a: BigInt(0),\r\n  b: BigInt(7),\r\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\r\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\r\n};\r\n\r\nconst secp256k1_ENDO: EndomorphismOpts = {\r\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\r\n  basises: [\r\n    [BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')],\r\n    [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')],\r\n  ],\r\n};\r\n\r\nconst _0n = /* @__PURE__ */ BigInt(0);\r\nconst _1n = /* @__PURE__ */ BigInt(1);\r\nconst _2n = /* @__PURE__ */ BigInt(2);\r\n\r\n/**\r\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\r\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\r\n */\r\nfunction sqrtMod(y: bigint): bigint {\r\n  const P = secp256k1_CURVE.p;\r\n  // prettier-ignore\r\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\r\n  // prettier-ignore\r\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\r\n  const b2 = (y * y * y) % P; // x^3, 11\r\n  const b3 = (b2 * b2 * y) % P; // x^7\r\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\r\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\r\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\r\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\r\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\r\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\r\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\r\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\r\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\r\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\r\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\r\n  const root = pow2(t2, _2n, P);\r\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\r\n  return root;\r\n}\r\n\r\nconst Fpk1 = Field(secp256k1_CURVE.p, { sqrt: sqrtMod });\r\n\r\n/**\r\n * secp256k1 curve, ECDSA and ECDH methods.\r\n *\r\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\r\n *\r\n * @example\r\n * ```js\r\n * import { secp256k1 } from '@noble/curves/secp256k1';\r\n * const { secretKey, publicKey } = secp256k1.keygen();\r\n * const msg = new TextEncoder().encode('hello');\r\n * const sig = secp256k1.sign(msg, secretKey);\r\n * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\r\n * ```\r\n */\r\nexport const secp256k1: CurveFnWithCreate = createCurve(\r\n  { ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO },\r\n  sha256\r\n);\r\n\r\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\r\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\r\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\r\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\r\n  let tagP = TAGGED_HASH_PREFIXES[tag];\r\n  if (tagP === undefined) {\r\n    const tagH = sha256(utf8ToBytes(tag));\r\n    tagP = concatBytes(tagH, tagH);\r\n    TAGGED_HASH_PREFIXES[tag] = tagP;\r\n  }\r\n  return sha256(concatBytes(tagP, ...messages));\r\n}\r\n\r\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\r\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\r\nconst Pointk1 = /* @__PURE__ */ (() => secp256k1.Point)();\r\nconst hasEven = (y: bigint) => y % _2n === _0n;\r\n\r\n// Calculate point, scalar and bytes\r\nfunction schnorrGetExtPubKey(priv: PrivKey) {\r\n  const { Fn, BASE } = Pointk1;\r\n  const d_ = _normFnElement(Fn, priv);\r\n  const p = BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\r\n  const scalar = hasEven(p.y) ? d_ : Fn.neg(d_);\r\n  return { scalar, bytes: pointToBytes(p) };\r\n}\r\n/**\r\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\r\n * @returns valid point checked for being on-curve\r\n */\r\nfunction lift_x(x: bigint): PointType<bigint> {\r\n  const Fp = Fpk1;\r\n  if (!Fp.isValidNot0(x)) throw new Error('invalid x: Fail if x ≥ p');\r\n  const xx = Fp.create(x * x);\r\n  const c = Fp.create(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\r\n  let y = Fp.sqrt(c); // Let y = c^(p+1)/4 mod p. Same as sqrt().\r\n  // Return the unique point P such that x(P) = x and\r\n  // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\r\n  if (!hasEven(y)) y = Fp.neg(y);\r\n  const p = Pointk1.fromAffine({ x, y });\r\n  p.assertValidity();\r\n  return p;\r\n}\r\nconst num = bytesToNumberBE;\r\n/**\r\n * Create tagged hash, convert it to bigint, reduce modulo-n.\r\n */\r\nfunction challenge(...args: Uint8Array[]): bigint {\r\n  return Pointk1.Fn.create(num(taggedHash('BIP0340/challenge', ...args)));\r\n}\r\n\r\n/**\r\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\r\n */\r\nfunction schnorrGetPublicKey(secretKey: Hex): Uint8Array {\r\n  return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\r\n}\r\n\r\n/**\r\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\r\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\r\n */\r\nfunction schnorrSign(message: Hex, secretKey: PrivKey, auxRand: Hex = randomBytes(32)): Uint8Array {\r\n  const { Fn } = Pointk1;\r\n  const m = ensureBytes('message', message);\r\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\r\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\r\n  const t = Fn.toBytes(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\r\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\r\n  // Let k' = int(rand) mod n. Fail if k' = 0. Let R = k'⋅G\r\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(rand);\r\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\r\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\r\n  sig.set(rx, 0);\r\n  sig.set(Fn.toBytes(Fn.create(k + e * d)), 32);\r\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\r\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\r\n  return sig;\r\n}\r\n\r\n/**\r\n * Verifies Schnorr signature.\r\n * Will swallow errors & return false except for initial type validation of arguments.\r\n */\r\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\r\n  const { Fn, BASE } = Pointk1;\r\n  const sig = ensureBytes('signature', signature, 64);\r\n  const m = ensureBytes('message', message);\r\n  const pub = ensureBytes('publicKey', publicKey, 32);\r\n  try {\r\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\r\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\r\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\r\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\r\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\r\n    // int(challenge(bytes(r)||bytes(P)||m))%n\r\n    const e = challenge(Fn.toBytes(r), pointToBytes(P), m);\r\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\r\n    const R = BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(Fn.neg(e)));\r\n    const { x, y } = R.toAffine();\r\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\r\n    if (R.is0() || !hasEven(y) || x !== r) return false;\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport type SecpSchnorr = {\r\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\r\n  getPublicKey: typeof schnorrGetPublicKey;\r\n  sign: typeof schnorrSign;\r\n  verify: typeof schnorrVerify;\r\n  Point: WeierstrassPointCons<bigint>;\r\n  utils: {\r\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\r\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\r\n    lift_x: typeof lift_x;\r\n    taggedHash: typeof taggedHash;\r\n\r\n    /** @deprecated use `randomSecretKey` */\r\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\r\n    /** @deprecated use `utils` */\r\n    numberToBytesBE: typeof numberToBytesBE;\r\n    /** @deprecated use `utils` */\r\n    bytesToNumberBE: typeof bytesToNumberBE;\r\n    /** @deprecated use `modular` */\r\n    mod: typeof mod;\r\n  };\r\n  lengths: CurveLengths;\r\n};\r\n/**\r\n * Schnorr signatures over secp256k1.\r\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\n * @example\r\n * ```js\r\n * import { schnorr } from '@noble/curves/secp256k1';\r\n * const { secretKey, publicKey } = schnorr.keygen();\r\n * // const publicKey = schnorr.getPublicKey(secretKey);\r\n * const msg = new TextEncoder().encode('hello');\r\n * const sig = schnorr.sign(msg, secretKey);\r\n * const isValid = schnorr.verify(sig, msg, publicKey);\r\n * ```\r\n */\r\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => {\r\n  const size = 32;\r\n  const seedLength = 48;\r\n  const randomSecretKey = (seed = randomBytes(seedLength)): Uint8Array => {\r\n    return mapHashToField(seed, secp256k1_CURVE.n);\r\n  };\r\n  // TODO: remove\r\n  secp256k1.utils.randomSecretKey;\r\n  function keygen(seed?: Uint8Array) {\r\n    const secretKey = randomSecretKey(seed);\r\n    return { secretKey, publicKey: schnorrGetPublicKey(secretKey) };\r\n  }\r\n  return {\r\n    keygen,\r\n    getPublicKey: schnorrGetPublicKey,\r\n    sign: schnorrSign,\r\n    verify: schnorrVerify,\r\n    Point: Pointk1,\r\n    utils: {\r\n      randomSecretKey: randomSecretKey,\r\n      randomPrivateKey: randomSecretKey,\r\n      taggedHash,\r\n\r\n      // TODO: remove\r\n      lift_x,\r\n      pointToBytes,\r\n      numberToBytesBE,\r\n      bytesToNumberBE,\r\n      mod,\r\n    },\r\n    lengths: {\r\n      secretKey: size,\r\n      publicKey: size,\r\n      publicKeyHasPrefix: false,\r\n      signature: size * 2,\r\n      seed: seedLength,\r\n    },\r\n  };\r\n})();\r\n\r\nconst isoMap = /* @__PURE__ */ (() =>\r\n  isogenyMap(\r\n    Fpk1,\r\n    [\r\n      // xNum\r\n      [\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\r\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\r\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\r\n      ],\r\n      // xDen\r\n      [\r\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\r\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n      // yNum\r\n      [\r\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\r\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\r\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\r\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\r\n      ],\r\n      // yDen\r\n      [\r\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\r\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\r\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\r\n  ))();\r\nconst mapSWU = /* @__PURE__ */ (() =>\r\n  mapToCurveSimpleSWU(Fpk1, {\r\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\r\n    B: BigInt('1771'),\r\n    Z: Fpk1.create(BigInt('-11')),\r\n  }))();\r\n\r\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\r\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\r\n  createHasher(\r\n    secp256k1.Point,\r\n    (scalars: bigint[]) => {\r\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\r\n      return isoMap(x, y);\r\n    },\r\n    {\r\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\r\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\r\n      p: Fpk1.ORDER,\r\n      m: 1,\r\n      k: 128,\r\n      expand: 'xmd',\r\n      hash: sha256,\r\n    }\r\n  ))();\r\n\r\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\r\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\r\n  secp256k1_hasher.hashToCurve)();\r\n\r\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\r\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\r\n  secp256k1_hasher.encodeToCurve)();\r\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport { PublicKey, bytesEqual } from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport type { SerializedSignature } from '../../cryptography/signature.js';\nimport {\n\tSIGNATURE_SCHEME_TO_FLAG,\n\tparseSerializedSignature,\n} from '../../cryptography/signature.js';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey extends PublicKey {\n\tstatic SIZE = SECP256K1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256k1PublicKey object\n\t * @param value secp256k1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256k1 public keys are equal\n\t */\n\toverride equals(publicKey: Secp256k1PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256k1 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256k1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256k1'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | SerializedSignature): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'Secp256k1') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn secp256k1.verify(\n\t\t\tsecp256k1.Signature.fromCompact(bytes),\n\t\t\tsha256(message),\n\t\t\tthis.toRawBytes(),\n\t\t);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { PublicKey, bytesEqual } from '../../cryptography/publickey.js';\nimport type { SerializedSignature } from '../../cryptography/signature.js';\nimport {\n\tSIGNATURE_SCHEME_TO_FLAG,\n\tparseSerializedSignature,\n} from '../../cryptography/signature.js';\nimport nacl from 'tweetnacl';\n\nconst PUBLIC_KEY_SIZE = 32;\n\n/**\n * An Ed25519 public key\n */\nexport class Ed25519PublicKey extends PublicKey {\n\tstatic SIZE = PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Ed25519PublicKey object\n\t * @param value ed25519 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Ed25519 public keys are equal\n\t */\n\toverride equals(publicKey: Ed25519PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Ed25519 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['ED25519'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | SerializedSignature): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'ED25519') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn nacl.sign.detached.verify(message, bytes, this.toRawBytes());\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { SerializedSignature, SignatureScheme } from './signature.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from './signature.js';\nimport type { SignaturePubkeyPair } from './utils.js';\n// eslint-disable-next-line import/no-cycle\nimport { toSingleSignaturePubkeyPair } from './utils.js';\nimport type { PublicKey } from './publickey.js';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nimport { Ed25519PublicKey } from '../keypairs/ed25519/publickey.js';\nimport { Secp256k1PublicKey } from '../keypairs/secp256k1/publickey.js';\nimport { Secp256r1PublicKey } from '../keypairs/secp256r1/publickey.js';\nimport { builder } from '../builder/bcs.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\n\nexport type PubkeyWeightPair = {\n\tpubKey: PublicKey;\n\tweight: number;\n};\n\nexport type CompressedSignature =\n\t| { ED25519: number[] }\n\t| { Secp256k1: number[] }\n\t| { Secp256r1: number[] };\n\nexport type PublicKeyEnum =\n\t| { ED25519: number[] }\n\t| { Secp256k1: number[] }\n\t| { Secp256r1: number[] };\n\nexport type PubkeyEnumWeightPair = {\n\tpubKey: PublicKeyEnum;\n\tweight: number;\n};\n\nexport type MultiSigPublicKey = {\n\tpk_map: PubkeyEnumWeightPair[];\n\tthreshold: number;\n};\n\nexport type MultiSig = {\n\tsigs: CompressedSignature[];\n\tbitmap: number;\n\tmultisig_pk: MultiSigPublicKey;\n};\n\nexport const MAX_SIGNER_IN_MULTISIG = 10;\n\n/// Derives a multisig address from a list of pk and weights and threshold.\n// It is the 32-byte Blake2b hash of the serializd bytes of `flag_MultiSig || threshold || flag_1 || pk_1 || weight_1\n/// || ... || flag_n || pk_n || weight_n`\nexport function toMultiSigAddress(pks: PubkeyWeightPair[], threshold: number): string {\n\tif (pks.length > MAX_SIGNER_IN_MULTISIG) {\n\t\tthrow new Error(`Max number of signers in a multisig is ${MAX_SIGNER_IN_MULTISIG}`);\n\t}\n\t// max length = 1 flag byte + (max pk size + max weight size (u8)) * max signer size + 2 threshold bytes (u16)\n\tlet maxLength = 1 + (64 + 1) * MAX_SIGNER_IN_MULTISIG + 2;\n\tlet tmp = new Uint8Array(maxLength);\n\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['MultiSig']]);\n\n\tlet arr = to_uint8array(threshold);\n\ttmp.set(arr, 1);\n\tlet i = 3;\n\tfor (const pk of pks) {\n\t\ttmp.set([pk.pubKey.flag()], i);\n\t\ttmp.set(pk.pubKey.toRawBytes(), i + 1);\n\t\ttmp.set([pk.weight], i + 1 + pk.pubKey.toRawBytes().length);\n\t\ti += pk.pubKey.toRawBytes().length + 2;\n\t}\n\treturn normalizeSuiAddress(bytesToHex(blake2b(tmp.slice(0, i), { dkLen: 32 })));\n}\n\n/// Combine a list of serialized sigs, a list of pk weight pairs\n/// and threshold into a single multisig. `sigs` are required to\n/// be in the same order as `pks`. e.g. for [pk1, pk2, pk3, pk4, pk5],\n/// [sig1, sig2, sig5] is valid, but [sig2, sig1, sig5] is invalid.\nexport function combinePartialSigs(\n\tsigs: SerializedSignature[],\n\tpks: PubkeyWeightPair[],\n\tthreshold: number,\n): SerializedSignature {\n\tlet multisig_pk: MultiSigPublicKey = {\n\t\tpk_map: pks.map((x) => toPkWeightPair(x)),\n\t\tthreshold: threshold,\n\t};\n\n\tlet bitmap = 0;\n\tlet compressed_sigs: CompressedSignature[] = new Array(sigs.length);\n\tfor (let i = 0; i < sigs.length; i++) {\n\t\tlet parsed = toSingleSignaturePubkeyPair(sigs[i]);\n\t\tlet bytes = Array.from(parsed.signature.map((x) => Number(x)));\n\t\tif (parsed.signatureScheme === 'ED25519') {\n\t\t\tcompressed_sigs[i] = { ED25519: bytes };\n\t\t} else if (parsed.signatureScheme === 'Secp256k1') {\n\t\t\tcompressed_sigs[i] = { Secp256k1: bytes };\n\t\t} else if (parsed.signatureScheme === 'Secp256r1') {\n\t\t\tcompressed_sigs[i] = { Secp256r1: bytes };\n\t\t}\n\t\tfor (let j = 0; j < pks.length; j++) {\n\t\t\tif (parsed.pubKey.equals(pks[j].pubKey)) {\n\t\t\t\tbitmap |= 1 << j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tlet multisig: MultiSig = {\n\t\tsigs: compressed_sigs,\n\t\tbitmap,\n\t\tmultisig_pk,\n\t};\n\n\tconst bytes = builder.ser('MultiSig', multisig).toBytes();\n\tlet tmp = new Uint8Array(bytes.length + 1);\n\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['MultiSig']]);\n\ttmp.set(bytes, 1);\n\treturn toB64(tmp);\n}\n\n/// Decode a multisig signature into a list of signatures, public keys and flags.\nexport function decodeMultiSig(signature: string): SignaturePubkeyPair[] {\n\tconst parsed = fromB64(signature);\n\tif (parsed.length < 1 || parsed[0] !== SIGNATURE_SCHEME_TO_FLAG['MultiSig']) {\n\t\tthrow new Error('Invalid MultiSig flag');\n\t}\n\tconst multisig: MultiSig = builder.de('MultiSig', parsed.slice(1));\n\tlet res: SignaturePubkeyPair[] = new Array(multisig.sigs.length);\n\tfor (let i = 0; i < multisig.sigs.length; i++) {\n\t\tlet s: CompressedSignature = multisig.sigs[i];\n\t\tlet pk_index = as_indices(multisig.bitmap).at(i);\n\t\tlet pk_bytes = Object.values(multisig.multisig_pk.pk_map[pk_index as number].pubKey)[0];\n\t\tconst scheme = Object.keys(s)[0] as SignatureScheme;\n\n\t\tif (scheme === 'MultiSig') {\n\t\t\tthrow new Error('MultiSig is not supported inside MultiSig');\n\t\t}\n\n\t\tconst SIGNATURE_SCHEME_TO_PUBLIC_KEY = {\n\t\t\tED25519: Ed25519PublicKey,\n\t\t\tSecp256k1: Secp256k1PublicKey,\n\t\t\tSecp256r1: Secp256r1PublicKey,\n\t\t};\n\n\t\tconst PublicKey = SIGNATURE_SCHEME_TO_PUBLIC_KEY[scheme];\n\n\t\tres[i] = {\n\t\t\tsignatureScheme: scheme,\n\t\t\tsignature: Uint8Array.from(Object.values(s)[0]),\n\t\t\tpubKey: new PublicKey(pk_bytes),\n\t\t\tweight: multisig.multisig_pk.pk_map[pk_index as number].weight,\n\t\t};\n\t}\n\treturn res;\n}\n\nfunction toPkWeightPair(pair: PubkeyWeightPair): PubkeyEnumWeightPair {\n\tlet pk_bytes = Array.from(pair.pubKey.toBytes().map((x) => Number(x)));\n\tswitch (pair.pubKey.flag()) {\n\t\tcase SIGNATURE_SCHEME_TO_FLAG['Secp256k1']:\n\t\t\treturn {\n\t\t\t\tpubKey: {\n\t\t\t\t\tSecp256k1: pk_bytes,\n\t\t\t\t},\n\t\t\t\tweight: pair.weight,\n\t\t\t};\n\t\tcase SIGNATURE_SCHEME_TO_FLAG['Secp256r1']:\n\t\t\treturn {\n\t\t\t\tpubKey: {\n\t\t\t\t\tSecp256r1: pk_bytes,\n\t\t\t\t},\n\t\t\t\tweight: pair.weight,\n\t\t\t};\n\t\tcase SIGNATURE_SCHEME_TO_FLAG['ED25519']:\n\t\t\treturn {\n\t\t\t\tpubKey: {\n\t\t\t\t\tED25519: pk_bytes,\n\t\t\t\t},\n\t\t\t\tweight: pair.weight,\n\t\t\t};\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported signature scheme');\n\t}\n}\n\n/// Convert u16 to Uint8Array of length 2 in little endian.\nfunction to_uint8array(threshold: number): Uint8Array {\n\tif (threshold < 0 || threshold > 65535) {\n\t\tthrow new Error('Invalid threshold');\n\t}\n\tlet arr = new Uint8Array(2);\n\tarr[0] = threshold & 0xff;\n\tarr[1] = threshold >> 8;\n\treturn arr;\n}\n\nfunction as_indices(bitmap: number): Uint8Array {\n\tif (bitmap < 0 || bitmap > 1024) {\n\t\tthrow new Error('Invalid bitmap');\n\t}\n\tlet res: number[] = [];\n\tfor (let i = 0; i < 10; i++) {\n\t\tif ((bitmap & (1 << i)) !== 0) {\n\t\t\tres.push(i);\n\t\t}\n\t}\n\treturn Uint8Array.from(res);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from 'tweetnacl';\nimport type { ExportedKeypair } from '../../cryptography/keypair.js';\nimport { Ed25519PublicKey } from './publickey.js';\nimport { isValidHardenedPath, mnemonicToSeedHex } from '../../cryptography/mnemonics.js';\nimport { derivePath } from './ed25519-hd-key.js';\nimport { toB64 } from '@mysten/bcs';\nimport type { SignatureScheme } from '../../cryptography/signature.js';\nimport { PRIVATE_KEY_SIZE, Keypair } from '../../cryptography/keypair.js';\n\nexport const DEFAULT_ED25519_DERIVATION_PATH = \"m/44'/784'/0'/0'/0'\";\n\n/**\n * Ed25519 Keypair data. The publickey is the 32-byte public key and\n * the secretkey is 64-byte, where the first 32 bytes is the secret\n * key and the last 32 bytes is the public key.\n */\nexport interface Ed25519KeypairData {\n\tpublicKey: Uint8Array;\n\tsecretKey: Uint8Array;\n}\n\n/**\n * An Ed25519 Keypair used for signing transactions.\n */\nexport class Ed25519Keypair extends Keypair {\n\tprivate keypair: Ed25519KeypairData;\n\n\t/**\n\t * Create a new Ed25519 keypair instance.\n\t * Generate random keypair if no {@link Ed25519Keypair} is provided.\n\t *\n\t * @param keypair Ed25519 keypair\n\t */\n\tconstructor(keypair?: Ed25519KeypairData) {\n\t\tsuper();\n\t\tif (keypair) {\n\t\t\tthis.keypair = keypair;\n\t\t} else {\n\t\t\tthis.keypair = nacl.sign.keyPair();\n\t\t}\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair ED25519\n\t */\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'ED25519';\n\t}\n\n\t/**\n\t * Generate a new random Ed25519 keypair\n\t */\n\tstatic generate(): Ed25519Keypair {\n\t\treturn new Ed25519Keypair(nacl.sign.keyPair());\n\t}\n\n\t/**\n\t * Create a Ed25519 keypair from a raw secret key byte array, also known as seed.\n\t * This is NOT the private scalar which is result of hashing and bit clamping of\n\t * the raw secret key.\n\t *\n\t * The sui.keystore key is a list of Base64 encoded `flag || privkey`. To import\n\t * a key from sui.keystore to typescript, decode from base64 and remove the first\n\t * flag byte after checking it is indeed the Ed25519 scheme flag 0x00 (See more\n\t * on flag for signature scheme: https://github.com/MystenLabs/sui/blob/818406c5abdf7de1b80915a0519071eec3a5b1c7/crates/sui-types/src/crypto.rs#L1650):\n\t * ```\n\t * import { Ed25519Keypair, fromB64 } from '@mysten/sui.js';\n\t * const raw = fromB64(t[1]);\n\t * if (raw[0] !== 0 || raw.length !== PRIVATE_KEY_SIZE + 1) {\n\t *   throw new Error('invalid key');\n\t * }\n\t * const imported = Ed25519Keypair.fromSecretKey(raw.slice(1))\n\t * ```\n\t * @throws error if the provided secret key is invalid and validation is not skipped.\n\t *\n\t * @param secretKey secret key byte array\n\t * @param options: skip secret key validation\n\t */\n\tstatic fromSecretKey(\n\t\tsecretKey: Uint8Array,\n\t\toptions?: { skipValidation?: boolean },\n\t): Ed25519Keypair {\n\t\tconst secretKeyLength = secretKey.length;\n\t\tif (secretKeyLength !== PRIVATE_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Wrong secretKey size. Expected ${PRIVATE_KEY_SIZE} bytes, got ${secretKeyLength}.`,\n\t\t\t);\n\t\t}\n\t\tconst keypair = nacl.sign.keyPair.fromSeed(secretKey);\n\t\tif (!options || !options.skipValidation) {\n\t\t\tconst encoder = new TextEncoder();\n\t\t\tconst signData = encoder.encode('sui validation');\n\t\t\tconst signature = nacl.sign.detached(signData, keypair.secretKey);\n\t\t\tif (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n\t\t\t\tthrow new Error('provided secretKey is invalid');\n\t\t\t}\n\t\t}\n\t\treturn new Ed25519Keypair(keypair);\n\t}\n\n\t/**\n\t * The public key for this Ed25519 keypair\n\t */\n\tgetPublicKey(): Ed25519PublicKey {\n\t\treturn new Ed25519PublicKey(this.keypair.publicKey);\n\t}\n\n\tasync sign(data: Uint8Array) {\n\t\treturn this.signData(data);\n\t}\n\n\t/**\n\t * Return the signature for the provided data using Ed25519.\n\t */\n\tsignData(data: Uint8Array): Uint8Array {\n\t\treturn nacl.sign.detached(data, this.keypair.secretKey);\n\t}\n\n\t/**\n\t * Derive Ed25519 keypair from mnemonics and path. The mnemonics must be normalized\n\t * and validated against the english wordlist.\n\t *\n\t * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must\n\t * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n\t */\n\tstatic deriveKeypair(mnemonics: string, path?: string): Ed25519Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_ED25519_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidHardenedPath(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\tconst { key } = derivePath(path, mnemonicToSeedHex(mnemonics));\n\n\t\treturn Ed25519Keypair.fromSecretKey(key);\n\t}\n\n\t/**\n\t * Derive Ed25519 keypair from mnemonicSeed and path.\n\t *\n\t * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must\n\t * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n\t */\n\tstatic deriveKeypairFromSeed(seedHex: string, path?: string): Ed25519Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_ED25519_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidHardenedPath(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\tconst { key } = derivePath(path, seedHex);\n\n\t\treturn Ed25519Keypair.fromSecretKey(key);\n\t}\n\n\t/**\n\t * This returns an exported keypair object, the private key field is the pure 32-byte seed.\n\t */\n\texport(): ExportedKeypair {\n\t\treturn {\n\t\t\tschema: 'ED25519',\n\t\t\tprivateKey: toB64(this.keypair.secretKey.slice(0, PRIVATE_KEY_SIZE)),\n\t\t};\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { toHEX } from '@mysten/bcs';\nimport { mnemonicToSeedSync as bip39MnemonicToSeedSync } from '@scure/bip39';\n\n/**\n * Parse and validate a path that is compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n *\n * @param path path string (e.g. `m/44'/784'/0'/0'/0'`).\n */\nexport function isValidHardenedPath(path: string): boolean {\n\tif (!new RegExp(\"^m\\\\/44'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+'\\\\/[0-9]+'+$\").test(path)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Parse and validate a path that is compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}\n * for Secp256k1 and m/74'/784'/{account_index}'/{change_index}/{address_index} for Secp256r1.\n *\n * Note that the purpose for Secp256k1 is registered as 54, to differentiate from Ed25519 with purpose 44.\n *\n * @param path path string (e.g. `m/54'/784'/0'/0/0`).\n */\nexport function isValidBIP32Path(path: string): boolean {\n\tif (!new RegExp(\"^m\\\\/(54|74)'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+\\\\/[0-9]+$\").test(path)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Uses KDF to derive 64 bytes of key data from mnemonic with empty password.\n *\n * @param mnemonics 12 words string split by spaces.\n */\nexport function mnemonicToSeed(mnemonics: string): Uint8Array {\n\treturn bip39MnemonicToSeedSync(mnemonics, '');\n}\n\n/**\n * Derive the seed in hex format from a 12-word mnemonic string.\n *\n * @param mnemonics 12 words string split by spaces.\n */\nexport function mnemonicToSeedHex(mnemonics: string): string {\n\treturn toHEX(mnemonicToSeed(mnemonics));\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This is adapted from https://github.com/alepop/ed25519-hd-key replacing create-hmac\n// with @noble/hashes to be browser compatible.\n\nimport { sha512 } from '@noble/hashes/sha512';\nimport { hmac } from '@noble/hashes/hmac';\nimport nacl from 'tweetnacl';\nimport { fromHEX } from '@mysten/bcs';\n\ntype Hex = string;\ntype Path = string;\n\ntype Keys = {\n\tkey: Uint8Array;\n\tchainCode: Uint8Array;\n};\n\nconst ED25519_CURVE = 'ed25519 seed';\nconst HARDENED_OFFSET = 0x80000000;\n\nexport const pathRegex = new RegExp(\"^m(\\\\/[0-9]+')+$\");\n\nexport const replaceDerive = (val: string): string => val.replace(\"'\", '');\n\nexport const getMasterKeyFromSeed = (seed: Hex): Keys => {\n\tconst h = hmac.create(sha512, ED25519_CURVE);\n\tconst I = h.update(fromHEX(seed)).digest();\n\tconst IL = I.slice(0, 32);\n\tconst IR = I.slice(32);\n\treturn {\n\t\tkey: IL,\n\t\tchainCode: IR,\n\t};\n};\n\nconst CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\n\tconst indexBuffer = new ArrayBuffer(4);\n\tconst cv = new DataView(indexBuffer);\n\tcv.setUint32(0, index);\n\n\tconst data = new Uint8Array(1 + key.length + indexBuffer.byteLength);\n\tdata.set(new Uint8Array(1).fill(0));\n\tdata.set(key, 1);\n\tdata.set(new Uint8Array(indexBuffer, 0, indexBuffer.byteLength), key.length + 1);\n\n\tconst I = hmac.create(sha512, chainCode).update(data).digest();\n\tconst IL = I.slice(0, 32);\n\tconst IR = I.slice(32);\n\treturn {\n\t\tkey: IL,\n\t\tchainCode: IR,\n\t};\n};\n\nexport const getPublicKey = (privateKey: Uint8Array, withZeroByte = true): Uint8Array => {\n\tconst keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n\tconst signPk = keyPair.secretKey.subarray(32);\n\tconst newArr = new Uint8Array(signPk.length + 1);\n\tnewArr.set([0]);\n\tnewArr.set(signPk, 1);\n\treturn withZeroByte ? newArr : signPk;\n};\n\nexport const isValidPath = (path: string): boolean => {\n\tif (!pathRegex.test(path)) {\n\t\treturn false;\n\t}\n\treturn !path\n\t\t.split('/')\n\t\t.slice(1)\n\t\t.map(replaceDerive)\n\t\t.some(isNaN as any /* ts T_T*/);\n};\n\nexport const derivePath = (path: Path, seed: Hex, offset = HARDENED_OFFSET): Keys => {\n\tif (!isValidPath(path)) {\n\t\tthrow new Error('Invalid derivation path');\n\t}\n\n\tconst { key, chainCode } = getMasterKeyFromSeed(seed);\n\tconst segments = path\n\t\t.split('/')\n\t\t.slice(1)\n\t\t.map(replaceDerive)\n\t\t.map((el) => parseInt(el, 10));\n\n\treturn segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n\t\tkey,\n\t\tchainCode,\n\t});\n};\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { PublicKey } from './publickey.js';\nimport type { SerializedSignature } from './signature.js';\nimport { toSerializedSignature } from './signature.js';\nimport type { SignatureScheme } from './signature.js';\nimport { IntentScope, messageWithIntent } from './intent.js';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bcs } from '../bcs/index.js';\n\nexport const PRIVATE_KEY_SIZE = 32;\nexport const LEGACY_PRIVATE_KEY_SIZE = 64;\n\nexport type ExportedKeypair = {\n\tschema: SignatureScheme;\n\tprivateKey: string;\n};\n\ninterface SignedMessage {\n\tbytes: Uint8Array;\n\tsignature: SerializedSignature;\n}\n\n/**\n * TODO: Document\n */\nexport abstract class BaseSigner {\n\tabstract sign(bytes: Uint8Array): Promise<Uint8Array>;\n\n\tasync signWithIntent(bytes: Uint8Array, intent: IntentScope): Promise<SignedMessage> {\n\t\tconst intentMessage = messageWithIntent(intent, bytes);\n\t\tconst digest = blake2b(intentMessage, { dkLen: 32 });\n\n\t\tconst signature = toSerializedSignature({\n\t\t\tsignature: await this.sign(digest),\n\t\t\tsignatureScheme: this.getKeyScheme(),\n\t\t\tpubKey: this.getPublicKey(),\n\t\t});\n\n\t\treturn {\n\t\t\tsignature,\n\t\t\tbytes,\n\t\t};\n\t}\n\n\tasync signTransactionBlock(bytes: Uint8Array) {\n\t\treturn this.signWithIntent(bytes, IntentScope.TransactionData);\n\t}\n\n\tasync signPersonalMessage(bytes: Uint8Array) {\n\t\treturn this.signWithIntent(\n\t\t\tbcs.ser(['vector', 'u8'], bytes).toBytes(),\n\t\t\tIntentScope.PersonalMessage,\n\t\t);\n\t}\n\n\t/**\n\t * @deprecated use `signPersonalMessage` instead\n\t */\n\tasync signMessage(bytes: Uint8Array) {\n\t\treturn this.signPersonalMessage(bytes);\n\t}\n\n\ttoSuiAddress(): string {\n\t\treturn this.getPublicKey().toSuiAddress();\n\t}\n\n\t/**\n\t * Return the signature for the data.\n\t * Prefer the async version {@link sign}, as this method will be deprecated in a future release.\n\t */\n\tabstract signData(data: Uint8Array): Uint8Array;\n\n\t/**\n\t * Get the key scheme of the keypair: Secp256k1 or ED25519\n\t */\n\tabstract getKeyScheme(): SignatureScheme;\n\n\t/**\n\t * The public key for this keypair\n\t */\n\tabstract getPublicKey(): PublicKey;\n}\n\n/**\n * TODO: Document\n */\nexport abstract class Keypair extends BaseSigner {\n\tabstract export(): ExportedKeypair;\n}\n", "/**\r\n\r\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\r\nDon't use them in a new protocol. What \"weak\" means:\r\n\r\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\r\n- No practical pre-image attacks (only theoretical, 2^123.4)\r\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\r\n * @module\r\n */\r\nimport { Chi, HashMD, Maj } from './_md.ts';\r\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\r\n\r\n/** Initial SHA1 state */\r\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\r\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\r\n]);\r\n\r\n// Reusable temporary buffer\r\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\r\n\r\n/** SHA1 legacy hash class. */\r\nexport class SHA1 extends HashMD<SHA1> {\r\n  private A = SHA1_IV[0] | 0;\r\n  private B = SHA1_IV[1] | 0;\r\n  private C = SHA1_IV[2] | 0;\r\n  private D = SHA1_IV[3] | 0;\r\n  private E = SHA1_IV[4] | 0;\r\n\r\n  constructor() {\r\n    super(64, 20, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number] {\r\n    const { A, B, C, D, E } = this;\r\n    return [A, B, C, D, E];\r\n  }\r\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 80; i++)\r\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\r\n    // Compression function main loop, 80 rounds\r\n    let { A, B, C, D, E } = this;\r\n    for (let i = 0; i < 80; i++) {\r\n      let F, K;\r\n      if (i < 20) {\r\n        F = Chi(B, C, D);\r\n        K = 0x5a827999;\r\n      } else if (i < 40) {\r\n        F = B ^ C ^ D;\r\n        K = 0x6ed9eba1;\r\n      } else if (i < 60) {\r\n        F = Maj(B, C, D);\r\n        K = 0x8f1bbcdc;\r\n      } else {\r\n        F = B ^ C ^ D;\r\n        K = 0xca62c1d6;\r\n      }\r\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\r\n      E = D;\r\n      D = C;\r\n      C = rotl(B, 30);\r\n      B = A;\r\n      A = T;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    this.set(A, B, C, D, E);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(SHA1_W);\r\n  }\r\n  destroy(): void {\r\n    this.set(0, 0, 0, 0, 0);\r\n    clean(this.buffer);\r\n  }\r\n}\r\n\r\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\r\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\r\n\r\n/** Per-round constants */\r\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\r\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\r\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\r\n);\r\n\r\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\r\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\r\n\r\n// Reusable temporary buffer\r\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\r\n/** MD5 legacy hash class. */\r\nexport class MD5 extends HashMD<MD5> {\r\n  private A = MD5_IV[0] | 0;\r\n  private B = MD5_IV[1] | 0;\r\n  private C = MD5_IV[2] | 0;\r\n  private D = MD5_IV[3] | 0;\r\n\r\n  constructor() {\r\n    super(64, 16, 8, true);\r\n  }\r\n  protected get(): [number, number, number, number] {\r\n    const { A, B, C, D } = this;\r\n    return [A, B, C, D];\r\n  }\r\n  protected set(A: number, B: number, C: number, D: number): void {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      let F, g, s;\r\n      if (i < 16) {\r\n        F = Chi(B, C, D);\r\n        g = i;\r\n        s = [7, 12, 17, 22];\r\n      } else if (i < 32) {\r\n        F = Chi(D, B, C);\r\n        g = (5 * i + 1) % 16;\r\n        s = [5, 9, 14, 20];\r\n      } else if (i < 48) {\r\n        F = B ^ C ^ D;\r\n        g = (3 * i + 5) % 16;\r\n        s = [4, 11, 16, 23];\r\n      } else {\r\n        F = C ^ (B | ~D);\r\n        g = (7 * i) % 16;\r\n        s = [6, 10, 15, 21];\r\n      }\r\n      F = F + A + K[i] + MD5_W[g];\r\n      A = D;\r\n      D = C;\r\n      C = B;\r\n      B = B + rotl(F, s[i % 4]);\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    this.set(A, B, C, D);\r\n  }\r\n  protected roundClean(): void {\r\n    clean(MD5_W);\r\n  }\r\n  destroy(): void {\r\n    this.set(0, 0, 0, 0);\r\n    clean(this.buffer);\r\n  }\r\n}\r\n\r\n/**\r\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\r\n * MD5 architecture is similar to SHA1, with some differences:\r\n * - Reduced output length: 16 bytes (128 bit) instead of 20\r\n * - 64 rounds, instead of 80\r\n * - Little-endian: could be faster, but will require more code\r\n * - Non-linear index selection: huge speed-up for unroll\r\n * - Per round constants: more memory accesses, additional speed-up for unroll\r\n */\r\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\r\n\r\n// RIPEMD-160\r\n\r\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\r\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\r\n]);\r\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\r\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\r\nconst idxLR = /* @__PURE__ */ (() => {\r\n  const L = [Id160];\r\n  const R = [Pi160];\r\n  const res = [L, R];\r\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\r\n  return res;\r\n})();\r\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\r\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\r\n// const [idxL, idxR] = idxLR;\r\n\r\nconst shifts160 = /* @__PURE__ */ [\r\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\r\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\r\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\r\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\r\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\r\n].map((i) => Uint8Array.from(i));\r\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\r\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\r\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\r\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\r\n]);\r\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\r\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\r\n]);\r\n// It's called f() in spec.\r\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\r\n  if (group === 0) return x ^ y ^ z;\r\n  if (group === 1) return (x & y) | (~x & z);\r\n  if (group === 2) return (x | ~y) ^ z;\r\n  if (group === 3) return (x & z) | (y & ~z);\r\n  return x ^ (y | ~z);\r\n}\r\n// Reusable temporary buffer\r\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\r\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\r\n  private h0 = 0x67452301 | 0;\r\n  private h1 = 0xefcdab89 | 0;\r\n  private h2 = 0x98badcfe | 0;\r\n  private h3 = 0x10325476 | 0;\r\n  private h4 = 0xc3d2e1f0 | 0;\r\n\r\n  constructor() {\r\n    super(64, 20, 8, true);\r\n  }\r\n  protected get(): [number, number, number, number, number] {\r\n    const { h0, h1, h2, h3, h4 } = this;\r\n    return [h0, h1, h2, h3, h4];\r\n  }\r\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\r\n    this.h0 = h0 | 0;\r\n    this.h1 = h1 | 0;\r\n    this.h2 = h2 | 0;\r\n    this.h3 = h3 | 0;\r\n    this.h4 = h4 | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\r\n    // prettier-ignore\r\n    let al = this.h0 | 0, ar = al,\r\n        bl = this.h1 | 0, br = bl,\r\n        cl = this.h2 | 0, cr = cl,\r\n        dl = this.h3 | 0, dr = dl,\r\n        el = this.h4 | 0, er = el;\r\n\r\n    // Instead of iterating 0 to 80, we split it into 5 groups\r\n    // And use the groups in constants, functions, etc. Much simpler\r\n    for (let group = 0; group < 5; group++) {\r\n      const rGroup = 4 - group;\r\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\r\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\r\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\r\n      for (let i = 0; i < 16; i++) {\r\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\r\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\r\n      }\r\n      // 2 loops are 10% faster\r\n      for (let i = 0; i < 16; i++) {\r\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\r\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\r\n      }\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    this.set(\r\n      (this.h1 + cl + dr) | 0,\r\n      (this.h2 + dl + er) | 0,\r\n      (this.h3 + el + ar) | 0,\r\n      (this.h4 + al + br) | 0,\r\n      (this.h0 + bl + cr) | 0\r\n    );\r\n  }\r\n  protected roundClean(): void {\r\n    clean(BUF_160);\r\n  }\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    clean(this.buffer);\r\n    this.set(0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * RIPEMD-160 - a legacy hash function from 1990s.\r\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\r\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\r\n */\r\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\r\n", "/**\r\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\r\n * @example\r\n * ```js\r\n * import { HDKey } from \"@scure/bip32\";\r\n * const hdkey1 = HDKey.fromMasterSeed(seed);\r\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\r\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\r\n *\r\n * // props\r\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\r\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\r\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\r\n * const sig = hdkey3.sign(hash);\r\n * hdkey3.verify(hash, sig);\r\n * ```\r\n */\r\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\r\nimport { mod } from '@noble/curves/abstract/modular';\r\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { ripemd160 } from '@noble/hashes/legacy';\r\nimport { sha256, sha512 } from '@noble/hashes/sha2';\r\nimport {\r\n  abytes,\r\n  bytesToHex,\r\n  concatBytes,\r\n  createView,\r\n  hexToBytes,\r\n  utf8ToBytes,\r\n} from '@noble/hashes/utils';\r\nimport { createBase58check } from '@scure/base';\r\n\r\nconst Point = secp.ProjectivePoint;\r\nconst base58check = createBase58check(sha256);\r\n\r\nfunction bytesToNumber(bytes: Uint8Array): bigint {\r\n  abytes(bytes);\r\n  const h = bytes.length === 0 ? '0' : bytesToHex(bytes);\r\n  return BigInt('0x' + h);\r\n}\r\n\r\nfunction numberToBytes(num: bigint): Uint8Array {\r\n  if (typeof num !== 'bigint') throw new Error('bigint expected');\r\n  return hexToBytes(num.toString(16).padStart(64, '0'));\r\n}\r\n\r\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\r\n// Bitcoin hardcoded by default\r\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\r\nexport const HARDENED_OFFSET: number = 0x80000000;\r\n\r\nexport interface Versions {\r\n  private: number;\r\n  public: number;\r\n}\r\n\r\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\r\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\r\nconst toU32 = (n: number) => {\r\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\r\n    throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\r\n  }\r\n  const buf = new Uint8Array(4);\r\n  createView(buf).setUint32(0, n, false);\r\n  return buf;\r\n};\r\n\r\ninterface HDKeyOpt {\r\n  versions?: Versions;\r\n  depth?: number;\r\n  index?: number;\r\n  parentFingerprint?: number;\r\n  chainCode?: Uint8Array;\r\n  publicKey?: Uint8Array;\r\n  privateKey?: Uint8Array | bigint;\r\n}\r\n\r\nexport class HDKey {\r\n  get fingerprint(): number {\r\n    if (!this.pubHash) {\r\n      throw new Error('No publicKey set!');\r\n    }\r\n    return fromU32(this.pubHash);\r\n  }\r\n  get identifier(): Uint8Array | undefined {\r\n    return this.pubHash;\r\n  }\r\n  get pubKeyHash(): Uint8Array | undefined {\r\n    return this.pubHash;\r\n  }\r\n  get privateKey(): Uint8Array | null {\r\n    return this.privKeyBytes || null;\r\n  }\r\n  get publicKey(): Uint8Array | null {\r\n    return this.pubKey || null;\r\n  }\r\n  get privateExtendedKey(): string {\r\n    const priv = this.privateKey;\r\n    if (!priv) {\r\n      throw new Error('No private key');\r\n    }\r\n    return base58check.encode(\r\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\r\n    );\r\n  }\r\n  get publicExtendedKey(): string {\r\n    if (!this.pubKey) {\r\n      throw new Error('No public key');\r\n    }\r\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\r\n  }\r\n\r\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\r\n    abytes(seed);\r\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\r\n      throw new Error(\r\n        'HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\r\n          seed.length\r\n      );\r\n    }\r\n    const I = hmac(sha512, MASTER_SECRET, seed);\r\n    return new HDKey({\r\n      versions,\r\n      chainCode: I.slice(32),\r\n      privateKey: I.slice(0, 32),\r\n    });\r\n  }\r\n\r\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\r\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\r\n    const keyView = createView(keyBuffer);\r\n    const version = keyView.getUint32(0, false);\r\n    const opt = {\r\n      versions,\r\n      depth: keyBuffer[4],\r\n      parentFingerprint: keyView.getUint32(5, false),\r\n      index: keyView.getUint32(9, false),\r\n      chainCode: keyBuffer.slice(13, 45),\r\n    };\r\n    const key = keyBuffer.slice(45);\r\n    const isPriv = key[0] === 0;\r\n    if (version !== versions[isPriv ? 'private' : 'public']) {\r\n      throw new Error('Version mismatch');\r\n    }\r\n    if (isPriv) {\r\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\r\n    } else {\r\n      return new HDKey({ ...opt, publicKey: key });\r\n    }\r\n  }\r\n\r\n  public static fromJSON(json: { xpriv: string }): HDKey {\r\n    return HDKey.fromExtendedKey(json.xpriv);\r\n  }\r\n  public readonly versions: Versions;\r\n  public readonly depth: number = 0;\r\n  public readonly index: number = 0;\r\n  public readonly chainCode: Uint8Array | null = null;\r\n  public readonly parentFingerprint: number = 0;\r\n  private privKey?: bigint;\r\n  private privKeyBytes?: Uint8Array;\r\n  private pubKey?: Uint8Array;\r\n  private pubHash: Uint8Array | undefined;\r\n\r\n  constructor(opt: HDKeyOpt) {\r\n    if (!opt || typeof opt !== 'object') {\r\n      throw new Error('HDKey.constructor must not be called directly');\r\n    }\r\n    this.versions = opt.versions || BITCOIN_VERSIONS;\r\n    this.depth = opt.depth || 0;\r\n    this.chainCode = opt.chainCode || null;\r\n    this.index = opt.index || 0;\r\n    this.parentFingerprint = opt.parentFingerprint || 0;\r\n    if (!this.depth) {\r\n      if (this.parentFingerprint || this.index) {\r\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\r\n      }\r\n    }\r\n    if (opt.publicKey && opt.privateKey) {\r\n      throw new Error('HDKey: publicKey and privateKey at same time.');\r\n    }\r\n    if (opt.privateKey) {\r\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\r\n        throw new Error('Invalid private key');\r\n      }\r\n      this.privKey =\r\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\r\n      this.privKeyBytes = numberToBytes(this.privKey);\r\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\r\n    } else if (opt.publicKey) {\r\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\r\n    } else {\r\n      throw new Error('HDKey: no public or private key provided');\r\n    }\r\n    this.pubHash = hash160(this.pubKey);\r\n  }\r\n\r\n  public derive(path: string): HDKey {\r\n    if (!/^[mM]'?/.test(path)) {\r\n      throw new Error('Path must start with \"m\" or \"M\"');\r\n    }\r\n    if (/^[mM]'?$/.test(path)) {\r\n      return this;\r\n    }\r\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\r\n    // tslint:disable-next-line\r\n    let child: HDKey = this;\r\n    for (const c of parts) {\r\n      const m = /^(\\d+)('?)$/.exec(c);\r\n      const m1 = m && m[1];\r\n      if (!m || m.length !== 3 || typeof m1 !== 'string')\r\n        throw new Error('invalid child index: ' + c);\r\n      let idx = +m1;\r\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\r\n        throw new Error('Invalid index');\r\n      }\r\n      // hardened key\r\n      if (m[2] === \"'\") {\r\n        idx += HARDENED_OFFSET;\r\n      }\r\n      child = child.deriveChild(idx);\r\n    }\r\n    return child;\r\n  }\r\n\r\n  public deriveChild(index: number): HDKey {\r\n    if (!this.pubKey || !this.chainCode) {\r\n      throw new Error('No publicKey or chainCode set');\r\n    }\r\n    let data = toU32(index);\r\n    if (index >= HARDENED_OFFSET) {\r\n      // Hardened\r\n      const priv = this.privateKey;\r\n      if (!priv) {\r\n        throw new Error('Could not derive hardened child key');\r\n      }\r\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\r\n      data = concatBytes(new Uint8Array([0]), priv, data);\r\n    } else {\r\n      // Normal child: serP(point(kpar)) || ser32(index)\r\n      data = concatBytes(this.pubKey, data);\r\n    }\r\n    const I = hmac(sha512, this.chainCode, data);\r\n    const childTweak = bytesToNumber(I.slice(0, 32));\r\n    const chainCode = I.slice(32);\r\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\r\n      throw new Error('Tweak bigger than curve order');\r\n    }\r\n    const opt: HDKeyOpt = {\r\n      versions: this.versions,\r\n      chainCode,\r\n      depth: this.depth + 1,\r\n      parentFingerprint: this.fingerprint,\r\n      index,\r\n    };\r\n    try {\r\n      // Private parent key -> private child key\r\n      if (this.privateKey) {\r\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\r\n        if (!secp.utils.isValidPrivateKey(added)) {\r\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\r\n        }\r\n        opt.privateKey = added;\r\n      } else {\r\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\r\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\r\n        if (added.equals(Point.ZERO)) {\r\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\r\n        }\r\n        opt.publicKey = added.toRawBytes(true);\r\n      }\r\n      return new HDKey(opt);\r\n    } catch (err) {\r\n      return this.deriveChild(index + 1);\r\n    }\r\n  }\r\n\r\n  public sign(hash: Uint8Array): Uint8Array {\r\n    if (!this.privateKey) {\r\n      throw new Error('No privateKey set!');\r\n    }\r\n    abytes(hash, 32);\r\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\r\n  }\r\n\r\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\r\n    abytes(hash, 32);\r\n    abytes(signature, 64);\r\n    if (!this.publicKey) {\r\n      throw new Error('No publicKey set!');\r\n    }\r\n    let sig;\r\n    try {\r\n      sig = secp.Signature.fromCompact(signature);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    return secp.verify(sig, hash, this.publicKey);\r\n  }\r\n\r\n  public wipePrivateData(): this {\r\n    this.privKey = undefined;\r\n    if (this.privKeyBytes) {\r\n      this.privKeyBytes.fill(0);\r\n      this.privKeyBytes = undefined;\r\n    }\r\n    return this;\r\n  }\r\n  public toJSON(): { xpriv: string; xpub: string } {\r\n    return {\r\n      xpriv: this.privateExtendedKey,\r\n      xpub: this.publicExtendedKey,\r\n    };\r\n  }\r\n\r\n  private serialize(version: number, key: Uint8Array) {\r\n    if (!this.chainCode) {\r\n      throw new Error('No chainCode set');\r\n    }\r\n    abytes(key, 33);\r\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n    return concatBytes(\r\n      toU32(version),\r\n      new Uint8Array([this.depth]),\r\n      toU32(this.parentFingerprint),\r\n      toU32(this.index),\r\n      this.chainCode,\r\n      key\r\n    );\r\n  }\r\n}\r\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { ExportedKeypair } from '../../cryptography/keypair.js';\nimport { Keypair } from '../../cryptography/keypair.js';\nimport type { PublicKey } from '../../cryptography/publickey.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Secp256k1PublicKey } from './publickey.js';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { isValidBIP32Path, mnemonicToSeed } from '../../cryptography/mnemonics.js';\nimport { HDKey } from '@scure/bip32';\nimport { toB64 } from '@mysten/bcs';\nimport type { SignatureScheme } from '../../cryptography/signature.js';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { blake2b } from '@noble/hashes/blake2b';\n\nexport const DEFAULT_SECP256K1_DERIVATION_PATH = \"m/54'/784'/0'/0/0\";\n\n/**\n * Secp256k1 Keypair data\n */\nexport interface Secp256k1KeypairData {\n\tpublicKey: Uint8Array;\n\tsecretKey: Uint8Array;\n}\n\n/**\n * An Secp256k1 Keypair used for signing transactions.\n */\nexport class Secp256k1Keypair extends Keypair {\n\tprivate keypair: Secp256k1KeypairData;\n\n\t/**\n\t * Create a new keypair instance.\n\t * Generate random keypair if no {@link Secp256k1Keypair} is provided.\n\t *\n\t * @param keypair secp256k1 keypair\n\t */\n\tconstructor(keypair?: Secp256k1KeypairData) {\n\t\tsuper();\n\t\tif (keypair) {\n\t\t\tthis.keypair = keypair;\n\t\t} else {\n\t\t\tconst secretKey: Uint8Array = secp256k1.utils.randomPrivateKey();\n\t\t\tconst publicKey: Uint8Array = secp256k1.getPublicKey(secretKey, true);\n\n\t\t\tthis.keypair = { publicKey, secretKey };\n\t\t}\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair Secp256k1\n\t */\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'Secp256k1';\n\t}\n\n\t/**\n\t * Generate a new random keypair\n\t */\n\tstatic generate(): Secp256k1Keypair {\n\t\treturn new Secp256k1Keypair();\n\t}\n\n\t/**\n\t * Create a keypair from a raw secret key byte array.\n\t *\n\t * This method should only be used to recreate a keypair from a previously\n\t * generated secret key. Generating keypairs from a random seed should be done\n\t * with the {@link Keypair.fromSeed} method.\n\t *\n\t * @throws error if the provided secret key is invalid and validation is not skipped.\n\t *\n\t * @param secretKey secret key byte array\n\t * @param options: skip secret key validation\n\t */\n\n\tstatic fromSecretKey(\n\t\tsecretKey: Uint8Array,\n\t\toptions?: { skipValidation?: boolean },\n\t): Secp256k1Keypair {\n\t\tconst publicKey: Uint8Array = secp256k1.getPublicKey(secretKey, true);\n\t\tif (!options || !options.skipValidation) {\n\t\t\tconst encoder = new TextEncoder();\n\t\t\tconst signData = encoder.encode('sui validation');\n\t\t\tconst msgHash = bytesToHex(blake2b(signData, { dkLen: 32 }));\n\t\t\tconst signature = secp256k1.sign(msgHash, secretKey);\n\t\t\tif (!secp256k1.verify(signature, msgHash, publicKey, { lowS: true })) {\n\t\t\t\tthrow new Error('Provided secretKey is invalid');\n\t\t\t}\n\t\t}\n\t\treturn new Secp256k1Keypair({ publicKey, secretKey });\n\t}\n\n\t/**\n\t * Generate a keypair from a 32 byte seed.\n\t *\n\t * @param seed seed byte array\n\t */\n\tstatic fromSeed(seed: Uint8Array): Secp256k1Keypair {\n\t\tlet publicKey = secp256k1.getPublicKey(seed, true);\n\t\treturn new Secp256k1Keypair({ publicKey, secretKey: seed });\n\t}\n\n\t/**\n\t * The public key for this keypair\n\t */\n\tgetPublicKey(): PublicKey {\n\t\treturn new Secp256k1PublicKey(this.keypair.publicKey);\n\t}\n\n\tasync sign(data: Uint8Array) {\n\t\treturn this.signData(data);\n\t}\n\n\t/**\n\t * Return the signature for the provided data.\n\t */\n\tsignData(data: Uint8Array): Uint8Array {\n\t\tconst msgHash = sha256(data);\n\t\tconst sig = secp256k1.sign(msgHash, this.keypair.secretKey, {\n\t\t\tlowS: true,\n\t\t});\n\t\treturn sig.toCompactRawBytes();\n\t}\n\n\t/**\n\t * Derive Secp256k1 keypair from mnemonics and path. The mnemonics must be normalized\n\t * and validated against the english wordlist.\n\t *\n\t * If path is none, it will default to m/54'/784'/0'/0/0, otherwise the path must\n\t * be compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}.\n\t */\n\tstatic deriveKeypair(mnemonics: string, path?: string): Secp256k1Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_SECP256K1_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidBIP32Path(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\tconst key = HDKey.fromMasterSeed(mnemonicToSeed(mnemonics)).derive(path);\n\t\tif (key.publicKey == null || key.privateKey == null) {\n\t\t\tthrow new Error('Invalid key');\n\t\t}\n\t\treturn new Secp256k1Keypair({\n\t\t\tpublicKey: key.publicKey,\n\t\t\tsecretKey: key.privateKey,\n\t\t});\n\t}\n\n\texport(): ExportedKeypair {\n\t\treturn {\n\t\t\tschema: 'Secp256k1',\n\t\t\tprivateKey: toB64(this.keypair.secretKey),\n\t\t};\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n/* eslint-disable import/no-cycle */\n\nimport { fromB64 } from '@mysten/bcs';\nimport type { SerializedSignature, SignatureScheme } from './signature.js';\nimport { SIGNATURE_FLAG_TO_SCHEME } from './signature.js';\nimport { Secp256r1PublicKey } from '../keypairs/secp256r1/publickey.js';\nimport { Secp256k1PublicKey } from '../keypairs/secp256k1/publickey.js';\nimport { Ed25519PublicKey } from '../keypairs/ed25519/publickey.js';\nimport { decodeMultiSig } from './multisig.js';\nimport type { PublicKey } from './publickey.js';\nimport { Ed25519Keypair } from '../keypairs/ed25519/keypair.js';\nimport { Secp256k1Keypair } from '../keypairs/secp256k1/keypair.js';\nimport type { ExportedKeypair, Keypair } from './keypair.js';\nimport { LEGACY_PRIVATE_KEY_SIZE, PRIVATE_KEY_SIZE } from './keypair.js';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n\tsignatureScheme: SignatureScheme;\n\t/** Base64-encoded signature */\n\tsignature: Uint8Array;\n\t/** Base64-encoded public key */\n\tpubKey: PublicKey;\n\tweight?: number;\n};\n\n/// Expects to parse a serialized signature by its signature scheme to a list of signature\n/// and public key pairs. The list is of length 1 if it is not multisig.\nexport function toParsedSignaturePubkeyPair(\n\tserializedSignature: SerializedSignature,\n): SignaturePubkeyPair[] {\n\tconst bytes = fromB64(serializedSignature);\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tif (signatureScheme === 'MultiSig') {\n\t\ttry {\n\t\t\treturn decodeMultiSig(serializedSignature);\n\t\t} catch (e) {\n\t\t\t// Legacy format multisig do not render.\n\t\t\tthrow new Error('legacy multisig viewing unsupported');\n\t\t}\n\t}\n\n\tconst SIGNATURE_SCHEME_TO_PUBLIC_KEY = {\n\t\tED25519: Ed25519PublicKey,\n\t\tSecp256k1: Secp256k1PublicKey,\n\t\tSecp256r1: Secp256r1PublicKey,\n\t};\n\n\tconst PublicKey = SIGNATURE_SCHEME_TO_PUBLIC_KEY[signatureScheme];\n\n\tconst signature = bytes.slice(1, bytes.length - PublicKey.SIZE);\n\tconst pubkeyBytes = bytes.slice(1 + signature.length);\n\tconst pubKey = new PublicKey(pubkeyBytes);\n\n\treturn [\n\t\t{\n\t\t\tsignatureScheme,\n\t\t\tsignature,\n\t\t\tpubKey,\n\t\t},\n\t];\n}\n\n/// Expects to parse a single signature pubkey pair from the serialized\n/// signature. Use this only if multisig is not expected.\nexport function toSingleSignaturePubkeyPair(\n\tserializedSignature: SerializedSignature,\n): SignaturePubkeyPair {\n\tconst res = toParsedSignaturePubkeyPair(serializedSignature);\n\tif (res.length !== 1) {\n\t\tthrow Error('Expected a single signature');\n\t}\n\treturn res[0];\n}\n\nexport function publicKeyFromSerialized(schema: SignatureScheme, pubKey: string): PublicKey {\n\tif (schema === 'ED25519') {\n\t\treturn new Ed25519PublicKey(pubKey);\n\t}\n\tif (schema === 'Secp256k1') {\n\t\treturn new Secp256k1PublicKey(pubKey);\n\t}\n\tthrow new Error('Unknown public key schema');\n}\n\nexport function fromExportedKeypair(keypair: ExportedKeypair): Keypair {\n\tconst secretKey = fromB64(keypair.privateKey);\n\tswitch (keypair.schema) {\n\t\tcase 'ED25519':\n\t\t\tlet pureSecretKey = secretKey;\n\t\t\tif (secretKey.length === LEGACY_PRIVATE_KEY_SIZE) {\n\t\t\t\t// This is a legacy secret key, we need to strip the public key bytes and only read the first 32 bytes\n\t\t\t\tpureSecretKey = secretKey.slice(0, PRIVATE_KEY_SIZE);\n\t\t\t}\n\t\t\treturn Ed25519Keypair.fromSecretKey(pureSecretKey);\n\t\tcase 'Secp256k1':\n\t\t\treturn Secp256k1Keypair.fromSecretKey(secretKey);\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid keypair schema ${keypair.schema}`);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tnumber,\n\tobject,\n\tstring,\n\ttuple,\n\tboolean,\n\toptional,\n\tany,\n\tnullable,\n} from 'superstruct';\n\nexport const GasCostSummary = object({\n\tcomputationCost: string(),\n\tstorageCost: string(),\n\tstorageRebate: string(),\n\tnonRefundableStorageFee: string(),\n});\nexport type GasCostSummary = Infer<typeof GasCostSummary>;\n\n/** @deprecated Use `string` instead. */\nexport const CheckPointContentsDigest = string();\n/** @deprecated Use `string` instead. */\nexport type CheckPointContentsDigest = Infer<typeof CheckPointContentsDigest>;\n\n/** @deprecated Use `string` instead. */\nexport const CheckpointDigest = string();\n/** @deprecated Use `string` instead. */\nexport type CheckpointDigest = Infer<typeof CheckpointDigest>;\n\nexport const ECMHLiveObjectSetDigest = object({\n\tdigest: array(number()),\n});\nexport type ECMHLiveObjectSetDigest = Infer<typeof ECMHLiveObjectSetDigest>;\n\nexport const CheckpointCommitment = any();\nexport type CheckpointCommitment = Infer<typeof CheckpointCommitment>;\n\n/** @deprecated Use `string` instead. */\nexport const ValidatorSignature = string();\n/** @deprecated Use `string` instead. */\nexport type ValidatorSignature = Infer<typeof ValidatorSignature>;\n\nexport const EndOfEpochData = object({\n\tnextEpochCommittee: array(tuple([string(), string()])),\n\tnextEpochProtocolVersion: string(),\n\tepochCommitments: array(CheckpointCommitment),\n});\nexport type EndOfEpochData = Infer<typeof EndOfEpochData>;\n\nexport const ExecutionDigests = object({\n\ttransaction: string(),\n\teffects: string(),\n});\n\nexport const Checkpoint = object({\n\tepoch: string(),\n\tsequenceNumber: string(),\n\tdigest: string(),\n\tnetworkTotalTransactions: string(),\n\tpreviousDigest: optional(string()),\n\tepochRollingGasCostSummary: GasCostSummary,\n\ttimestampMs: string(),\n\tendOfEpochData: optional(EndOfEpochData),\n\tvalidatorSignature: string(),\n\ttransactions: array(string()),\n\tcheckpointCommitments: array(CheckpointCommitment),\n});\nexport type Checkpoint = Infer<typeof Checkpoint>;\n\nexport const CheckpointPage = object({\n\tdata: array(Checkpoint),\n\tnextCursor: nullable(string()),\n\thasNextPage: boolean(),\n});\nexport type CheckpointPage = Infer<typeof CheckpointPage>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { boolean, define, literal, nullable, object, record, string, union } from 'superstruct';\nimport type { CallArg } from '../bcs/index.js';\n\n/** @deprecated Use `string` instead. */\nexport const TransactionDigest = string();\n/** @deprecated Use `string` instead. */\nexport type TransactionDigest = Infer<typeof TransactionDigest>;\n\n/** @deprecated Use `string` instead. */\nexport const TransactionEffectsDigest = string();\n/** @deprecated Use `string` instead. */\nexport type TransactionEffectsDigest = Infer<typeof TransactionEffectsDigest>;\n\n/** @deprecated Use `string` instead. */\nexport const TransactionEventDigest = string();\n/** @deprecated Use `string` instead. */\nexport type TransactionEventDigest = Infer<typeof TransactionEventDigest>;\n\n/** @deprecated Use `string` instead. */\nexport const ObjectId = string();\n/** @deprecated Use `string` instead. */\nexport type ObjectId = Infer<typeof ObjectId>;\n\n/** @deprecated Use `string` instead. */\nexport const SuiAddress = string();\n/** @deprecated Use `string` instead. */\nexport type SuiAddress = Infer<typeof SuiAddress>;\n\n/** @deprecated Use `string` instead. */\nexport const SequenceNumber = string();\n/** @deprecated Use `string` instead. */\nexport type SequenceNumber = Infer<typeof SequenceNumber>;\n\nexport const ObjectOwner = union([\n\tobject({\n\t\tAddressOwner: string(),\n\t}),\n\tobject({\n\t\tObjectOwner: string(),\n\t}),\n\tobject({\n\t\tShared: object({\n\t\t\tinitial_shared_version: nullable(string()),\n\t\t}),\n\t}),\n\tliteral('Immutable'),\n]);\nexport type ObjectOwner = Infer<typeof ObjectOwner>;\n\nexport type SuiJsonValue = boolean | number | string | CallArg | Array<SuiJsonValue>;\nexport const SuiJsonValue = define<SuiJsonValue>('SuiJsonValue', () => true);\n\nconst ProtocolConfigValue = union([\n\tobject({ u32: string() }),\n\tobject({ u64: string() }),\n\tobject({ f64: string() }),\n]);\ntype ProtocolConfigValue = Infer<typeof ProtocolConfigValue>;\n\nexport const ProtocolConfig = object({\n\tattributes: record(string(), nullable(ProtocolConfigValue)),\n\tfeatureFlags: record(string(), boolean()),\n\tmaxSupportedProtocolVersion: string(),\n\tminSupportedProtocolVersion: string(),\n\tprotocolVersion: string(),\n});\nexport type ProtocolConfig = Infer<typeof ProtocolConfig>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tany,\n\tarray,\n\tassign,\n\tboolean,\n\tliteral,\n\tnumber,\n\tobject,\n\toptional,\n\trecord,\n\tstring,\n\tunion,\n\tis,\n\tnullable,\n\ttuple,\n\tunknown,\n} from 'superstruct';\nimport { ObjectOwner } from './common.js';\nimport type { OwnedObjectRef } from './transactions.js';\n\nexport const ObjectType = union([string(), literal('package')]);\nexport type ObjectType = Infer<typeof ObjectType>;\n\nexport const SuiObjectRef = object({\n\t/** Base64 string representing the object digest */\n\tdigest: string(),\n\t/** Hex code as string representing the object id */\n\tobjectId: string(),\n\t/** Object version */\n\tversion: union([number(), string()]),\n});\nexport type SuiObjectRef = Infer<typeof SuiObjectRef>;\n\nexport const SuiGasData = object({\n\tpayment: array(SuiObjectRef),\n\t/** Gas Object's owner */\n\towner: string(),\n\tprice: string(),\n\tbudget: string(),\n});\nexport type SuiGasData = Infer<typeof SuiGasData>;\n\nexport const SuiObjectInfo = assign(\n\tSuiObjectRef,\n\tobject({\n\t\ttype: string(),\n\t\towner: ObjectOwner,\n\t\tpreviousTransaction: string(),\n\t}),\n);\nexport type SuiObjectInfo = Infer<typeof SuiObjectInfo>;\n\nexport const ObjectContentFields = record(string(), any());\nexport type ObjectContentFields = Infer<typeof ObjectContentFields>;\n\nexport const MovePackageContent = record(string(), unknown());\nexport type MovePackageContent = Infer<typeof MovePackageContent>;\n\nexport const SuiMoveObject = object({\n\t/** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n\ttype: string(),\n\t/** Fields and values stored inside the Move object */\n\tfields: ObjectContentFields,\n\thasPublicTransfer: boolean(),\n});\nexport type SuiMoveObject = Infer<typeof SuiMoveObject>;\n\nexport const SuiMovePackage = object({\n\t/** A mapping from module name to disassembled Move bytecode */\n\tdisassembled: MovePackageContent,\n});\nexport type SuiMovePackage = Infer<typeof SuiMovePackage>;\n\nexport const SuiParsedData = union([\n\tassign(SuiMoveObject, object({ dataType: literal('moveObject') })),\n\tassign(SuiMovePackage, object({ dataType: literal('package') })),\n]);\nexport type SuiParsedData = Infer<typeof SuiParsedData>;\n\nexport const SuiRawMoveObject = object({\n\t/** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n\ttype: string(),\n\thasPublicTransfer: boolean(),\n\tversion: string(),\n\tbcsBytes: string(),\n});\nexport type SuiRawMoveObject = Infer<typeof SuiRawMoveObject>;\n\nexport const SuiRawMovePackage = object({\n\tid: string(),\n\t/** A mapping from module name to Move bytecode enocded in base64*/\n\tmoduleMap: record(string(), string()),\n});\nexport type SuiRawMovePackage = Infer<typeof SuiRawMovePackage>;\n\n// TODO(chris): consolidate SuiRawParsedData and SuiRawObject using generics\nexport const SuiRawData = union([\n\tassign(SuiRawMoveObject, object({ dataType: literal('moveObject') })),\n\tassign(SuiRawMovePackage, object({ dataType: literal('package') })),\n]);\nexport type SuiRawData = Infer<typeof SuiRawData>;\n\nexport const SUI_DECIMALS = 9;\n\nexport const MIST_PER_SUI = BigInt(1000000000);\n\n/** @deprecated Use `string` instead. */\nexport const ObjectDigest = string();\n/** @deprecated Use `string` instead. */\nexport type ObjectDigest = Infer<typeof ObjectDigest>;\n\nexport const SuiObjectResponseError = object({\n\tcode: string(),\n\terror: optional(string()),\n\tobject_id: optional(string()),\n\tparent_object_id: optional(string()),\n\tversion: optional(string()),\n\tdigest: optional(string()),\n});\nexport type SuiObjectResponseError = Infer<typeof SuiObjectResponseError>;\nexport const DisplayFieldsResponse = object({\n\tdata: nullable(optional(record(string(), string()))),\n\terror: nullable(optional(SuiObjectResponseError)),\n});\nexport type DisplayFieldsResponse = Infer<typeof DisplayFieldsResponse>;\n// TODO: remove after all envs support the new DisplayFieldsResponse;\nexport const DisplayFieldsBackwardCompatibleResponse = union([\n\tDisplayFieldsResponse,\n\toptional(record(string(), string())),\n]);\nexport type DisplayFieldsBackwardCompatibleResponse = Infer<\n\ttypeof DisplayFieldsBackwardCompatibleResponse\n>;\n\nexport const SuiObjectData = object({\n\tobjectId: string(),\n\tversion: string(),\n\tdigest: string(),\n\t/**\n\t * Type of the object, default to be undefined unless SuiObjectDataOptions.showType is set to true\n\t */\n\ttype: nullable(optional(string())),\n\t/**\n\t * Move object content or package content, default to be undefined unless SuiObjectDataOptions.showContent is set to true\n\t */\n\tcontent: nullable(optional(SuiParsedData)),\n\t/**\n\t * Move object content or package content in BCS bytes, default to be undefined unless SuiObjectDataOptions.showBcs is set to true\n\t */\n\tbcs: nullable(optional(SuiRawData)),\n\t/**\n\t * The owner of this object. Default to be undefined unless SuiObjectDataOptions.showOwner is set to true\n\t */\n\towner: nullable(optional(ObjectOwner)),\n\t/**\n\t * The digest of the transaction that created or last mutated this object.\n\t * Default to be undefined unless SuiObjectDataOptions.showPreviousTransaction is set to true\n\t */\n\tpreviousTransaction: nullable(optional(string())),\n\t/**\n\t * The amount of SUI we would rebate if this object gets deleted.\n\t * This number is re-calculated each time the object is mutated based on\n\t * the present storage gas price.\n\t * Default to be undefined unless SuiObjectDataOptions.showStorageRebate is set to true\n\t */\n\tstorageRebate: nullable(optional(string())),\n\t/**\n\t * Display metadata for this object, default to be undefined unless SuiObjectDataOptions.showDisplay is set to true\n\t * This can also be None if the struct type does not have Display defined\n\t * See more details in https://forums.sui.io/t/nft-object-display-proposal/4872\n\t */\n\tdisplay: nullable(optional(DisplayFieldsBackwardCompatibleResponse)),\n});\nexport type SuiObjectData = Infer<typeof SuiObjectData>;\n\n/**\n * Config for fetching object data\n */\nexport const SuiObjectDataOptions = object({\n\t/* Whether to fetch the object type, default to be true */\n\tshowType: nullable(optional(boolean())),\n\t/* Whether to fetch the object content, default to be false */\n\tshowContent: nullable(optional(boolean())),\n\t/* Whether to fetch the object content in BCS bytes, default to be false */\n\tshowBcs: nullable(optional(boolean())),\n\t/* Whether to fetch the object owner, default to be false */\n\tshowOwner: nullable(optional(boolean())),\n\t/* Whether to fetch the previous transaction digest, default to be false */\n\tshowPreviousTransaction: nullable(optional(boolean())),\n\t/* Whether to fetch the storage rebate, default to be false */\n\tshowStorageRebate: nullable(optional(boolean())),\n\t/* Whether to fetch the display metadata, default to be false */\n\tshowDisplay: nullable(optional(boolean())),\n});\nexport type SuiObjectDataOptions = Infer<typeof SuiObjectDataOptions>;\n\nexport const ObjectStatus = union([literal('Exists'), literal('notExists'), literal('Deleted')]);\nexport type ObjectStatus = Infer<typeof ObjectStatus>;\n\nexport const GetOwnedObjectsResponse = array(SuiObjectInfo);\nexport type GetOwnedObjectsResponse = Infer<typeof GetOwnedObjectsResponse>;\n\nexport const SuiObjectResponse = object({\n\tdata: nullable(optional(SuiObjectData)),\n\terror: nullable(optional(SuiObjectResponseError)),\n});\nexport type SuiObjectResponse = Infer<typeof SuiObjectResponse>;\n\nexport type Order = 'ascending' | 'descending';\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------- SuiObjectResponse ------------------------- */\n\nexport function getSuiObjectData(resp: SuiObjectResponse): SuiObjectData | null | undefined {\n\treturn resp.data;\n}\n\nexport function getObjectDeletedResponse(resp: SuiObjectResponse): SuiObjectRef | undefined {\n\tif (\n\t\tresp.error &&\n\t\t'object_id' in resp.error &&\n\t\t'version' in resp.error &&\n\t\t'digest' in resp.error\n\t) {\n\t\tconst error = resp.error as SuiObjectResponseError;\n\t\treturn {\n\t\t\tobjectId: error.object_id,\n\t\t\tversion: error.version,\n\t\t\tdigest: error.digest,\n\t\t} as SuiObjectRef;\n\t}\n\n\treturn undefined;\n}\n\nexport function getObjectNotExistsResponse(resp: SuiObjectResponse): string | undefined {\n\tif (\n\t\tresp.error &&\n\t\t'object_id' in resp.error &&\n\t\t!('version' in resp.error) &&\n\t\t!('digest' in resp.error)\n\t) {\n\t\treturn (resp.error as SuiObjectResponseError).object_id as string;\n\t}\n\n\treturn undefined;\n}\n\nexport function getObjectReference(\n\tresp: SuiObjectResponse | OwnedObjectRef,\n): SuiObjectRef | undefined {\n\tif ('reference' in resp) {\n\t\treturn resp.reference;\n\t}\n\tconst exists = getSuiObjectData(resp);\n\tif (exists) {\n\t\treturn {\n\t\t\tobjectId: exists.objectId,\n\t\t\tversion: exists.version,\n\t\t\tdigest: exists.digest,\n\t\t};\n\t}\n\treturn getObjectDeletedResponse(resp);\n}\n\n/* ------------------------------ SuiObjectRef ------------------------------ */\n\nexport function getObjectId(data: SuiObjectResponse | SuiObjectRef | OwnedObjectRef): string {\n\tif ('objectId' in data) {\n\t\treturn data.objectId;\n\t}\n\treturn (\n\t\tgetObjectReference(data)?.objectId ?? getObjectNotExistsResponse(data as SuiObjectResponse)!\n\t);\n}\n\nexport function getObjectVersion(\n\tdata: SuiObjectResponse | SuiObjectRef | SuiObjectData,\n): string | number | undefined {\n\tif ('version' in data) {\n\t\treturn data.version;\n\t}\n\treturn getObjectReference(data)?.version;\n}\n\n/* -------------------------------- SuiObject ------------------------------- */\n\nexport function isSuiObjectResponse(\n\tresp: SuiObjectResponse | SuiObjectData,\n): resp is SuiObjectResponse {\n\treturn (resp as SuiObjectResponse).data !== undefined;\n}\n\n/**\n * Deriving the object type from the object response\n * @returns 'package' if the object is a package, move object type(e.g., 0x2::coin::Coin<0x2::sui::SUI>)\n * if the object is a move object\n */\nexport function getObjectType(\n\tresp: SuiObjectResponse | SuiObjectData,\n): ObjectType | null | undefined {\n\tconst data = isSuiObjectResponse(resp) ? resp.data : resp;\n\n\tif (!data?.type && 'data' in resp) {\n\t\tif (data?.content?.dataType === 'package') {\n\t\t\treturn 'package';\n\t\t}\n\t\treturn getMoveObjectType(resp);\n\t}\n\treturn data?.type;\n}\n\nexport function getObjectPreviousTransactionDigest(\n\tresp: SuiObjectResponse,\n): string | null | undefined {\n\treturn getSuiObjectData(resp)?.previousTransaction;\n}\n\nexport function getObjectOwner(\n\tresp: SuiObjectResponse | ObjectOwner,\n): ObjectOwner | null | undefined {\n\tif (is(resp, ObjectOwner)) {\n\t\treturn resp;\n\t}\n\treturn getSuiObjectData(resp)?.owner;\n}\n\nexport function getObjectDisplay(resp: SuiObjectResponse): DisplayFieldsResponse {\n\tconst display = getSuiObjectData(resp)?.display;\n\tif (!display) {\n\t\treturn { data: null, error: null };\n\t}\n\tif (is(display, DisplayFieldsResponse)) {\n\t\treturn display;\n\t}\n\treturn {\n\t\tdata: display,\n\t\terror: null,\n\t};\n}\n\nexport function getSharedObjectInitialVersion(\n\tresp: SuiObjectResponse | ObjectOwner,\n): string | null | undefined {\n\tconst owner = getObjectOwner(resp);\n\tif (owner && typeof owner === 'object' && 'Shared' in owner) {\n\t\treturn owner.Shared.initial_shared_version;\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\nexport function isSharedObject(resp: SuiObjectResponse | ObjectOwner): boolean {\n\tconst owner = getObjectOwner(resp);\n\treturn !!owner && typeof owner === 'object' && 'Shared' in owner;\n}\n\nexport function isImmutableObject(resp: SuiObjectResponse | ObjectOwner): boolean {\n\tconst owner = getObjectOwner(resp);\n\treturn owner === 'Immutable';\n}\n\nexport function getMoveObjectType(resp: SuiObjectResponse): string | undefined {\n\treturn getMoveObject(resp)?.type;\n}\n\nexport function getObjectFields(\n\tresp: SuiObjectResponse | SuiMoveObject | SuiObjectData,\n): ObjectContentFields | undefined {\n\tif ('fields' in resp) {\n\t\treturn resp.fields;\n\t}\n\treturn getMoveObject(resp)?.fields;\n}\n\nexport interface SuiObjectDataWithContent extends SuiObjectData {\n\tcontent: SuiParsedData;\n}\n\nfunction isSuiObjectDataWithContent(data: SuiObjectData): data is SuiObjectDataWithContent {\n\treturn data.content !== undefined;\n}\n\nexport function getMoveObject(data: SuiObjectResponse | SuiObjectData): SuiMoveObject | undefined {\n\tconst suiObject = 'data' in data ? getSuiObjectData(data) : (data as SuiObjectData);\n\n\tif (\n\t\t!suiObject ||\n\t\t!isSuiObjectDataWithContent(suiObject) ||\n\t\tsuiObject.content.dataType !== 'moveObject'\n\t) {\n\t\treturn undefined;\n\t}\n\n\treturn suiObject.content as SuiMoveObject;\n}\n\nexport function hasPublicTransfer(data: SuiObjectResponse | SuiObjectData): boolean {\n\treturn getMoveObject(data)?.hasPublicTransfer ?? false;\n}\n\nexport function getMovePackageContent(\n\tdata: SuiObjectResponse | SuiMovePackage,\n): MovePackageContent | undefined {\n\tif ('disassembled' in data) {\n\t\treturn data.disassembled;\n\t}\n\tconst suiObject = getSuiObjectData(data);\n\tif (suiObject?.content?.dataType !== 'package') {\n\t\treturn undefined;\n\t}\n\treturn (suiObject.content as SuiMovePackage).disassembled;\n}\n\nexport const CheckpointedObjectId = object({\n\tobjectId: string(),\n\tatCheckpoint: optional(number()),\n});\nexport type CheckpointedObjectId = Infer<typeof CheckpointedObjectId>;\n\nexport const PaginatedObjectsResponse = object({\n\tdata: array(SuiObjectResponse),\n\tnextCursor: optional(nullable(string())),\n\thasNextPage: boolean(),\n});\nexport type PaginatedObjectsResponse = Infer<typeof PaginatedObjectsResponse>;\n\n// mirrors sui_json_rpc_types:: SuiObjectDataFilter\nexport type SuiObjectDataFilter =\n\t| { MatchAll: SuiObjectDataFilter[] }\n\t| { MatchAny: SuiObjectDataFilter[] }\n\t| { MatchNone: SuiObjectDataFilter[] }\n\t| { Package: string }\n\t| { MoveModule: { package: string; module: string } }\n\t| { StructType: string }\n\t| { AddressOwner: string }\n\t| { ObjectOwner: string }\n\t| { ObjectId: string }\n\t| { ObjectIds: string[] }\n\t| { Version: string };\n\nexport type SuiObjectResponseQuery = {\n\tfilter?: SuiObjectDataFilter;\n\toptions?: SuiObjectDataOptions;\n};\n\nexport const ObjectRead = union([\n\tobject({\n\t\tdetails: SuiObjectData,\n\t\tstatus: literal('VersionFound'),\n\t}),\n\tobject({\n\t\tdetails: string(),\n\t\tstatus: literal('ObjectNotExists'),\n\t}),\n\tobject({\n\t\tdetails: SuiObjectRef,\n\t\tstatus: literal('ObjectDeleted'),\n\t}),\n\tobject({\n\t\tdetails: tuple([string(), number()]),\n\t\tstatus: literal('VersionNotFound'),\n\t}),\n\tobject({\n\t\tdetails: object({\n\t\t\tasked_version: number(),\n\t\t\tlatest_version: number(),\n\t\t\tobject_id: string(),\n\t\t}),\n\t\tstatus: literal('VersionTooHigh'),\n\t}),\n]);\nexport type ObjectRead = Infer<typeof ObjectRead>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { object, string, array, record, any, optional, boolean, nullable } from 'superstruct';\nimport type { SuiJsonValue } from './common.js';\n\nexport const EventId = object({\n\ttxDigest: string(),\n\teventSeq: string(),\n});\n\n// event types mirror those in \"sui-json-rpc-types/src/sui_event.rs\"\n\nexport const SuiEvent = object({\n\tid: EventId,\n\t// Move package where this event was emitted.\n\tpackageId: string(),\n\t// Move module where this event was emitted.\n\ttransactionModule: string(),\n\t// Sender's Sui address.\n\tsender: string(),\n\t// Move event type.\n\ttype: string(),\n\t// Parsed json value of the event\n\tparsedJson: optional(record(string(), any())),\n\t// Base 58 encoded bcs bytes of the move event\n\tbcs: optional(string()),\n\ttimestampMs: optional(string()),\n});\n\nexport type SuiEvent = Infer<typeof SuiEvent>;\n\nexport type MoveEventField = {\n\tpath: string;\n\tvalue: SuiJsonValue;\n};\n\n/**\n * Sequential event ID, ie (transaction seq number, event seq number).\n * 1) Serves as a unique event ID for each fullnode\n * 2) Also serves to sequence events for the purposes of pagination and querying.\n *    A higher id is an event seen later by that fullnode.\n * This ID is the \"cursor\" for event querying.\n */\nexport type EventId = Infer<typeof EventId>;\n\n// mirrors sui_json_rpc_types::SuiEventFilter\nexport type SuiEventFilter =\n\t| { Package: string }\n\t| { MoveModule: { package: string; module: string } }\n\t| { MoveEventType: string }\n\t| { MoveEventField: MoveEventField }\n\t| { Transaction: string }\n\t| {\n\t\t\tTimeRange: {\n\t\t\t\t// left endpoint of time interval, milliseconds since epoch, inclusive\n\t\t\t\tstartTime: string;\n\t\t\t\t// right endpoint of time interval, milliseconds since epoch, exclusive\n\t\t\t\tendTime: string;\n\t\t\t};\n\t  }\n\t| { Sender: string }\n\t| { All: SuiEventFilter[] }\n\t| { Any: SuiEventFilter[] }\n\t| { And: [SuiEventFilter, SuiEventFilter] }\n\t| { Or: [SuiEventFilter, SuiEventFilter] };\n\nexport const PaginatedEvents = object({\n\tdata: array(SuiEvent),\n\tnextCursor: nullable(EventId),\n\thasNextPage: boolean(),\n});\nexport type PaginatedEvents = Infer<typeof PaginatedEvents>;\n\n/* ------------------------------- EventData ------------------------------ */\n\nexport function getEventSender(event: SuiEvent): string {\n\treturn event.sender;\n}\n\nexport function getEventPackage(event: SuiEvent): string {\n\treturn event.packageId;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tis,\n\tarray,\n\tliteral,\n\tnumber,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n\tboolean,\n\ttuple,\n\tassign,\n\tnullable,\n} from 'superstruct';\n\nimport { ObjectOwner, SuiJsonValue } from './common.js';\nimport { SuiEvent } from './events.js';\nimport { SuiGasData, SuiMovePackage, SuiObjectRef } from './objects.js';\n\n/** @deprecated Use `string` instead. */\nexport const EpochId = string();\n\nexport const SuiChangeEpoch = object({\n\tepoch: string(),\n\tstorage_charge: string(),\n\tcomputation_charge: string(),\n\tstorage_rebate: string(),\n\tepoch_start_timestamp_ms: optional(string()),\n});\nexport type SuiChangeEpoch = Infer<typeof SuiChangeEpoch>;\n\nexport const SuiConsensusCommitPrologue = object({\n\tepoch: string(),\n\tround: string(),\n\tcommit_timestamp_ms: string(),\n});\nexport type SuiConsensusCommitPrologue = Infer<typeof SuiConsensusCommitPrologue>;\n\nexport const Genesis = object({\n\tobjects: array(string()),\n});\nexport type Genesis = Infer<typeof Genesis>;\n\nexport const SuiArgument = union([\n\tliteral('GasCoin'),\n\tobject({ Input: number() }),\n\tobject({ Result: number() }),\n\tobject({ NestedResult: tuple([number(), number()]) }),\n]);\nexport type SuiArgument = Infer<typeof SuiArgument>;\n\nexport const MoveCallSuiTransaction = object({\n\targuments: optional(array(SuiArgument)),\n\ttype_arguments: optional(array(string())),\n\tpackage: string(),\n\tmodule: string(),\n\tfunction: string(),\n});\nexport type MoveCallSuiTransaction = Infer<typeof MoveCallSuiTransaction>;\n\nexport const SuiTransaction = union([\n\tobject({ MoveCall: MoveCallSuiTransaction }),\n\tobject({ TransferObjects: tuple([array(SuiArgument), SuiArgument]) }),\n\tobject({ SplitCoins: tuple([SuiArgument, array(SuiArgument)]) }),\n\tobject({ MergeCoins: tuple([SuiArgument, array(SuiArgument)]) }),\n\tobject({\n\t\tPublish: union([\n\t\t\t// TODO: Remove this after 0.34 is released:\n\t\t\ttuple([SuiMovePackage, array(string())]),\n\t\t\tarray(string()),\n\t\t]),\n\t}),\n\tobject({\n\t\tUpgrade: union([\n\t\t\t// TODO: Remove this after 0.34 is released:\n\t\t\ttuple([SuiMovePackage, array(string()), string(), SuiArgument]),\n\t\t\ttuple([array(string()), string(), SuiArgument]),\n\t\t]),\n\t}),\n\tobject({ MakeMoveVec: tuple([nullable(string()), array(SuiArgument)]) }),\n]);\n\nexport const SuiCallArg = union([\n\tobject({\n\t\ttype: literal('pure'),\n\t\tvalueType: nullable(string()),\n\t\tvalue: SuiJsonValue,\n\t}),\n\tobject({\n\t\ttype: literal('object'),\n\t\tobjectType: literal('immOrOwnedObject'),\n\t\tobjectId: string(),\n\t\tversion: string(),\n\t\tdigest: string(),\n\t}),\n\tobject({\n\t\ttype: literal('object'),\n\t\tobjectType: literal('sharedObject'),\n\t\tobjectId: string(),\n\t\tinitialSharedVersion: string(),\n\t\tmutable: boolean(),\n\t}),\n]);\nexport type SuiCallArg = Infer<typeof SuiCallArg>;\n\nexport const ProgrammableTransaction = object({\n\ttransactions: array(SuiTransaction),\n\tinputs: array(SuiCallArg),\n});\nexport type ProgrammableTransaction = Infer<typeof ProgrammableTransaction>;\nexport type SuiTransaction = Infer<typeof SuiTransaction>;\n\n/**\n * 1. WaitForEffectsCert: waits for TransactionEffectsCert and then returns to the client.\n *    This mode is a proxy for transaction finality.\n * 2. WaitForLocalExecution: waits for TransactionEffectsCert and makes sure the node\n *    executed the transaction locally before returning to the client. The local execution\n *    makes sure this node is aware of this transaction when the client fires subsequent queries.\n *    However, if the node fails to execute the transaction locally in a timely manner,\n *    a bool type in the response is set to false to indicate the case.\n */\nexport type ExecuteTransactionRequestType = 'WaitForEffectsCert' | 'WaitForLocalExecution';\n\nexport type TransactionKindName =\n\t| 'ChangeEpoch'\n\t| 'ConsensusCommitPrologue'\n\t| 'Genesis'\n\t| 'ProgrammableTransaction';\n\nexport const SuiTransactionBlockKind = union([\n\tassign(SuiChangeEpoch, object({ kind: literal('ChangeEpoch') })),\n\tassign(\n\t\tSuiConsensusCommitPrologue,\n\t\tobject({\n\t\t\tkind: literal('ConsensusCommitPrologue'),\n\t\t}),\n\t),\n\tassign(Genesis, object({ kind: literal('Genesis') })),\n\tassign(ProgrammableTransaction, object({ kind: literal('ProgrammableTransaction') })),\n]);\nexport type SuiTransactionBlockKind = Infer<typeof SuiTransactionBlockKind>;\n\nexport const SuiTransactionBlockData = object({\n\t// Eventually this will become union(literal('v1'), literal('v2'), ...)\n\tmessageVersion: literal('v1'),\n\ttransaction: SuiTransactionBlockKind,\n\tsender: string(),\n\tgasData: SuiGasData,\n});\nexport type SuiTransactionBlockData = Infer<typeof SuiTransactionBlockData>;\n\n/** @deprecated Use `string` instead. */\nexport const AuthoritySignature = string();\nexport const GenericAuthoritySignature = union([string(), array(string())]);\n\nexport const AuthorityQuorumSignInfo = object({\n\tepoch: string(),\n\tsignature: GenericAuthoritySignature,\n\tsigners_map: array(number()),\n});\nexport type AuthorityQuorumSignInfo = Infer<typeof AuthorityQuorumSignInfo>;\n\nexport const GasCostSummary = object({\n\tcomputationCost: string(),\n\tstorageCost: string(),\n\tstorageRebate: string(),\n\tnonRefundableStorageFee: string(),\n});\nexport type GasCostSummary = Infer<typeof GasCostSummary>;\n\nexport const ExecutionStatusType = union([literal('success'), literal('failure')]);\nexport type ExecutionStatusType = Infer<typeof ExecutionStatusType>;\n\nexport const ExecutionStatus = object({\n\tstatus: ExecutionStatusType,\n\terror: optional(string()),\n});\nexport type ExecutionStatus = Infer<typeof ExecutionStatus>;\n\nexport const OwnedObjectRef = object({\n\towner: ObjectOwner,\n\treference: SuiObjectRef,\n});\nexport type OwnedObjectRef = Infer<typeof OwnedObjectRef>;\nexport const TransactionEffectsModifiedAtVersions = object({\n\tobjectId: string(),\n\tsequenceNumber: string(),\n});\n\nexport const TransactionEffects = object({\n\t// Eventually this will become union(literal('v1'), literal('v2'), ...)\n\tmessageVersion: literal('v1'),\n\n\t/** The status of the execution */\n\tstatus: ExecutionStatus,\n\t/** The epoch when this transaction was executed */\n\texecutedEpoch: string(),\n\t/** The version that every modified (mutated or deleted) object had before it was modified by this transaction. **/\n\tmodifiedAtVersions: optional(array(TransactionEffectsModifiedAtVersions)),\n\tgasUsed: GasCostSummary,\n\t/** The object references of the shared objects used in this transaction. Empty if no shared objects were used. */\n\tsharedObjects: optional(array(SuiObjectRef)),\n\t/** The transaction digest */\n\ttransactionDigest: string(),\n\t/** ObjectRef and owner of new objects created */\n\tcreated: optional(array(OwnedObjectRef)),\n\t/** ObjectRef and owner of mutated objects, including gas object */\n\tmutated: optional(array(OwnedObjectRef)),\n\t/**\n\t * ObjectRef and owner of objects that are unwrapped in this transaction.\n\t * Unwrapped objects are objects that were wrapped into other objects in the past,\n\t * and just got extracted out.\n\t */\n\tunwrapped: optional(array(OwnedObjectRef)),\n\t/** Object Refs of objects now deleted (the old refs) */\n\tdeleted: optional(array(SuiObjectRef)),\n\t/** Object Refs of objects now deleted (the old refs) */\n\tunwrappedThenDeleted: optional(array(SuiObjectRef)),\n\t/** Object refs of objects now wrapped in other objects */\n\twrapped: optional(array(SuiObjectRef)),\n\t/**\n\t * The updated gas object reference. Have a dedicated field for convenient access.\n\t * It's also included in mutated.\n\t */\n\tgasObject: OwnedObjectRef,\n\t/** The events emitted during execution. Note that only successful transactions emit events */\n\teventsDigest: nullable(optional(string())),\n\t/** The set of transaction digests this transaction depends on */\n\tdependencies: optional(array(string())),\n});\nexport type TransactionEffects = Infer<typeof TransactionEffects>;\n\nexport const TransactionEvents = array(SuiEvent);\nexport type TransactionEvents = Infer<typeof TransactionEvents>;\n\nconst ReturnValueType = tuple([array(number()), string()]);\nconst MutableReferenceOutputType = tuple([SuiArgument, array(number()), string()]);\nconst ExecutionResultType = object({\n\tmutableReferenceOutputs: optional(array(MutableReferenceOutputType)),\n\treturnValues: optional(array(ReturnValueType)),\n});\n\nexport const DevInspectResults = object({\n\teffects: TransactionEffects,\n\tevents: TransactionEvents,\n\tresults: optional(array(ExecutionResultType)),\n\terror: optional(string()),\n});\nexport type DevInspectResults = Infer<typeof DevInspectResults>;\n\nexport type SuiTransactionBlockResponseQuery = {\n\tfilter?: TransactionFilter;\n\toptions?: SuiTransactionBlockResponseOptions;\n};\n\nexport type TransactionFilter =\n\t| { FromOrToAddress: { addr: string } }\n\t| { Checkpoint: string }\n\t| { FromAndToAddress: { from: string; to: string } }\n\t| { TransactionKind: string }\n\t| {\n\t\t\tMoveFunction: {\n\t\t\t\tpackage: string;\n\t\t\t\tmodule: string | null;\n\t\t\t\tfunction: string | null;\n\t\t\t};\n\t  }\n\t| { InputObject: string }\n\t| { ChangedObject: string }\n\t| { FromAddress: string }\n\t| { ToAddress: string };\n\nexport type EmptySignInfo = object;\n\n/** @deprecated Use `string` instead. */\nexport const AuthorityName = string();\n/** @deprecated Use `string` instead. */\nexport type AuthorityName = Infer<typeof AuthorityName>;\n\nexport const SuiTransactionBlock = object({\n\tdata: SuiTransactionBlockData,\n\ttxSignatures: array(string()),\n});\nexport type SuiTransactionBlock = Infer<typeof SuiTransactionBlock>;\n\nexport const SuiObjectChangePublished = object({\n\ttype: literal('published'),\n\tpackageId: string(),\n\tversion: string(),\n\tdigest: string(),\n\tmodules: array(string()),\n});\nexport type SuiObjectChangePublished = Infer<typeof SuiObjectChangePublished>;\n\nexport const SuiObjectChangeTransferred = object({\n\ttype: literal('transferred'),\n\tsender: string(),\n\trecipient: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: string(),\n\tversion: string(),\n\tdigest: string(),\n});\nexport type SuiObjectChangeTransferred = Infer<typeof SuiObjectChangeTransferred>;\n\nexport const SuiObjectChangeMutated = object({\n\ttype: literal('mutated'),\n\tsender: string(),\n\towner: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: string(),\n\tversion: string(),\n\tpreviousVersion: string(),\n\tdigest: string(),\n});\nexport type SuiObjectChangeMutated = Infer<typeof SuiObjectChangeMutated>;\n\nexport const SuiObjectChangeDeleted = object({\n\ttype: literal('deleted'),\n\tsender: string(),\n\tobjectType: string(),\n\tobjectId: string(),\n\tversion: string(),\n});\nexport type SuiObjectChangeDeleted = Infer<typeof SuiObjectChangeDeleted>;\n\nexport const SuiObjectChangeWrapped = object({\n\ttype: literal('wrapped'),\n\tsender: string(),\n\tobjectType: string(),\n\tobjectId: string(),\n\tversion: string(),\n});\nexport type SuiObjectChangeWrapped = Infer<typeof SuiObjectChangeWrapped>;\n\nexport const SuiObjectChangeCreated = object({\n\ttype: literal('created'),\n\tsender: string(),\n\towner: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: string(),\n\tversion: string(),\n\tdigest: string(),\n});\nexport type SuiObjectChangeCreated = Infer<typeof SuiObjectChangeCreated>;\n\nexport const SuiObjectChange = union([\n\tSuiObjectChangePublished,\n\tSuiObjectChangeTransferred,\n\tSuiObjectChangeMutated,\n\tSuiObjectChangeDeleted,\n\tSuiObjectChangeWrapped,\n\tSuiObjectChangeCreated,\n]);\nexport type SuiObjectChange = Infer<typeof SuiObjectChange>;\n\nexport const BalanceChange = object({\n\towner: ObjectOwner,\n\tcoinType: string(),\n\t/* Coin balance change(positive means receive, negative means send) */\n\tamount: string(),\n});\n\nexport const SuiTransactionBlockResponse = object({\n\tdigest: string(),\n\ttransaction: optional(SuiTransactionBlock),\n\teffects: optional(TransactionEffects),\n\tevents: optional(TransactionEvents),\n\ttimestampMs: optional(string()),\n\tcheckpoint: optional(string()),\n\tconfirmedLocalExecution: optional(boolean()),\n\tobjectChanges: optional(array(SuiObjectChange)),\n\tbalanceChanges: optional(array(BalanceChange)),\n\t/* Errors that occurred in fetching/serializing the transaction. */\n\terrors: optional(array(string())),\n});\nexport type SuiTransactionBlockResponse = Infer<typeof SuiTransactionBlockResponse>;\n\nexport const SuiTransactionBlockResponseOptions = object({\n\t/* Whether to show transaction input data. Default to be false. */\n\tshowInput: optional(boolean()),\n\t/* Whether to show transaction effects. Default to be false. */\n\tshowEffects: optional(boolean()),\n\t/* Whether to show transaction events. Default to be false. */\n\tshowEvents: optional(boolean()),\n\t/* Whether to show object changes. Default to be false. */\n\tshowObjectChanges: optional(boolean()),\n\t/* Whether to show coin balance changes. Default to be false. */\n\tshowBalanceChanges: optional(boolean()),\n});\n\nexport type SuiTransactionBlockResponseOptions = Infer<typeof SuiTransactionBlockResponseOptions>;\n\nexport const PaginatedTransactionResponse = object({\n\tdata: array(SuiTransactionBlockResponse),\n\tnextCursor: nullable(string()),\n\thasNextPage: boolean(),\n});\nexport type PaginatedTransactionResponse = Infer<typeof PaginatedTransactionResponse>;\nexport const DryRunTransactionBlockResponse = object({\n\teffects: TransactionEffects,\n\tevents: TransactionEvents,\n\tobjectChanges: array(SuiObjectChange),\n\tbalanceChanges: array(BalanceChange),\n\t// TODO: Remove optional when this is rolled out to all networks:\n\tinput: optional(SuiTransactionBlockData),\n});\nexport type DryRunTransactionBlockResponse = Infer<typeof DryRunTransactionBlockResponse>;\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\nexport function getTransaction(tx: SuiTransactionBlockResponse): SuiTransactionBlock | undefined {\n\treturn tx.transaction;\n}\n\nexport function getTransactionDigest(tx: SuiTransactionBlockResponse): string {\n\treturn tx.digest;\n}\n\nexport function getTransactionSignature(tx: SuiTransactionBlockResponse): string[] | undefined {\n\treturn tx.transaction?.txSignatures;\n}\n\n/* ----------------------------- TransactionData ---------------------------- */\n\nexport function getTransactionSender(tx: SuiTransactionBlockResponse): string | undefined {\n\treturn tx.transaction?.data.sender;\n}\n\nexport function getGasData(tx: SuiTransactionBlockResponse): SuiGasData | undefined {\n\treturn tx.transaction?.data.gasData;\n}\n\nexport function getTransactionGasObject(\n\ttx: SuiTransactionBlockResponse,\n): SuiObjectRef[] | undefined {\n\treturn getGasData(tx)?.payment;\n}\n\nexport function getTransactionGasPrice(tx: SuiTransactionBlockResponse) {\n\treturn getGasData(tx)?.price;\n}\n\nexport function getTransactionGasBudget(tx: SuiTransactionBlockResponse) {\n\treturn getGasData(tx)?.budget;\n}\n\nexport function getChangeEpochTransaction(\n\tdata: SuiTransactionBlockKind,\n): SuiChangeEpoch | undefined {\n\treturn data.kind === 'ChangeEpoch' ? data : undefined;\n}\n\nexport function getConsensusCommitPrologueTransaction(\n\tdata: SuiTransactionBlockKind,\n): SuiConsensusCommitPrologue | undefined {\n\treturn data.kind === 'ConsensusCommitPrologue' ? data : undefined;\n}\n\nexport function getTransactionKind(\n\tdata: SuiTransactionBlockResponse,\n): SuiTransactionBlockKind | undefined {\n\treturn data.transaction?.data.transaction;\n}\n\nexport function getTransactionKindName(data: SuiTransactionBlockKind): TransactionKindName {\n\treturn data.kind;\n}\n\nexport function getProgrammableTransaction(\n\tdata: SuiTransactionBlockKind,\n): ProgrammableTransaction | undefined {\n\treturn data.kind === 'ProgrammableTransaction' ? data : undefined;\n}\n\n/* ----------------------------- ExecutionStatus ---------------------------- */\n\nexport function getExecutionStatusType(\n\tdata: SuiTransactionBlockResponse,\n): ExecutionStatusType | undefined {\n\treturn getExecutionStatus(data)?.status;\n}\n\nexport function getExecutionStatus(data: SuiTransactionBlockResponse): ExecutionStatus | undefined {\n\treturn getTransactionEffects(data)?.status;\n}\n\nexport function getExecutionStatusError(data: SuiTransactionBlockResponse): string | undefined {\n\treturn getExecutionStatus(data)?.error;\n}\n\nexport function getExecutionStatusGasSummary(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): GasCostSummary | undefined {\n\tif (is(data, TransactionEffects)) {\n\t\treturn data.gasUsed;\n\t}\n\treturn getTransactionEffects(data)?.gasUsed;\n}\n\nexport function getTotalGasUsed(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): bigint | undefined {\n\tconst gasSummary = getExecutionStatusGasSummary(data);\n\treturn gasSummary\n\t\t? BigInt(gasSummary.computationCost) +\n\t\t\t\tBigInt(gasSummary.storageCost) -\n\t\t\t\tBigInt(gasSummary.storageRebate)\n\t\t: undefined;\n}\n\nexport function getTotalGasUsedUpperBound(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): bigint | undefined {\n\tconst gasSummary = getExecutionStatusGasSummary(data);\n\treturn gasSummary\n\t\t? BigInt(gasSummary.computationCost) + BigInt(gasSummary.storageCost)\n\t\t: undefined;\n}\n\nexport function getTransactionEffects(\n\tdata: SuiTransactionBlockResponse,\n): TransactionEffects | undefined {\n\treturn data.effects;\n}\n\n/* ---------------------------- Transaction Effects --------------------------- */\n\nexport function getEvents(data: SuiTransactionBlockResponse): SuiEvent[] | undefined {\n\treturn data.events;\n}\n\nexport function getCreatedObjects(data: SuiTransactionBlockResponse): OwnedObjectRef[] | undefined {\n\treturn getTransactionEffects(data)?.created;\n}\n\n/* --------------------------- TransactionResponse -------------------------- */\n\nexport function getTimestampFromTransactionResponse(\n\tdata: SuiTransactionBlockResponse,\n): string | undefined {\n\treturn data.timestampMs ?? undefined;\n}\n\n/**\n * Get the newly created coin refs after a split.\n */\nexport function getNewlyCreatedCoinRefsAfterSplit(\n\tdata: SuiTransactionBlockResponse,\n): SuiObjectRef[] | undefined {\n\treturn getTransactionEffects(data)?.created?.map((c) => c.reference);\n}\n\nexport function getObjectChanges(data: SuiTransactionBlockResponse): SuiObjectChange[] | undefined {\n\treturn data.objectChanges;\n}\n\nexport function getPublishedObjectChanges(\n\tdata: SuiTransactionBlockResponse,\n): SuiObjectChangePublished[] {\n\treturn (\n\t\t(data.objectChanges?.filter((a) =>\n\t\t\tis(a, SuiObjectChangePublished),\n\t\t) as SuiObjectChangePublished[]) ?? []\n\t);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tobject,\n\tstring,\n\tunion,\n\tboolean,\n\tdefine,\n\tnumber,\n\tliteral,\n\trecord,\n\tis,\n\ttuple,\n} from 'superstruct';\n\nexport type SuiMoveFunctionArgTypesResponse = Infer<typeof SuiMoveFunctionArgType>[];\n\nexport const SuiMoveFunctionArgType = union([string(), object({ Object: string() })]);\n\nexport const SuiMoveFunctionArgTypes = array(SuiMoveFunctionArgType);\nexport type SuiMoveFunctionArgTypes = Infer<typeof SuiMoveFunctionArgTypes>;\n\nexport const SuiMoveModuleId = object({\n\taddress: string(),\n\tname: string(),\n});\nexport type SuiMoveModuleId = Infer<typeof SuiMoveModuleId>;\n\nexport const SuiMoveVisibility = union([literal('Private'), literal('Public'), literal('Friend')]);\nexport type SuiMoveVisibility = Infer<typeof SuiMoveVisibility>;\n\nexport const SuiMoveAbilitySet = object({\n\tabilities: array(string()),\n});\nexport type SuiMoveAbilitySet = Infer<typeof SuiMoveAbilitySet>;\n\nexport const SuiMoveStructTypeParameter = object({\n\tconstraints: SuiMoveAbilitySet,\n\tisPhantom: boolean(),\n});\nexport type SuiMoveStructTypeParameter = Infer<typeof SuiMoveStructTypeParameter>;\n\nexport const SuiMoveNormalizedTypeParameterType = object({\n\tTypeParameter: number(),\n});\nexport type SuiMoveNormalizedTypeParameterType = Infer<typeof SuiMoveNormalizedTypeParameterType>;\n\nexport type SuiMoveNormalizedType =\n\t| string\n\t| SuiMoveNormalizedTypeParameterType\n\t| { Reference: SuiMoveNormalizedType }\n\t| { MutableReference: SuiMoveNormalizedType }\n\t| { Vector: SuiMoveNormalizedType }\n\t| SuiMoveNormalizedStructType;\n\nexport const MoveCallMetric = tuple([\n\tobject({\n\t\tmodule: string(),\n\t\tpackage: string(),\n\t\tfunction: string(),\n\t}),\n\tstring(),\n]);\n\nexport type MoveCallMetric = Infer<typeof MoveCallMetric>;\n\nexport const MoveCallMetrics = object({\n\trank3Days: array(MoveCallMetric),\n\trank7Days: array(MoveCallMetric),\n\trank30Days: array(MoveCallMetric),\n});\n\nexport type MoveCallMetrics = Infer<typeof MoveCallMetrics>;\n\nfunction isSuiMoveNormalizedType(value: unknown): value is SuiMoveNormalizedType {\n\tif (!value) return false;\n\tif (typeof value === 'string') return true;\n\tif (is(value, SuiMoveNormalizedTypeParameterType)) return true;\n\tif (isSuiMoveNormalizedStructType(value)) return true;\n\tif (typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (is(valueProperties.Reference, SuiMoveNormalizedType)) return true;\n\tif (is(valueProperties.MutableReference, SuiMoveNormalizedType)) return true;\n\tif (is(valueProperties.Vector, SuiMoveNormalizedType)) return true;\n\treturn false;\n}\n\nexport const SuiMoveNormalizedType = define<SuiMoveNormalizedType>(\n\t'SuiMoveNormalizedType',\n\tisSuiMoveNormalizedType,\n);\n\nexport type SuiMoveNormalizedStructType = {\n\tStruct: {\n\t\taddress: string;\n\t\tmodule: string;\n\t\tname: string;\n\t\ttypeArguments: SuiMoveNormalizedType[];\n\t};\n};\n\nfunction isSuiMoveNormalizedStructType(value: unknown): value is SuiMoveNormalizedStructType {\n\tif (!value || typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (!valueProperties.Struct || typeof valueProperties.Struct !== 'object') return false;\n\n\tconst structProperties = valueProperties.Struct as Record<string, unknown>;\n\tif (\n\t\ttypeof structProperties.address !== 'string' ||\n\t\ttypeof structProperties.module !== 'string' ||\n\t\ttypeof structProperties.name !== 'string' ||\n\t\t!Array.isArray(structProperties.typeArguments) ||\n\t\t!structProperties.typeArguments.every((value) => isSuiMoveNormalizedType(value))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// NOTE: This type is recursive, so we need to manually implement it:\nexport const SuiMoveNormalizedStructType = define<SuiMoveNormalizedStructType>(\n\t'SuiMoveNormalizedStructType',\n\tisSuiMoveNormalizedStructType,\n);\n\nexport const SuiMoveNormalizedFunction = object({\n\tvisibility: SuiMoveVisibility,\n\tisEntry: boolean(),\n\ttypeParameters: array(SuiMoveAbilitySet),\n\tparameters: array(SuiMoveNormalizedType),\n\treturn: array(SuiMoveNormalizedType),\n});\nexport type SuiMoveNormalizedFunction = Infer<typeof SuiMoveNormalizedFunction>;\n\nexport const SuiMoveNormalizedField = object({\n\tname: string(),\n\ttype: SuiMoveNormalizedType,\n});\nexport type SuiMoveNormalizedField = Infer<typeof SuiMoveNormalizedField>;\n\nexport const SuiMoveNormalizedStruct = object({\n\tabilities: SuiMoveAbilitySet,\n\ttypeParameters: array(SuiMoveStructTypeParameter),\n\tfields: array(SuiMoveNormalizedField),\n});\nexport type SuiMoveNormalizedStruct = Infer<typeof SuiMoveNormalizedStruct>;\n\nexport const SuiMoveNormalizedModule = object({\n\tfileFormatVersion: number(),\n\taddress: string(),\n\tname: string(),\n\tfriends: array(SuiMoveModuleId),\n\tstructs: record(string(), SuiMoveNormalizedStruct),\n\texposedFunctions: record(string(), SuiMoveNormalizedFunction),\n});\nexport type SuiMoveNormalizedModule = Infer<typeof SuiMoveNormalizedModule>;\n\nexport const SuiMoveNormalizedModules = record(string(), SuiMoveNormalizedModule);\nexport type SuiMoveNormalizedModules = Infer<typeof SuiMoveNormalizedModules>;\n\nexport function extractMutableReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n\t\t? normalizedType.MutableReference\n\t\t: undefined;\n}\n\nexport function extractReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'Reference' in normalizedType\n\t\t? normalizedType.Reference\n\t\t: undefined;\n}\n\nexport function extractStructTag(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedStructType | undefined {\n\tif (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n\t\treturn normalizedType;\n\t}\n\n\tconst ref = extractReference(normalizedType);\n\tconst mutRef = extractMutableReference(normalizedType);\n\n\tif (typeof ref === 'object' && 'Struct' in ref) {\n\t\treturn ref;\n\t}\n\n\tif (typeof mutRef === 'object' && 'Struct' in mutRef) {\n\t\treturn mutRef;\n\t}\n\treturn undefined;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tboolean,\n\tliteral,\n\tnumber,\n\tobject,\n\tstring,\n\tunion,\n\tnullable,\n\ttuple,\n\toptional,\n} from 'superstruct';\n\n/* -------------- Types for the SuiSystemState Rust definition -------------- */\n\nexport type DelegatedStake = Infer<typeof DelegatedStake>;\nexport type CommitteeInfo = Infer<typeof CommitteeInfo>;\nexport type StakeObject = Infer<typeof StakeObject>;\n\n// APY Response\nexport const Apy = object({\n\tapy: number(),\n\taddress: string(),\n});\n\nexport const ValidatorsApy = object({\n\tepoch: string(),\n\tapys: array(Apy),\n});\n\nexport type ValidatorsApy = Infer<typeof ValidatorsApy>;\n\n// Staking\nexport const Balance = object({\n\tvalue: number(),\n});\n\nexport const StakeObject = object({\n\tstakedSuiId: string(),\n\tstakeRequestEpoch: string(),\n\tstakeActiveEpoch: string(),\n\tprincipal: string(),\n\tstatus: union([literal('Active'), literal('Pending'), literal('Unstaked')]),\n\testimatedReward: optional(string()),\n});\n\nexport const DelegatedStake = object({\n\tvalidatorAddress: string(),\n\tstakingPool: string(),\n\tstakes: array(StakeObject),\n});\n\nexport const StakeSubsidyFields = object({\n\tbalance: object({ value: number() }),\n\tdistribution_counter: number(),\n\tcurrent_distribution_amount: number(),\n\tstake_subsidy_period_length: number(),\n\tstake_subsidy_decrease_rate: number(),\n});\n\nexport const StakeSubsidy = object({\n\ttype: string(),\n\tfields: StakeSubsidyFields,\n});\n\nexport const SuiSupplyFields = object({\n\tvalue: number(),\n});\n\nexport const ContentsFields = object({\n\tid: string(),\n\tsize: number(),\n\thead: object({ vec: array() }),\n\ttail: object({ vec: array() }),\n});\n\nexport const ContentsFieldsWithdraw = object({\n\tid: string(),\n\tsize: number(),\n});\n\nexport const Contents = object({\n\ttype: string(),\n\tfields: ContentsFields,\n});\n\nexport const DelegationStakingPoolFields = object({\n\texchangeRates: object({\n\t\tid: string(),\n\t\tsize: number(),\n\t}),\n\tid: string(),\n\tpendingStake: number(),\n\tpendingPoolTokenWithdraw: number(),\n\tpendingTotalSuiWithdraw: number(),\n\tpoolTokenBalance: number(),\n\trewardsPool: object({ value: number() }),\n\tactivationEpoch: object({ vec: array() }),\n\tdeactivationEpoch: object({ vec: array() }),\n\tsuiBalance: number(),\n});\n\nexport const DelegationStakingPool = object({\n\ttype: string(),\n\tfields: DelegationStakingPoolFields,\n});\n\nexport const Validators = array(tuple([string(), string()]));\n\nexport const CommitteeInfo = object({\n\tepoch: string(),\n\t/** Array of (validator public key, stake unit) tuple */\n\tvalidators: Validators,\n});\n\nexport const SuiValidatorSummary = object({\n\tsuiAddress: string(),\n\tprotocolPubkeyBytes: string(),\n\tnetworkPubkeyBytes: string(),\n\tworkerPubkeyBytes: string(),\n\tproofOfPossessionBytes: string(),\n\toperationCapId: string(),\n\tname: string(),\n\tdescription: string(),\n\timageUrl: string(),\n\tprojectUrl: string(),\n\tp2pAddress: string(),\n\tnetAddress: string(),\n\tprimaryAddress: string(),\n\tworkerAddress: string(),\n\tnextEpochProtocolPubkeyBytes: nullable(string()),\n\tnextEpochProofOfPossession: nullable(string()),\n\tnextEpochNetworkPubkeyBytes: nullable(string()),\n\tnextEpochWorkerPubkeyBytes: nullable(string()),\n\tnextEpochNetAddress: nullable(string()),\n\tnextEpochP2pAddress: nullable(string()),\n\tnextEpochPrimaryAddress: nullable(string()),\n\tnextEpochWorkerAddress: nullable(string()),\n\tvotingPower: string(),\n\tgasPrice: string(),\n\tcommissionRate: string(),\n\tnextEpochStake: string(),\n\tnextEpochGasPrice: string(),\n\tnextEpochCommissionRate: string(),\n\tstakingPoolId: string(),\n\tstakingPoolActivationEpoch: nullable(string()),\n\tstakingPoolDeactivationEpoch: nullable(string()),\n\tstakingPoolSuiBalance: string(),\n\trewardsPool: string(),\n\tpoolTokenBalance: string(),\n\tpendingStake: string(),\n\tpendingPoolTokenWithdraw: string(),\n\tpendingTotalSuiWithdraw: string(),\n\texchangeRatesId: string(),\n\texchangeRatesSize: string(),\n});\n\nexport type SuiValidatorSummary = Infer<typeof SuiValidatorSummary>;\n\nexport const SuiSystemStateSummary = object({\n\tepoch: string(),\n\tprotocolVersion: string(),\n\tsystemStateVersion: string(),\n\tstorageFundTotalObjectStorageRebates: string(),\n\tstorageFundNonRefundableBalance: string(),\n\treferenceGasPrice: string(),\n\tsafeMode: boolean(),\n\tsafeModeStorageRewards: string(),\n\tsafeModeComputationRewards: string(),\n\tsafeModeStorageRebates: string(),\n\tsafeModeNonRefundableStorageFee: string(),\n\tepochStartTimestampMs: string(),\n\tepochDurationMs: string(),\n\tstakeSubsidyStartEpoch: string(),\n\tmaxValidatorCount: string(),\n\tminValidatorJoiningStake: string(),\n\tvalidatorLowStakeThreshold: string(),\n\tvalidatorVeryLowStakeThreshold: string(),\n\tvalidatorLowStakeGracePeriod: string(),\n\tstakeSubsidyBalance: string(),\n\tstakeSubsidyDistributionCounter: string(),\n\tstakeSubsidyCurrentDistributionAmount: string(),\n\tstakeSubsidyPeriodLength: string(),\n\tstakeSubsidyDecreaseRate: number(),\n\ttotalStake: string(),\n\tactiveValidators: array(SuiValidatorSummary),\n\tpendingActiveValidatorsId: string(),\n\tpendingActiveValidatorsSize: string(),\n\tpendingRemovals: array(string()),\n\tstakingPoolMappingsId: string(),\n\tstakingPoolMappingsSize: string(),\n\tinactivePoolsId: string(),\n\tinactivePoolsSize: string(),\n\tvalidatorCandidatesId: string(),\n\tvalidatorCandidatesSize: string(),\n\tatRiskValidators: array(tuple([string(), string()])),\n\tvalidatorReportRecords: array(tuple([string(), array(string())])),\n});\n\nexport type SuiSystemStateSummary = Infer<typeof SuiSystemStateSummary>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { array, boolean, nullable, number, object, optional, string } from 'superstruct';\n\nexport const CoinStruct = object({\n\tcoinType: string(),\n\t// TODO(chris): rename this to objectId\n\tcoinObjectId: string(),\n\tversion: string(),\n\tdigest: string(),\n\tbalance: string(),\n\tpreviousTransaction: string(),\n});\n\nexport type CoinStruct = Infer<typeof CoinStruct>;\n\nexport const PaginatedCoins = object({\n\tdata: array(CoinStruct),\n\tnextCursor: nullable(string()),\n\thasNextPage: boolean(),\n});\n\nexport type PaginatedCoins = Infer<typeof PaginatedCoins>;\n\nexport const CoinBalance = object({\n\tcoinType: string(),\n\tcoinObjectCount: number(),\n\ttotalBalance: string(),\n\tlockedBalance: object({\n\t\tepochId: optional(number()),\n\t\tnumber: optional(number()),\n\t}),\n});\n\nexport type CoinBalance = Infer<typeof CoinBalance>;\n\nexport const CoinSupply = object({\n\tvalue: string(),\n});\n\nexport type CoinSupply = Infer<typeof CoinSupply>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { Infer } from 'superstruct';\nimport { array, boolean, nullable, number, object, string } from 'superstruct';\nimport { SuiValidatorSummary } from './validator.js';\n\nexport const EndOfEpochInfo = object({\n\tlastCheckpointId: string(),\n\tepochEndTimestamp: string(),\n\tprotocolVersion: string(),\n\treferenceGasPrice: string(),\n\ttotalStake: string(),\n\tstorageFundReinvestment: string(),\n\tstorageCharge: string(),\n\tstorageRebate: string(),\n\tstorageFundBalance: string(),\n\tstakeSubsidyAmount: string(),\n\ttotalGasFees: string(),\n\ttotalStakeRewardsDistributed: string(),\n\tleftoverStorageFundInflow: string(),\n});\n\nexport type EndOfEpochInfo = Infer<typeof EndOfEpochInfo>;\n\nexport const EpochInfo = object({\n\tepoch: string(),\n\tvalidators: array(SuiValidatorSummary),\n\tepochTotalTransactions: string(),\n\tfirstCheckpointId: string(),\n\tepochStartTimestamp: string(),\n\tendOfEpochInfo: nullable(EndOfEpochInfo),\n\treferenceGasPrice: nullable(number()),\n});\n\nexport type EpochInfo = Infer<typeof EpochInfo>;\n\nexport const EpochPage = object({\n\tdata: array(EpochInfo),\n\tnextCursor: nullable(string()),\n\thasNextPage: boolean(),\n});\n\nexport type EpochPage = Infer<typeof EpochPage>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { array, boolean, nullable, object, string } from 'superstruct';\n\nexport const ResolvedNameServiceNames = object({\n\tdata: array(string()),\n\thasNextPage: boolean(),\n\tnextCursor: nullable(string()),\n});\nexport type ResolvedNameServiceNames = Infer<typeof ResolvedNameServiceNames>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { any, array, boolean, literal, nullable, number, object, string, union } from 'superstruct';\n\nexport const DynamicFieldType = union([literal('DynamicField'), literal('DynamicObject')]);\nexport type DynamicFieldType = Infer<typeof DynamicFieldType>;\n\nexport const DynamicFieldName = object({\n\ttype: string(),\n\tvalue: any(),\n});\nexport type DynamicFieldName = Infer<typeof DynamicFieldName>;\n\nexport const DynamicFieldInfo = object({\n\tname: DynamicFieldName,\n\tbcsName: string(),\n\ttype: DynamicFieldType,\n\tobjectType: string(),\n\tobjectId: string(),\n\tversion: number(),\n\tdigest: string(),\n});\nexport type DynamicFieldInfo = Infer<typeof DynamicFieldInfo>;\n\nexport const DynamicFieldPage = object({\n\tdata: array(DynamicFieldInfo),\n\tnextCursor: nullable(string()),\n\thasNextPage: boolean(),\n});\nexport type DynamicFieldPage = Infer<typeof DynamicFieldPage>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { array, number, object, string } from 'superstruct';\n\nexport const NetworkMetrics = object({\n\tcurrentTps: number(),\n\ttps30Days: number(),\n\tcurrentCheckpoint: string(),\n\tcurrentEpoch: string(),\n\ttotalAddresses: string(),\n\ttotalObjects: string(),\n\ttotalPackages: string(),\n});\nexport type NetworkMetrics = typeof NetworkMetrics.TYPE;\n\nexport const AddressMetrics = object({\n\tcheckpoint: number(),\n\tepoch: number(),\n\ttimestampMs: number(),\n\tcumulativeAddresses: number(),\n\tcumulativeActiveAddresses: number(),\n\tdailyActiveAddresses: number(),\n});\nexport type AddressMetrics = typeof AddressMetrics.TYPE;\n\nexport const AllEpochsAddressMetrics = array(AddressMetrics);\nexport type AllEpochsAddressMetrics = typeof AllEpochsAddressMetrics.TYPE;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { ExportedKeypair } from '../../cryptography/keypair.js';\nimport { Keypair } from '../../cryptography/keypair.js';\nimport type { PublicKey } from '../../cryptography/publickey.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Secp256r1PublicKey } from './publickey.js';\nimport { secp256r1 } from '@noble/curves/p256';\nimport { isValidBIP32Path, mnemonicToSeed } from '../../cryptography/mnemonics.js';\nimport { HDKey } from '@scure/bip32';\nimport { toB64 } from '@mysten/bcs';\nimport type { SignatureScheme } from '../../cryptography/signature.js';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { blake2b } from '@noble/hashes/blake2b';\n\nexport const DEFAULT_SECP256R1_DERIVATION_PATH = \"m/74'/784'/0'/0/0\";\n\n/**\n * Secp256r1 Keypair data\n */\nexport interface Secp256r1KeypairData {\n\tpublicKey: Uint8Array;\n\tsecretKey: Uint8Array;\n}\n\n/**\n * An Secp256r1 Keypair used for signing transactions.\n */\nexport class Secp256r1Keypair extends Keypair {\n\tprivate keypair: Secp256r1KeypairData;\n\n\t/**\n\t * Create a new keypair instance.\n\t * Generate random keypair if no {@link Secp256r1Keypair} is provided.\n\t *\n\t * @param keypair Secp256r1 keypair\n\t */\n\tconstructor(keypair?: Secp256r1KeypairData) {\n\t\tsuper();\n\t\tif (keypair) {\n\t\t\tthis.keypair = keypair;\n\t\t} else {\n\t\t\tconst secretKey: Uint8Array = secp256r1.utils.randomPrivateKey();\n\t\t\tconst publicKey: Uint8Array = secp256r1.getPublicKey(secretKey, true);\n\n\t\t\tthis.keypair = { publicKey, secretKey };\n\t\t}\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair Secp256r1\n\t */\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'Secp256r1';\n\t}\n\n\t/**\n\t * Generate a new random keypair\n\t */\n\tstatic generate(): Secp256r1Keypair {\n\t\treturn new Secp256r1Keypair();\n\t}\n\n\t/**\n\t * Create a keypair from a raw secret key byte array.\n\t *\n\t * This method should only be used to recreate a keypair from a previously\n\t * generated secret key. Generating keypairs from a random seed should be done\n\t * with the {@link Keypair.fromSeed} method.\n\t *\n\t * @throws error if the provided secret key is invalid and validation is not skipped.\n\t *\n\t * @param secretKey secret key byte array\n\t * @param options: skip secret key validation\n\t */\n\n\tstatic fromSecretKey(\n\t\tsecretKey: Uint8Array,\n\t\toptions?: { skipValidation?: boolean },\n\t): Secp256r1Keypair {\n\t\tconst publicKey: Uint8Array = secp256r1.getPublicKey(secretKey, true);\n\t\tif (!options || !options.skipValidation) {\n\t\t\tconst encoder = new TextEncoder();\n\t\t\tconst signData = encoder.encode('sui validation');\n\t\t\tconst msgHash = bytesToHex(blake2b(signData, { dkLen: 32 }));\n\t\t\tconst signature = secp256r1.sign(msgHash, secretKey, { lowS: true });\n\t\t\tif (!secp256r1.verify(signature, msgHash, publicKey, { lowS: true })) {\n\t\t\t\tthrow new Error('Provided secretKey is invalid');\n\t\t\t}\n\t\t}\n\t\treturn new Secp256r1Keypair({ publicKey, secretKey });\n\t}\n\n\t/**\n\t * Generate a keypair from a 32 byte seed.\n\t *\n\t * @param seed seed byte array\n\t */\n\tstatic fromSeed(seed: Uint8Array): Secp256r1Keypair {\n\t\tlet publicKey = secp256r1.getPublicKey(seed, true);\n\t\treturn new Secp256r1Keypair({ publicKey, secretKey: seed });\n\t}\n\n\t/**\n\t * The public key for this keypair\n\t */\n\tgetPublicKey(): PublicKey {\n\t\treturn new Secp256r1PublicKey(this.keypair.publicKey);\n\t}\n\n\tasync sign(data: Uint8Array) {\n\t\treturn this.signData(data);\n\t}\n\n\t/**\n\t * Return the signature for the provided data.\n\t */\n\tsignData(data: Uint8Array): Uint8Array {\n\t\tconst msgHash = sha256(data);\n\t\tconst sig = secp256r1.sign(msgHash, this.keypair.secretKey, {\n\t\t\tlowS: true,\n\t\t});\n\t\treturn sig.toCompactRawBytes();\n\t}\n\n\t/**\n\t * Derive Secp256r1 keypair from mnemonics and path. The mnemonics must be normalized\n\t * and validated against the english wordlist.\n\t *\n\t * If path is none, it will default to m/74'/784'/0'/0/0, otherwise the path must\n\t * be compliant to BIP-32 in form m/74'/784'/{account_index}'/{change_index}/{address_index}.\n\t */\n\tstatic deriveKeypair(mnemonics: string, path?: string): Secp256r1Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_SECP256R1_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidBIP32Path(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\t// We use HDKey which is hardcoded to use Secp256k1 but since we only need the 32 bytes for the private key it's okay to use here as well.\n\t\tconst privateKey = HDKey.fromMasterSeed(mnemonicToSeed(mnemonics)).derive(path).privateKey;\n\t\treturn Secp256r1Keypair.fromSecretKey(privateKey!);\n\t}\n\n\texport(): ExportedKeypair {\n\t\treturn {\n\t\t\tschema: 'Secp256r1',\n\t\t\tprivateKey: toB64(this.keypair.secretKey),\n\t\t};\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RequestManager, HTTPTransport, Client } from '@open-rpc/client-js';\nimport type { Struct } from 'superstruct';\nimport { validate } from 'superstruct';\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from '../version.js';\nimport { RPCValidationError } from './errors.js';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\nexport class JsonRpcClient {\n\tprivate rpcClient: Client;\n\n\tconstructor(url: string, httpHeaders?: HttpHeaders) {\n\t\tconst transport = new HTTPTransport(url, {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Client-Sdk-Type': 'typescript',\n\t\t\t\t'Client-Sdk-Version': PACKAGE_VERSION,\n\t\t\t\t'Client-Target-Api-Version': TARGETED_RPC_VERSION,\n\t\t\t\t...httpHeaders,\n\t\t\t},\n\t\t});\n\n\t\tthis.rpcClient = new Client(new RequestManager([transport]));\n\t}\n\n\tasync requestWithType<T>(method: string, args: any[], struct: Struct<T>): Promise<T> {\n\t\tconst req = { method, args };\n\n\t\tconst response = await this.request(method, args);\n\n\t\tif (process.env.NODE_ENV === 'test') {\n\t\t\tconst [err] = validate(response, struct);\n\t\t\tif (err) {\n\t\t\t\tthrow new RPCValidationError({\n\t\t\t\t\treq,\n\t\t\t\t\tresult: response,\n\t\t\t\t\tcause: err,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tasync request(method: string, params: any[]): Promise<any> {\n\t\treturn await this.rpcClient.request({ method, params });\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This file is generated by genversion.mjs. Do not edit it directly.\n\nexport const PACKAGE_VERSION = '0.38.0';\nexport const TARGETED_RPC_VERSION = '1.7.0';\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\ninterface RPCErrorRequest {\n\tmethod: string;\n\targs: any[];\n}\n\nexport class RPCValidationError extends Error {\n\treq: RPCErrorRequest;\n\tresult?: unknown;\n\n\tconstructor(options: { req: RPCErrorRequest; result?: unknown; cause?: Error }) {\n\t\tsuper(\n\t\t\t'RPC Validation Error: The response returned from RPC server does not match the TypeScript definition. This is likely because the SDK version is not compatible with the RPC server.',\n\t\t\t{ cause: options.cause },\n\t\t);\n\n\t\tthis.req = options.req;\n\t\tthis.result = options.result;\n\t\tthis.message = this.toString();\n\t}\n\n\ttoString() {\n\t\tlet str = super.toString();\n\t\tif (this.cause) {\n\t\t\tstr += `\\nCause: ${this.cause}`;\n\t\t}\n\t\tif (this.result) {\n\t\t\tstr += `\\nReponse Received: ${JSON.stringify(this.result, null, 2)}`;\n\t\t}\n\t\treturn str;\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RequestManager, Client, WebSocketTransport } from '@open-rpc/client-js';\n\nexport const getWebsocketUrl = (httpUrl: string, port?: number): string => {\n\tconst url = new URL(httpUrl);\n\turl.protocol = url.protocol.replace('http', 'ws');\n\tif (port) {\n\t\turl.port = port.toString();\n\t}\n\treturn url.toString();\n};\n\ntype NotificationMessageParams = {\n\tsubscription: number;\n\tresult: object;\n};\n\ntype SubscriptionRequest<T = any> = {\n\tid?: number;\n\tinitialId?: number;\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: any[];\n\tonMessage: (event: T) => void;\n};\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n\t/**\n\t * Milliseconds before timing out while calling an RPC method\n\t */\n\tcallTimeout: number;\n\t/**\n\t * Milliseconds between attempts to connect\n\t */\n\treconnectTimeout: number;\n\t/**\n\t * Maximum number of times to try connecting before giving up\n\t */\n\tmaxReconnects: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS: WebsocketClientOptions = {\n\tcallTimeout: 30000,\n\treconnectTimeout: 3000,\n\tmaxReconnects: 5,\n};\n\nexport class WebsocketClient {\n\t#client: Client | null;\n\t#subscriptions: Map<number, SubscriptionRequest & { id: number }>;\n\t#disconnects: number;\n\n\tconstructor(\n\t\tpublic endpoint: string,\n\t\tpublic options: WebsocketClientOptions = DEFAULT_CLIENT_OPTIONS,\n\t) {\n\t\tif (this.endpoint.startsWith('http')) {\n\t\t\tthis.endpoint = getWebsocketUrl(this.endpoint);\n\t\t}\n\n\t\tthis.#client = null;\n\t\tthis.#subscriptions = new Map();\n\t\tthis.#disconnects = 0;\n\t}\n\n\t#setupClient() {\n\t\tif (this.#client) {\n\t\t\treturn this.#client;\n\t\t}\n\n\t\tconst transport = new WebSocketTransport(this.endpoint);\n\t\tconst requestManager = new RequestManager([transport]);\n\t\tthis.#client = new Client(requestManager);\n\n\t\ttransport.connection.addEventListener('open', () => {\n\t\t\tthis.#disconnects = 0;\n\t\t});\n\n\t\ttransport.connection.addEventListener('close', () => {\n\t\t\tthis.#disconnects++;\n\t\t\tif (this.#disconnects <= this.options.maxReconnects) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.#reconnect();\n\t\t\t\t}, this.options.reconnectTimeout);\n\t\t\t}\n\t\t});\n\n\t\tthis.#client.onNotification((data) => {\n\t\t\tconst params = data.params as NotificationMessageParams;\n\n\t\t\tthis.#subscriptions.forEach((subscription) => {\n\t\t\t\tif (subscription.method === data.method && params.subscription === subscription.id) {\n\t\t\t\t\tsubscription.onMessage(params.result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.#client;\n\t}\n\n\t#reconnect() {\n\t\tthis.#client?.close();\n\t\tthis.#client = null;\n\n\t\tthis.#subscriptions.forEach((subscription) => this.request(subscription));\n\t}\n\n\tasync request<T>(input: SubscriptionRequest<T>) {\n\t\tconst client = this.#setupClient();\n\t\tconst id = await client.request(\n\t\t\t{ method: input.method, params: input.params },\n\t\t\tthis.options.callTimeout,\n\t\t);\n\t\tconst initialId = input.initialId || id;\n\t\tthis.#subscriptions.set(initialId, {\n\t\t\t...input,\n\t\t\t// Always set the latest actual subscription ID:\n\t\t\tid,\n\t\t\tinitialId,\n\t\t});\n\n\t\treturn async () => {\n\t\t\tconst client = this.#setupClient();\n\t\t\t// NOTE: Due to reconnects, the inner subscription ID could have actually changed:\n\t\t\tconst subscription = this.#subscriptions.get(initialId);\n\t\t\tif (!subscription) return false;\n\n\t\t\tthis.#subscriptions.delete(initialId);\n\n\t\t\treturn client.request(\n\t\t\t\t{ method: input.unsubscribe, params: [subscription.id] },\n\t\t\t\tthis.options.callTimeout,\n\t\t\t);\n\t\t};\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\ninterface ConnectionOptions {\n\tfullnode: string;\n\twebsocket?: string;\n\t/** @deprecated Use the new faucet APIs from `@mysten/sui.js/faucet` instead. */\n\tfaucet?: string;\n}\n\nexport class Connection {\n\t#options: ConnectionOptions;\n\tconstructor(options: ConnectionOptions) {\n\t\tthis.#options = options;\n\t}\n\n\tget fullnode() {\n\t\treturn this.#options.fullnode;\n\t}\n\n\t// TODO: Decide if we should default the websocket URL like this:\n\tget websocket() {\n\t\treturn this.#options.websocket || this.#options.fullnode;\n\t}\n\n\t/** @deprecated Use the new faucet APIs from `@mysten/sui.js/faucet` instead. */\n\tget faucet() {\n\t\treturn this.#options.faucet;\n\t}\n}\n\n// TODO: Maybe don't have pre-built connections, and instead just have pre-built objects that folks\n// can use with the connection?\nexport const localnetConnection = new Connection({\n\tfullnode: 'http://127.0.0.1:9000',\n\tfaucet: 'http://127.0.0.1:9123/gas',\n});\n\nexport const devnetConnection = new Connection({\n\tfullnode: 'https://fullnode.devnet.sui.io:443/',\n\tfaucet: 'https://faucet.devnet.sui.io/gas',\n});\n\nexport const testnetConnection = new Connection({\n\tfullnode: 'https://fullnode.testnet.sui.io:443/',\n\tfaucet: 'https://faucet.testnet.sui.io/gas',\n});\n\nexport const mainnetConnection = new Connection({\n\tfullnode: 'https://fullnode.mainnet.sui.io:443/',\n});\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Struct } from 'superstruct';\nimport { create as superstructCreate } from 'superstruct';\n\nexport function create<T, S>(value: T, struct: Struct<T, S>): T {\n\treturn superstructCreate(value, struct);\n}\n\nexport type WellKnownEncoding =\n\t| {\n\t\t\tkind: 'object';\n\t  }\n\t| {\n\t\t\tkind: 'pure';\n\t\t\ttype: string;\n\t  };\n\nexport const TRANSACTION_TYPE = Symbol('transaction-argument-type');\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BCS, fromB64 } from '@mysten/bcs';\nimport type { Infer, Struct } from 'superstruct';\nimport {\n\tis,\n\tany,\n\tarray,\n\tinteger,\n\tliteral,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n\tassert,\n\tdefine,\n\tunknown,\n\trecord,\n} from 'superstruct';\nimport type { WellKnownEncoding } from './utils.js';\nimport { TRANSACTION_TYPE, create } from './utils.js';\nimport { TypeTagSerializer } from './type-tag-serializer.js';\nimport { normalizeSuiObjectId } from '../utils/sui-types.js';\n\nconst option = <T extends Struct<any, any>>(some: T) =>\n\tunion([object({ None: union([literal(true), literal(null)]) }), object({ Some: some })]);\n\nexport const TransactionBlockInput = object({\n\tkind: literal('Input'),\n\tindex: integer(),\n\tvalue: optional(any()),\n\ttype: optional(union([literal('pure'), literal('object')])),\n});\nexport type TransactionBlockInput = Infer<typeof TransactionBlockInput>;\n\nconst TransactionArgumentTypes = [\n\tTransactionBlockInput,\n\tobject({ kind: literal('GasCoin') }),\n\tobject({ kind: literal('Result'), index: integer() }),\n\tobject({\n\t\tkind: literal('NestedResult'),\n\t\tindex: integer(),\n\t\tresultIndex: integer(),\n\t}),\n] as const;\n\n// Generic transaction argument\nexport const TransactionArgument = union([...TransactionArgumentTypes]);\nexport type TransactionArgument = Infer<typeof TransactionArgument>;\n\n// Transaction argument referring to an object:\nexport const ObjectTransactionArgument = union([...TransactionArgumentTypes]);\n(ObjectTransactionArgument as any)[TRANSACTION_TYPE] = {\n\tkind: 'object',\n} as WellKnownEncoding;\n\nexport const PureTransactionArgument = (type: string) => {\n\tconst struct = union([...TransactionArgumentTypes]);\n\t(struct as any)[TRANSACTION_TYPE] = {\n\t\tkind: 'pure',\n\t\ttype,\n\t} as WellKnownEncoding;\n\treturn struct;\n};\n\nexport const MoveCallTransaction = object({\n\tkind: literal('MoveCall'),\n\ttarget: define<`${string}::${string}::${string}`>('target', string().validator),\n\ttypeArguments: array(string()),\n\targuments: array(TransactionArgument),\n});\nexport type MoveCallTransaction = Infer<typeof MoveCallTransaction>;\n\nexport const TransferObjectsTransaction = object({\n\tkind: literal('TransferObjects'),\n\tobjects: array(ObjectTransactionArgument),\n\taddress: PureTransactionArgument(BCS.ADDRESS),\n});\nexport type TransferObjectsTransaction = Infer<typeof TransferObjectsTransaction>;\n\nexport const SplitCoinsTransaction = object({\n\tkind: literal('SplitCoins'),\n\tcoin: ObjectTransactionArgument,\n\tamounts: array(PureTransactionArgument('u64')),\n});\nexport type SplitCoinsTransaction = Infer<typeof SplitCoinsTransaction>;\n\nexport const MergeCoinsTransaction = object({\n\tkind: literal('MergeCoins'),\n\tdestination: ObjectTransactionArgument,\n\tsources: array(ObjectTransactionArgument),\n});\nexport type MergeCoinsTransaction = Infer<typeof MergeCoinsTransaction>;\n\nexport const MakeMoveVecTransaction = object({\n\tkind: literal('MakeMoveVec'),\n\t// TODO: ideally we should use `TypeTag` instead of `record()` here,\n\t// but TypeTag is recursively defined and it's tricky to define a\n\t// recursive struct in superstruct\n\ttype: optional(option(record(string(), unknown()))),\n\tobjects: array(ObjectTransactionArgument),\n});\nexport type MakeMoveVecTransaction = Infer<typeof MakeMoveVecTransaction>;\n\nexport const PublishTransaction = object({\n\tkind: literal('Publish'),\n\tmodules: array(array(integer())),\n\tdependencies: array(string()),\n});\nexport type PublishTransaction = Infer<typeof PublishTransaction>;\n\n// Keep in sync with constants in\n// crates/sui-framework/packages/sui-framework/sources/package.move\nexport enum UpgradePolicy {\n\tCOMPATIBLE = 0,\n\tADDITIVE = 128,\n\tDEP_ONLY = 192,\n}\n\nexport const UpgradeTransaction = object({\n\tkind: literal('Upgrade'),\n\tmodules: array(array(integer())),\n\tdependencies: array(string()),\n\tpackageId: string(),\n\tticket: ObjectTransactionArgument,\n});\nexport type UpgradeTransaction = Infer<typeof UpgradeTransaction>;\n\nconst TransactionTypes = [\n\tMoveCallTransaction,\n\tTransferObjectsTransaction,\n\tSplitCoinsTransaction,\n\tMergeCoinsTransaction,\n\tPublishTransaction,\n\tUpgradeTransaction,\n\tMakeMoveVecTransaction,\n] as const;\n\nexport const TransactionType = union([...TransactionTypes]);\nexport type TransactionType = Infer<typeof TransactionType>;\n\nexport function getTransactionType(data: unknown) {\n\tassert(data, TransactionType);\n\treturn TransactionTypes.find((schema) => is(data, schema as Struct))!;\n}\n\n/**\n * Simple helpers used to construct transactions:\n */\nexport const Transactions = {\n\tMoveCall(\n\t\tinput: Omit<MoveCallTransaction, 'kind' | 'arguments' | 'typeArguments'> & {\n\t\t\targuments?: TransactionArgument[];\n\t\t\ttypeArguments?: string[];\n\t\t},\n\t): MoveCallTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'MoveCall',\n\t\t\t\ttarget: input.target,\n\t\t\t\targuments: input.arguments ?? [],\n\t\t\t\ttypeArguments: input.typeArguments ?? [],\n\t\t\t},\n\t\t\tMoveCallTransaction,\n\t\t);\n\t},\n\tTransferObjects(\n\t\tobjects: TransactionArgument[],\n\t\taddress: TransactionArgument,\n\t): TransferObjectsTransaction {\n\t\treturn create({ kind: 'TransferObjects', objects, address }, TransferObjectsTransaction);\n\t},\n\tSplitCoins(coin: TransactionArgument, amounts: TransactionArgument[]): SplitCoinsTransaction {\n\t\treturn create({ kind: 'SplitCoins', coin, amounts }, SplitCoinsTransaction);\n\t},\n\tMergeCoins(\n\t\tdestination: TransactionArgument,\n\t\tsources: TransactionArgument[],\n\t): MergeCoinsTransaction {\n\t\treturn create({ kind: 'MergeCoins', destination, sources }, MergeCoinsTransaction);\n\t},\n\tPublish({\n\t\tmodules,\n\t\tdependencies,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t}): PublishTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'Publish',\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? Array.from(fromB64(module)) : module,\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t},\n\t\t\tPublishTransaction,\n\t\t);\n\t},\n\tUpgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t\tpackageId: string;\n\t\tticket: TransactionArgument;\n\t}): UpgradeTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'Upgrade',\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? Array.from(fromB64(module)) : module,\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t\tpackageId,\n\t\t\t\tticket,\n\t\t\t},\n\t\t\tUpgradeTransaction,\n\t\t);\n\t},\n\tMakeMoveVec({\n\t\ttype,\n\t\tobjects,\n\t}: Omit<MakeMoveVecTransaction, 'kind' | 'type'> & {\n\t\ttype?: string;\n\t}): MakeMoveVecTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'MakeMoveVec',\n\t\t\t\ttype: type ? { Some: TypeTagSerializer.parseFromStr(type) } : { None: null },\n\t\t\t\tobjects,\n\t\t\t},\n\t\t\tMakeMoveVecTransaction,\n\t\t);\n\t},\n};\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { array, boolean, integer, object, string, union } from 'superstruct';\nimport type { SharedObjectRef } from '../bcs/index.js';\nimport { SuiObjectRef } from '../types/index.js';\nimport { builder } from './bcs.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\n\nconst ObjectArg = union([\n\tobject({ ImmOrOwned: SuiObjectRef }),\n\tobject({\n\t\tShared: object({\n\t\t\tobjectId: string(),\n\t\t\tinitialSharedVersion: union([integer(), string()]),\n\t\t\tmutable: boolean(),\n\t\t}),\n\t}),\n]);\n\nexport const PureCallArg = object({ Pure: array(integer()) });\nexport const ObjectCallArg = object({ Object: ObjectArg });\nexport type PureCallArg = Infer<typeof PureCallArg>;\nexport type ObjectCallArg = Infer<typeof ObjectCallArg>;\n\nexport const BuilderCallArg = union([PureCallArg, ObjectCallArg]);\nexport type BuilderCallArg = Infer<typeof BuilderCallArg>;\n\nexport const Inputs = {\n\tPure(data: unknown, type?: string): PureCallArg {\n\t\treturn {\n\t\t\tPure: Array.from(\n\t\t\t\tdata instanceof Uint8Array\n\t\t\t\t\t? data\n\t\t\t\t\t: // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n\t\t\t\t\t  builder.ser(type!, data, { maxSize: Infinity }).toBytes(),\n\t\t\t),\n\t\t};\n\t},\n\tObjectRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tImmOrOwned: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tSharedObjectRef({ objectId, mutable, initialSharedVersion }: SharedObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tShared: {\n\t\t\t\t\tmutable,\n\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n};\n\nexport function getIdFromCallArg(arg: string | ObjectCallArg) {\n\tif (typeof arg === 'string') {\n\t\treturn normalizeSuiAddress(arg);\n\t}\n\tif ('ImmOrOwned' in arg.Object) {\n\t\treturn normalizeSuiAddress(arg.Object.ImmOrOwned.objectId);\n\t}\n\treturn normalizeSuiAddress(arg.Object.Shared.objectId);\n}\n\nexport function getSharedObjectInput(arg: BuilderCallArg): SharedObjectRef | undefined {\n\treturn typeof arg === 'object' && 'Object' in arg && 'Shared' in arg.Object\n\t\t? arg.Object.Shared\n\t\t: undefined;\n}\n\nexport function isSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn !!getSharedObjectInput(arg);\n}\n\nexport function isMutableSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn getSharedObjectInput(arg)?.mutable ?? false;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport type Option<T> =\n\t| T\n\t| {\n\t\t\tfields: {\n\t\t\t\tvec: '';\n\t\t\t};\n\t\t\ttype: string;\n\t  };\n\nexport function getOption<T>(option: Option<T>): T | undefined {\n\tif (\n\t\ttypeof option === 'object' &&\n\t\toption !== null &&\n\t\t'type' in option &&\n\t\toption.type.startsWith('0x1::option::Option<')\n\t) {\n\t\treturn undefined;\n\t}\n\treturn option as T;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type {\n\tSuiObjectResponse,\n\tSuiMoveObject,\n\tSuiObjectInfo,\n\tSuiObjectData,\n} from '../types/objects.js';\nimport { getObjectFields, getObjectId, getObjectType } from '../types/objects.js';\n\nimport type { Option } from '../types/option.js';\nimport { getOption } from '../types/option.js';\nimport type { CoinStruct } from '../types/coin.js';\nimport type { StructTag } from '../bcs/index.js';\nimport type { Infer } from 'superstruct';\nimport { nullable, number, object, string } from 'superstruct';\nimport { normalizeSuiObjectId } from '../utils/sui-types.js';\n\nexport const SUI_SYSTEM_ADDRESS = '0x3';\nexport const SUI_FRAMEWORK_ADDRESS = '0x2';\nexport const MOVE_STDLIB_ADDRESS = '0x1';\nexport const OBJECT_MODULE_NAME = 'object';\nexport const UID_STRUCT_NAME = 'UID';\nexport const ID_STRUCT_NAME = 'ID';\nexport const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nexport const VALIDATORS_EVENTS_QUERY = '0x3::validator_set::ValidatorEpochInfoEventV2';\n\nexport const SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId('0x6');\n\n// `sui::pay` module is used for Coin management (split, join, join_and_transfer etc);\nexport const PAY_MODULE_NAME = 'pay';\nexport const PAY_SPLIT_COIN_VEC_FUNC_NAME = 'split_vec';\nexport const PAY_JOIN_COIN_FUNC_NAME = 'join';\nexport const COIN_TYPE_ARG_REGEX = /^0x2::coin::Coin<(.+)>$/;\n\ntype ObjectData = ObjectDataFull | SuiObjectInfo;\ntype ObjectDataFull = SuiObjectResponse | SuiMoveObject;\n\nexport function isObjectDataFull(resp: ObjectData | ObjectDataFull): resp is SuiObjectResponse {\n\treturn !!(resp as SuiObjectResponse).data || !!(resp as SuiMoveObject).type;\n}\n\nexport const CoinMetadataStruct = object({\n\tdecimals: number(),\n\tname: string(),\n\tsymbol: string(),\n\tdescription: string(),\n\ticonUrl: nullable(string()),\n\tid: nullable(string()),\n});\n\nexport type CoinMetadata = Infer<typeof CoinMetadataStruct>;\n\n/**\n * Utility class for 0x2::coin\n * as defined in https://github.com/MystenLabs/sui/blob/ca9046fd8b1a9e8634a4b74b0e7dabdc7ea54475/sui_programmability/framework/sources/Coin.move#L4\n */\nexport class Coin {\n\tstatic isCoin(data: ObjectData): boolean {\n\t\treturn Coin.getType(data)?.match(COIN_TYPE_ARG_REGEX) != null;\n\t}\n\n\tstatic getCoinType(type: string) {\n\t\tconst [, res] = type.match(COIN_TYPE_ARG_REGEX) ?? [];\n\t\treturn res || null;\n\t}\n\n\tstatic getCoinTypeArg(obj: ObjectData) {\n\t\tconst type = Coin.getType(obj);\n\t\treturn type ? Coin.getCoinType(type) : null;\n\t}\n\n\tstatic isSUI(obj: ObjectData) {\n\t\tconst arg = Coin.getCoinTypeArg(obj);\n\t\treturn arg ? Coin.getCoinSymbol(arg) === 'SUI' : false;\n\t}\n\n\tstatic getCoinSymbol(coinTypeArg: string) {\n\t\treturn coinTypeArg.substring(coinTypeArg.lastIndexOf(':') + 1);\n\t}\n\n\tstatic getCoinStructTag(coinTypeArg: string): StructTag {\n\t\treturn {\n\t\t\taddress: normalizeSuiObjectId(coinTypeArg.split('::')[0]),\n\t\t\tmodule: coinTypeArg.split('::')[1],\n\t\t\tname: coinTypeArg.split('::')[2],\n\t\t\ttypeParams: [],\n\t\t};\n\t}\n\n\tpublic static getID(obj: ObjectData): string {\n\t\tif ('fields' in obj) {\n\t\t\treturn obj.fields.id.id;\n\t\t}\n\t\treturn getObjectId(obj);\n\t}\n\n\tstatic totalBalance(coins: CoinStruct[]): bigint {\n\t\treturn coins.reduce(\n\t\t\t(partialSum, c) => partialSum + Coin.getBalanceFromCoinStruct(c),\n\t\t\tBigInt(0),\n\t\t);\n\t}\n\n\t/**\n\t * Sort coin by balance in an ascending order\n\t */\n\tstatic sortByBalance(coins: CoinStruct[]): CoinStruct[] {\n\t\treturn [...coins].sort((a, b) =>\n\t\t\tCoin.getBalanceFromCoinStruct(a) < Coin.getBalanceFromCoinStruct(b)\n\t\t\t\t? -1\n\t\t\t\t: Coin.getBalanceFromCoinStruct(a) > Coin.getBalanceFromCoinStruct(b)\n\t\t\t\t? 1\n\t\t\t\t: 0,\n\t\t);\n\t}\n\n\tstatic getBalanceFromCoinStruct(coin: CoinStruct): bigint {\n\t\treturn BigInt(coin.balance);\n\t}\n\n\tstatic getBalance(data: ObjectDataFull): bigint | undefined {\n\t\tif (!Coin.isCoin(data)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst balance = getObjectFields(data)?.balance;\n\t\treturn BigInt(balance);\n\t}\n\n\tprivate static getType(data: ObjectData): string | null | undefined {\n\t\tif (isObjectDataFull(data)) {\n\t\t\treturn getObjectType(data);\n\t\t}\n\t\treturn data.type;\n\t}\n}\n\nexport type DelegationData = SuiMoveObject & {\n\tdataType: 'moveObject';\n\ttype: '0x2::delegation::Delegation';\n\tfields: {\n\t\tactive_delegation: Option<number>;\n\t\tdelegate_amount: number;\n\t\tnext_reward_unclaimed_epoch: number;\n\t\tvalidator_address: string;\n\t\tinfo: {\n\t\t\tid: string;\n\t\t\tversion: number;\n\t\t};\n\t\tending_epoch: Option<number>;\n\t};\n};\n\nexport type DelegationSuiObject = Omit<SuiObjectData, 'data'> & {\n\tdata: DelegationData;\n};\n\n// Class for delegation.move\n// see https://github.com/MystenLabs/fastnft/blob/161aa27fe7eb8ecf2866ec9eb192e768f25da768/crates/sui-framework/sources/governance/delegation.move\nexport class Delegation {\n\tpublic static readonly SUI_OBJECT_TYPE = '0x2::delegation::Delegation';\n\tprivate suiObject: DelegationSuiObject;\n\n\tpublic static isDelegationSuiObject(obj: SuiObjectData): obj is DelegationSuiObject {\n\t\treturn 'type' in obj && obj.type === Delegation.SUI_OBJECT_TYPE;\n\t}\n\n\tconstructor(obj: DelegationSuiObject) {\n\t\tthis.suiObject = obj;\n\t}\n\n\tpublic nextRewardUnclaimedEpoch() {\n\t\treturn this.suiObject.data.fields.next_reward_unclaimed_epoch;\n\t}\n\n\tpublic activeDelegation() {\n\t\treturn BigInt(getOption(this.suiObject.data.fields.active_delegation) || 0);\n\t}\n\n\tpublic delegateAmount() {\n\t\treturn this.suiObject.data.fields.delegate_amount;\n\t}\n\n\tpublic endingEpoch() {\n\t\treturn getOption(this.suiObject.data.fields.ending_epoch);\n\t}\n\n\tpublic validatorAddress() {\n\t\treturn this.suiObject.data.fields.validator_address;\n\t}\n\n\tpublic isActive() {\n\t\treturn this.activeDelegation() > 0 && !this.endingEpoch();\n\t}\n\n\tpublic hasUnclaimedRewards(epoch: number) {\n\t\treturn (\n\t\t\tthis.nextRewardUnclaimedEpoch() <= epoch &&\n\t\t\t(this.isActive() || (this.endingEpoch() || 0) > epoch)\n\t\t);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isValidSuiAddress } from '../utils/sui-types.js';\nimport { extractStructTag } from '../types/index.js';\nimport {\n\tID_STRUCT_NAME,\n\tMOVE_STDLIB_ADDRESS,\n\tOBJECT_MODULE_NAME,\n\tSUI_FRAMEWORK_ADDRESS,\n} from '../framework/framework.js';\nimport type { SuiJsonValue, SuiMoveNormalizedType } from '../client/index.js';\n\nconst STD_ASCII_MODULE_NAME = 'ascii';\nconst STD_ASCII_STRUCT_NAME = 'String';\n\nconst STD_UTF8_MODULE_NAME = 'string';\nconst STD_UTF8_STRUCT_NAME = 'String';\n\nconst STD_OPTION_MODULE_NAME = 'option';\nconst STD_OPTION_STRUCT_NAME = 'Option';\n\nconst RESOLVED_SUI_ID = {\n\taddress: SUI_FRAMEWORK_ADDRESS,\n\tmodule: OBJECT_MODULE_NAME,\n\tname: ID_STRUCT_NAME,\n};\nconst RESOLVED_ASCII_STR = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_ASCII_MODULE_NAME,\n\tname: STD_ASCII_STRUCT_NAME,\n};\nconst RESOLVED_UTF8_STR = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_UTF8_MODULE_NAME,\n\tname: STD_UTF8_STRUCT_NAME,\n};\n\nconst RESOLVED_STD_OPTION = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_OPTION_MODULE_NAME,\n\tname: STD_OPTION_STRUCT_NAME,\n};\n\nconst isSameStruct = (a: any, b: any) =>\n\ta.address === b.address && a.module === b.module && a.name === b.name;\n\nexport function isTxContext(param: SuiMoveNormalizedType): boolean {\n\tconst struct = extractStructTag(param)?.Struct;\n\treturn (\n\t\tstruct?.address === '0x2' && struct?.module === 'tx_context' && struct?.name === 'TxContext'\n\t);\n}\n\nfunction expectType(typeName: string, argVal?: SuiJsonValue) {\n\tif (typeof argVal === 'undefined') {\n\t\treturn;\n\t}\n\tif (typeof argVal !== typeName) {\n\t\tthrow new Error(`Expect ${argVal} to be ${typeName}, received ${typeof argVal}`);\n\t}\n}\n\nconst allowedTypes = ['Address', 'Bool', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256'];\n\nexport function getPureSerializationType(\n\tnormalizedType: SuiMoveNormalizedType,\n\targVal: SuiJsonValue | undefined,\n): string | undefined {\n\tif (typeof normalizedType === 'string' && allowedTypes.includes(normalizedType)) {\n\t\tif (normalizedType in ['U8', 'U16', 'U32', 'U64', 'U128', 'U256']) {\n\t\t\texpectType('number', argVal);\n\t\t} else if (normalizedType === 'Bool') {\n\t\t\texpectType('boolean', argVal);\n\t\t} else if (normalizedType === 'Address') {\n\t\t\texpectType('string', argVal);\n\t\t\tif (argVal && !isValidSuiAddress(argVal as string)) {\n\t\t\t\tthrow new Error('Invalid Sui Address');\n\t\t\t}\n\t\t}\n\t\treturn normalizedType.toLowerCase();\n\t} else if (typeof normalizedType === 'string') {\n\t\tthrow new Error(`Unknown pure normalized type ${JSON.stringify(normalizedType, null, 2)}`);\n\t}\n\n\tif ('Vector' in normalizedType) {\n\t\tif ((argVal === undefined || typeof argVal === 'string') && normalizedType.Vector === 'U8') {\n\t\t\treturn 'string';\n\t\t}\n\n\t\tif (argVal !== undefined && !Array.isArray(argVal)) {\n\t\t\tthrow new Error(`Expect ${argVal} to be a array, received ${typeof argVal}`);\n\t\t}\n\n\t\tconst innerType = getPureSerializationType(\n\t\t\tnormalizedType.Vector,\n\t\t\t// undefined when argVal is empty\n\t\t\targVal ? argVal[0] : undefined,\n\t\t);\n\n\t\tif (innerType === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn `vector<${innerType}>`;\n\t}\n\n\tif ('Struct' in normalizedType) {\n\t\tif (isSameStruct(normalizedType.Struct, RESOLVED_ASCII_STR)) {\n\t\t\treturn 'string';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_UTF8_STR)) {\n\t\t\treturn 'utf8string';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_SUI_ID)) {\n\t\t\treturn 'address';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_STD_OPTION)) {\n\t\t\tconst optionToVec: SuiMoveNormalizedType = {\n\t\t\t\tVector: normalizedType.Struct.typeArguments[0],\n\t\t\t};\n\t\t\treturn getPureSerializationType(optionToVec, argVal);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\n\n/**\n * Generates a Blake2b hash of typed data as a base64 string.\n *\n * @param typeTag type tag (e.g. TransactionData, SenderSignedData)\n * @param data data to hash\n */\nexport function hashTypedData(typeTag: string, data: Uint8Array): Uint8Array {\n\tconst typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n\n\tconst dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n\tdataWithTag.set(typeTagBytes);\n\tdataWithTag.set(data, typeTagBytes.length);\n\n\treturn blake2b(dataWithTag, { dkLen: 32 });\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toB58 } from '@mysten/bcs';\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tassert,\n\tdefine,\n\tinteger,\n\tis,\n\tliteral,\n\tnullable,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n} from 'superstruct';\nimport { hashTypedData } from './hash.js';\nimport { SuiObjectRef } from '../types/index.js';\nimport { builder } from './bcs.js';\nimport { TransactionType, TransactionBlockInput } from './Transactions.js';\nimport { BuilderCallArg, PureCallArg } from './Inputs.js';\nimport { create } from './utils.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\n\nexport const TransactionExpiration = optional(\n\tnullable(\n\t\tunion([object({ Epoch: integer() }), object({ None: union([literal(true), literal(null)]) })]),\n\t),\n);\nexport type TransactionExpiration = Infer<typeof TransactionExpiration>;\n\nconst StringEncodedBigint = define<string>('StringEncodedBigint', (val) => {\n\tif (!['string', 'number', 'bigint'].includes(typeof val)) return false;\n\n\ttry {\n\t\tBigInt(val as string);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n});\n\nconst GasConfig = object({\n\tbudget: optional(StringEncodedBigint),\n\tprice: optional(StringEncodedBigint),\n\tpayment: optional(array(SuiObjectRef)),\n\towner: optional(string()),\n});\ntype GasConfig = Infer<typeof GasConfig>;\n\nexport const SerializedTransactionDataBuilder = object({\n\tversion: literal(1),\n\tsender: optional(string()),\n\texpiration: TransactionExpiration,\n\tgasConfig: GasConfig,\n\tinputs: array(TransactionBlockInput),\n\ttransactions: array(TransactionType),\n});\nexport type SerializedTransactionDataBuilder = Infer<typeof SerializedTransactionDataBuilder>;\n\nfunction prepareSuiAddress(address: string) {\n\treturn normalizeSuiAddress(address).replace('0x', '');\n}\n\nexport class TransactionBlockDataBuilder {\n\tstatic fromKindBytes(bytes: Uint8Array) {\n\t\tconst kind = builder.de('TransactionKind', bytes);\n\t\tconst programmableTx = kind?.ProgrammableTransaction;\n\t\tif (!programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\tconst serialized = create(\n\t\t\t{\n\t\t\t\tversion: 1,\n\t\t\t\tgasConfig: {},\n\t\t\t\tinputs: programmableTx.inputs.map((value: unknown, index: number) =>\n\t\t\t\t\tcreate(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'Input',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\ttype: is(value, PureCallArg) ? 'pure' : 'object',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTransactionBlockInput,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttransactions: programmableTx.transactions,\n\t\t\t},\n\t\t\tSerializedTransactionDataBuilder,\n\t\t);\n\n\t\treturn TransactionBlockDataBuilder.restore(serialized);\n\t}\n\n\tstatic fromBytes(bytes: Uint8Array) {\n\t\tconst rawData = builder.de('TransactionData', bytes);\n\t\tconst data = rawData?.V1;\n\t\tconst programmableTx = data?.kind?.ProgrammableTransaction;\n\t\tif (!data || !programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\tconst serialized = create(\n\t\t\t{\n\t\t\t\tversion: 1,\n\t\t\t\tsender: data.sender,\n\t\t\t\texpiration: data.expiration,\n\t\t\t\tgasConfig: data.gasData,\n\t\t\t\tinputs: programmableTx.inputs.map((value: unknown, index: number) =>\n\t\t\t\t\tcreate(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'Input',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\ttype: is(value, PureCallArg) ? 'pure' : 'object',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTransactionBlockInput,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttransactions: programmableTx.transactions,\n\t\t\t},\n\t\t\tSerializedTransactionDataBuilder,\n\t\t);\n\n\t\treturn TransactionBlockDataBuilder.restore(serialized);\n\t}\n\n\tstatic restore(data: SerializedTransactionDataBuilder) {\n\t\tassert(data, SerializedTransactionDataBuilder);\n\t\tconst transactionData = new TransactionBlockDataBuilder();\n\t\tObject.assign(transactionData, data);\n\t\treturn transactionData;\n\t}\n\n\t/**\n\t * Generate transaction digest.\n\t *\n\t * @param bytes BCS serialized transaction data\n\t * @returns transaction digest.\n\t */\n\tstatic getDigestFromBytes(bytes: Uint8Array) {\n\t\tconst hash = hashTypedData('TransactionData', bytes);\n\t\treturn toB58(hash);\n\t}\n\n\tversion = 1 as const;\n\tsender?: string;\n\texpiration?: TransactionExpiration;\n\tgasConfig: GasConfig;\n\tinputs: TransactionBlockInput[];\n\ttransactions: TransactionType[];\n\n\tconstructor(clone?: SerializedTransactionDataBuilder) {\n\t\tthis.sender = clone?.sender;\n\t\tthis.expiration = clone?.expiration;\n\t\tthis.gasConfig = clone?.gasConfig ?? {};\n\t\tthis.inputs = clone?.inputs ?? [];\n\t\tthis.transactions = clone?.transactions ?? [];\n\t}\n\n\tbuild({\n\t\tmaxSizeBytes = Infinity,\n\t\toverrides,\n\t\tonlyTransactionKind,\n\t}: {\n\t\tmaxSizeBytes?: number;\n\t\toverrides?: Pick<Partial<TransactionBlockDataBuilder>, 'sender' | 'gasConfig' | 'expiration'>;\n\t\tonlyTransactionKind?: boolean;\n\t} = {}) {\n\t\t// Resolve inputs down to values:\n\t\tconst inputs = this.inputs.map((input) => {\n\t\t\tassert(input.value, BuilderCallArg);\n\t\t\treturn input.value;\n\t\t});\n\n\t\tconst kind = {\n\t\t\tProgrammableTransaction: {\n\t\t\t\tinputs,\n\t\t\t\ttransactions: this.transactions,\n\t\t\t},\n\t\t};\n\n\t\tif (onlyTransactionKind) {\n\t\t\treturn builder.ser('TransactionKind', kind, { maxSize: maxSizeBytes }).toBytes();\n\t\t}\n\n\t\tconst expiration = overrides?.expiration ?? this.expiration;\n\t\tconst sender = overrides?.sender ?? this.sender;\n\t\tconst gasConfig = { ...this.gasConfig, ...overrides?.gasConfig };\n\n\t\tif (!sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tif (!gasConfig.budget) {\n\t\t\tthrow new Error('Missing gas budget');\n\t\t}\n\n\t\tif (!gasConfig.payment) {\n\t\t\tthrow new Error('Missing gas payment');\n\t\t}\n\n\t\tif (!gasConfig.price) {\n\t\t\tthrow new Error('Missing gas price');\n\t\t}\n\n\t\tconst transactionData = {\n\t\t\tsender: prepareSuiAddress(sender),\n\t\t\texpiration: expiration ? expiration : { None: true },\n\t\t\tgasData: {\n\t\t\t\tpayment: gasConfig.payment,\n\t\t\t\towner: prepareSuiAddress(this.gasConfig.owner ?? sender),\n\t\t\t\tprice: BigInt(gasConfig.price),\n\t\t\t\tbudget: BigInt(gasConfig.budget),\n\t\t\t},\n\t\t\tkind: {\n\t\t\t\tProgrammableTransaction: {\n\t\t\t\t\tinputs,\n\t\t\t\t\ttransactions: this.transactions,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn builder\n\t\t\t.ser('TransactionData', { V1: transactionData }, { maxSize: maxSizeBytes })\n\t\t\t.toBytes();\n\t}\n\n\tgetDigest() {\n\t\tconst bytes = this.build({ onlyTransactionKind: false });\n\t\treturn TransactionBlockDataBuilder.getDigestFromBytes(bytes);\n\t}\n\n\tsnapshot(): SerializedTransactionDataBuilder {\n\t\treturn create(this, SerializedTransactionDataBuilder);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport { is, mask } from 'superstruct';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport type { SuiObjectResponse } from '../types/index.js';\nimport {\n\textractMutableReference,\n\textractStructTag,\n\tgetObjectReference,\n\tSuiObjectRef,\n} from '../types/index.js';\nimport type { TransactionArgument, TransactionType, MoveCallTransaction } from './Transactions.js';\nimport { Transactions, TransactionBlockInput, getTransactionType } from './Transactions.js';\nimport type { ObjectCallArg } from './Inputs.js';\nimport {\n\tBuilderCallArg,\n\tgetIdFromCallArg,\n\tInputs,\n\tisMutableSharedObjectInput,\n\tPureCallArg,\n} from './Inputs.js';\nimport { getPureSerializationType, isTxContext } from './serializer.js';\nimport type { TransactionExpiration } from './TransactionBlockData.js';\nimport { TransactionBlockDataBuilder } from './TransactionBlockData.js';\nimport type { WellKnownEncoding } from './utils.js';\nimport { TRANSACTION_TYPE, create } from './utils.js';\nimport type { ProtocolConfig, SuiClient, SuiMoveNormalizedType } from '../client/index.js';\nimport { normalizeSuiObjectId } from '../utils/sui-types.js';\nimport { SUI_TYPE_ARG } from '../framework/framework.js';\n\ntype TransactionResult = TransactionArgument & TransactionArgument[];\n\nconst DefaultOfflineLimits = {\n\tmaxPureArgumentSize: 16 * 1024,\n\tmaxTxGas: 50_000_000_000,\n\tmaxGasObjects: 256,\n\tmaxTxSizeBytes: 128 * 1024,\n} satisfies Limits;\n\nfunction createTransactionResult(index: number): TransactionResult {\n\tconst baseResult: TransactionArgument = { kind: 'Result', index };\n\n\tconst nestedResults: TransactionArgument[] = [];\n\tconst nestedResultFor = (resultIndex: number): TransactionArgument =>\n\t\t(nestedResults[resultIndex] ??= {\n\t\t\tkind: 'NestedResult',\n\t\t\tindex,\n\t\t\tresultIndex,\n\t\t});\n\n\treturn new Proxy(baseResult, {\n\t\tset() {\n\t\t\tthrow new Error(\n\t\t\t\t'The transaction result is a proxy, and does not support setting properties directly',\n\t\t\t);\n\t\t},\n\t\t// TODO: Instead of making this return a concrete argument, we should ideally\n\t\t// make it reference-based (so that this gets resolved at build-time), which\n\t\t// allows re-ordering transactions.\n\t\tget(target, property) {\n\t\t\t// This allows this transaction argument to be used in the singular form:\n\t\t\tif (property in target) {\n\t\t\t\treturn Reflect.get(target, property);\n\t\t\t}\n\n\t\t\t// Support destructuring:\n\t\t\tif (property === Symbol.iterator) {\n\t\t\t\treturn function* () {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tyield nestedResultFor(i);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (typeof property === 'symbol') return;\n\n\t\t\tconst resultIndex = parseInt(property, 10);\n\t\t\tif (Number.isNaN(resultIndex) || resultIndex < 0) return;\n\t\t\treturn nestedResultFor(resultIndex);\n\t\t},\n\t}) as TransactionResult;\n}\n\nfunction expectClient(options: BuildOptions): SuiClient {\n\tif (!options.client && !options.provider) {\n\t\tthrow new Error(\n\t\t\t`No provider passed to Transaction#build, but transaction data was not sufficient to build offline.`,\n\t\t);\n\t}\n\n\treturn (options.client ?? options.provider!) as SuiClient;\n}\n\nconst TRANSACTION_BRAND = Symbol.for('@mysten/transaction');\n\nconst LIMITS = {\n\t// The maximum gas that is allowed.\n\tmaxTxGas: 'max_tx_gas',\n\t// The maximum number of gas objects that can be selected for one transaction.\n\tmaxGasObjects: 'max_gas_payment_objects',\n\t// The maximum size (in bytes) that the transaction can be:\n\tmaxTxSizeBytes: 'max_tx_size_bytes',\n\t// The maximum size (in bytes) that pure arguments can be:\n\tmaxPureArgumentSize: 'max_pure_argument_size',\n} as const;\n\ntype Limits = Partial<Record<keyof typeof LIMITS, number>>;\n\n// An amount of gas (in gas units) that is added to transactions as an overhead to ensure transactions do not fail.\nconst GAS_SAFE_OVERHEAD = 1000n;\n\n// The maximum objects that can be fetched at once using multiGetObjects.\nconst MAX_OBJECTS_PER_FETCH = 50;\n\nconst chunk = <T>(arr: T[], size: number): T[][] =>\n\tArray.from({ length: Math.ceil(arr.length / size) }, (_, i) =>\n\t\tarr.slice(i * size, i * size + size),\n\t);\n\ninterface BuildOptions {\n\t/**\n\t * @deprecated Use `client` instead.\n\t */\n\tprovider?: JsonRpcProvider | SuiClient;\n\tclient?: SuiClient | JsonRpcProvider;\n\tonlyTransactionKind?: boolean;\n\t/** Define a protocol config to build against, instead of having it fetched from the provider at build time. */\n\tprotocolConfig?: ProtocolConfig;\n\t/** Define limits that are used when building the transaction. In general, we recommend using the protocol configuration instead of defining limits. */\n\tlimits?: Limits;\n}\n\nexport function isTransactionBlock(obj: unknown): obj is TransactionBlock {\n\treturn !!obj && typeof obj === 'object' && (obj as any)[TRANSACTION_BRAND] === true;\n}\n\n/**\n * Transaction Builder\n */\nexport class TransactionBlock {\n\t/** Returns `true` if the object is an instance of the Transaction builder class.\n\t * @deprecated Use `isTransactionBlock` from `@mysten/sui.js/transactions` instead.\n\t */\n\tstatic is(obj: unknown): obj is TransactionBlock {\n\t\treturn !!obj && typeof obj === 'object' && (obj as any)[TRANSACTION_BRAND] === true;\n\t}\n\n\t/**\n\t * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n\t * Supports either a byte array, or base64-encoded bytes.\n\t */\n\tstatic fromKind(serialized: string | Uint8Array) {\n\t\tconst tx = new TransactionBlock();\n\n\t\ttx.#blockData = TransactionBlockDataBuilder.fromKindBytes(\n\t\t\ttypeof serialized === 'string' ? fromB64(serialized) : serialized,\n\t\t);\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Converts from a serialized transaction format to a `Transaction` class.\n\t * There are two supported serialized formats:\n\t * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n\t * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n\t */\n\tstatic from(serialized: string | Uint8Array) {\n\t\tconst tx = new TransactionBlock();\n\n\t\t// Check for bytes:\n\t\tif (typeof serialized !== 'string' || !serialized.startsWith('{')) {\n\t\t\ttx.#blockData = TransactionBlockDataBuilder.fromBytes(\n\t\t\t\ttypeof serialized === 'string' ? fromB64(serialized) : serialized,\n\t\t\t);\n\t\t} else {\n\t\t\ttx.#blockData = TransactionBlockDataBuilder.restore(JSON.parse(serialized));\n\t\t}\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * A helper to retrieve the Transaction builder `Transactions`\n\t * @deprecated Either use the helper methods on the `TransactionBlock` class, or import `Transactions` from `@mysten/sui.js/transactions`.\n\t */\n\tstatic get Transactions() {\n\t\treturn Transactions;\n\t}\n\n\t/**\n\t * A helper to retrieve the Transaction builder `Inputs`\n\t * * @deprecated Either use the helper methods on the `TransactionBlock` class, or import `Inputs` from `@mysten/sui.js/transactions`.\n\t */\n\tstatic get Inputs() {\n\t\treturn Inputs;\n\t}\n\n\tsetSender(sender: string) {\n\t\tthis.#blockData.sender = sender;\n\t}\n\t/**\n\t * Sets the sender only if it has not already been set.\n\t * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n\t */\n\tsetSenderIfNotSet(sender: string) {\n\t\tif (!this.#blockData.sender) {\n\t\t\tthis.#blockData.sender = sender;\n\t\t}\n\t}\n\tsetExpiration(expiration?: TransactionExpiration) {\n\t\tthis.#blockData.expiration = expiration;\n\t}\n\tsetGasPrice(price: number | bigint) {\n\t\tthis.#blockData.gasConfig.price = String(price);\n\t}\n\tsetGasBudget(budget: number | bigint) {\n\t\tthis.#blockData.gasConfig.budget = String(budget);\n\t}\n\tsetGasOwner(owner: string) {\n\t\tthis.#blockData.gasConfig.owner = owner;\n\t}\n\tsetGasPayment(payments: SuiObjectRef[]) {\n\t\tthis.#blockData.gasConfig.payment = payments.map((payment) => mask(payment, SuiObjectRef));\n\t}\n\n\t#blockData: TransactionBlockDataBuilder;\n\t/** Get a snapshot of the transaction data, in JSON form: */\n\tget blockData() {\n\t\treturn this.#blockData.snapshot();\n\t}\n\n\t// Used to brand transaction classes so that they can be identified, even between multiple copies\n\t// of the builder.\n\tget [TRANSACTION_BRAND]() {\n\t\treturn true;\n\t}\n\n\tconstructor(transaction?: TransactionBlock) {\n\t\tthis.#blockData = new TransactionBlockDataBuilder(\n\t\t\ttransaction ? transaction.blockData : undefined,\n\t\t);\n\t}\n\n\t/** Returns an argument for the gas coin, to be used in a transaction. */\n\tget gas(): TransactionArgument {\n\t\treturn { kind: 'GasCoin' };\n\t}\n\n\t/**\n\t * Dynamically create a new input, which is separate from the `input`. This is important\n\t * for generated clients to be able to define unique inputs that are non-overlapping with the\n\t * defined inputs.\n\t *\n\t * For `Uint8Array` type automatically convert the input into a `Pure` CallArg, since this\n\t * is the format required for custom serialization.\n\t *\n\t */\n\t#input(type: 'object' | 'pure', value?: unknown) {\n\t\tconst index = this.#blockData.inputs.length;\n\t\tconst input = create(\n\t\t\t{\n\t\t\t\tkind: 'Input',\n\t\t\t\t// bigints can't be serialized to JSON, so just string-convert them here:\n\t\t\t\tvalue: typeof value === 'bigint' ? String(value) : value,\n\t\t\t\tindex,\n\t\t\t\ttype,\n\t\t\t},\n\t\t\tTransactionBlockInput,\n\t\t);\n\t\tthis.#blockData.inputs.push(input);\n\t\treturn input;\n\t}\n\n\t/**\n\t * Add a new object input to the transaction.\n\t */\n\tobject(value: string | ObjectCallArg) {\n\t\tconst id = getIdFromCallArg(value);\n\t\t// deduplicate\n\t\tconst inserted = this.#blockData.inputs.find(\n\t\t\t(i) => i.type === 'object' && id === getIdFromCallArg(i.value),\n\t\t);\n\t\treturn inserted ?? this.#input('object', value);\n\t}\n\n\t/**\n\t * Add a new object input to the transaction using the fully-resolved object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tobjectRef(...args: Parameters<(typeof Inputs)['ObjectRef']>) {\n\t\treturn this.object(Inputs.ObjectRef(...args));\n\t}\n\n\t/**\n\t * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tsharedObjectRef(...args: Parameters<(typeof Inputs)['SharedObjectRef']>) {\n\t\treturn this.object(Inputs.SharedObjectRef(...args));\n\t}\n\n\t/**\n\t * Add a new non-object input to the transaction.\n\t */\n\tpure(\n\t\t/**\n\t\t * The pure value that will be used as the input value. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: unknown,\n\t\t/**\n\t\t * The BCS type to serialize the value into. If not provided, the type will automatically be determined\n\t\t * based on how the input is used.\n\t\t */\n\t\ttype?: string,\n\t) {\n\t\t// TODO: we can also do some deduplication here\n\t\treturn this.#input(\n\t\t\t'pure',\n\t\t\tvalue instanceof Uint8Array ? Inputs.Pure(value) : type ? Inputs.Pure(value, type) : value,\n\t\t);\n\t}\n\n\t/** Add a transaction to the transaction block. */\n\tadd(transaction: TransactionType) {\n\t\tconst index = this.#blockData.transactions.push(transaction);\n\t\treturn createTransactionResult(index - 1);\n\t}\n\n\t// Method shorthands:\n\n\tsplitCoins(...args: Parameters<(typeof Transactions)['SplitCoins']>) {\n\t\treturn this.add(Transactions.SplitCoins(...args));\n\t}\n\tmergeCoins(...args: Parameters<(typeof Transactions)['MergeCoins']>) {\n\t\treturn this.add(Transactions.MergeCoins(...args));\n\t}\n\tpublish(...args: Parameters<(typeof Transactions)['Publish']>) {\n\t\treturn this.add(Transactions.Publish(...args));\n\t}\n\tupgrade(...args: Parameters<(typeof Transactions)['Upgrade']>) {\n\t\treturn this.add(Transactions.Upgrade(...args));\n\t}\n\tmoveCall(...args: Parameters<(typeof Transactions)['MoveCall']>) {\n\t\treturn this.add(Transactions.MoveCall(...args));\n\t}\n\ttransferObjects(...args: Parameters<(typeof Transactions)['TransferObjects']>) {\n\t\treturn this.add(Transactions.TransferObjects(...args));\n\t}\n\tmakeMoveVec(...args: Parameters<(typeof Transactions)['MakeMoveVec']>) {\n\t\treturn this.add(Transactions.MakeMoveVec(...args));\n\t}\n\n\t/**\n\t * Serialize the transaction to a string so that it can be sent to a separate context.\n\t * This is different from `build` in that it does not serialize to BCS bytes, and instead\n\t * uses a separate format that is unique to the transaction builder. This allows\n\t * us to serialize partially-complete transactions, that can then be completed and\n\t * built in a separate context.\n\t *\n\t * For example, a dapp can construct a transaction, but not provide gas objects\n\t * or a gas budget. The transaction then can be sent to the wallet, where this\n\t * information is automatically filled in (e.g. by querying for coin objects\n\t * and performing a dry run).\n\t */\n\tserialize() {\n\t\treturn JSON.stringify(this.#blockData.snapshot());\n\t}\n\n\t#getConfig(key: keyof typeof LIMITS, { protocolConfig, limits }: BuildOptions) {\n\t\t// Use the limits definition if that exists:\n\t\tif (limits && typeof limits[key] === 'number') {\n\t\t\treturn limits[key]!;\n\t\t}\n\n\t\tif (!protocolConfig) {\n\t\t\treturn DefaultOfflineLimits[key];\n\t\t}\n\n\t\t// Fallback to protocol config:\n\t\tconst attribute = protocolConfig?.attributes[LIMITS[key]];\n\t\tif (!attribute) {\n\t\t\tthrow new Error(`Missing expected protocol config: \"${LIMITS[key]}\"`);\n\t\t}\n\n\t\tconst value =\n\t\t\t'u64' in attribute ? attribute.u64 : 'u32' in attribute ? attribute.u32 : attribute.f64;\n\n\t\tif (!value) {\n\t\t\tthrow new Error(`Unexpected protocol config value found for: \"${LIMITS[key]}\"`);\n\t\t}\n\n\t\t// NOTE: Technically this is not a safe conversion, but we know all of the values in protocol config are safe\n\t\treturn Number(value);\n\t}\n\n\t/** Build the transaction to BCS bytes. */\n\tasync build(options: BuildOptions = {}): Promise<Uint8Array> {\n\t\tawait this.#prepare(options);\n\t\treturn this.#blockData.build({\n\t\t\tmaxSizeBytes: this.#getConfig('maxTxSizeBytes', options),\n\t\t\tonlyTransactionKind: options.onlyTransactionKind,\n\t\t});\n\t}\n\n\t/** Derive transaction digest */\n\tasync getDigest(\n\t\toptions: {\n\t\t\t/**\n\t\t\t * @deprecated Use `client` instead.\n\t\t\t */\n\t\t\tprovider?: JsonRpcProvider | SuiClient;\n\t\t\tclient?: SuiClient;\n\t\t} = {},\n\t): Promise<string> {\n\t\tawait this.#prepare(options);\n\t\treturn this.#blockData.getDigest();\n\t}\n\n\t#validate(options: BuildOptions) {\n\t\tconst maxPureArgumentSize = this.#getConfig('maxPureArgumentSize', options);\n\t\t// Validate all inputs are the correct size:\n\t\tthis.#blockData.inputs.forEach((input, index) => {\n\t\t\tif (is(input.value, PureCallArg)) {\n\t\t\t\tif (input.value.Pure.length > maxPureArgumentSize) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Input at index ${index} is too large, max pure input size is ${maxPureArgumentSize} bytes, got ${input.value.Pure.length} bytes`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// The current default is just picking _all_ coins we can which may not be ideal.\n\tasync #prepareGasPayment(options: BuildOptions) {\n\t\tif (this.#blockData.gasConfig.payment) {\n\t\t\tconst maxGasObjects = this.#getConfig('maxGasObjects', options);\n\t\t\tif (this.#blockData.gasConfig.payment.length > maxGasObjects) {\n\t\t\t\tthrow new Error(`Payment objects exceed maximum amount: ${maxGasObjects}`);\n\t\t\t}\n\t\t}\n\n\t\t// Early return if the payment is already set:\n\t\tif (options.onlyTransactionKind || this.#blockData.gasConfig.payment) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gasOwner = this.#blockData.gasConfig.owner ?? this.#blockData.sender;\n\n\t\tconst coins = await expectClient(options).getCoins({\n\t\t\towner: gasOwner!,\n\t\t\tcoinType: SUI_TYPE_ARG,\n\t\t});\n\n\t\tconst paymentCoins = coins.data\n\t\t\t// Filter out coins that are also used as input:\n\t\t\t.filter((coin) => {\n\t\t\t\tconst matchingInput = this.#blockData.inputs.find((input) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tis(input.value, BuilderCallArg) &&\n\t\t\t\t\t\t'Object' in input.value &&\n\t\t\t\t\t\t'ImmOrOwned' in input.value.Object\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn coin.coinObjectId === input.value.Object.ImmOrOwned.objectId;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\treturn !matchingInput;\n\t\t\t})\n\t\t\t.slice(0, this.#getConfig('maxGasObjects', options) - 1)\n\t\t\t.map((coin) => ({\n\t\t\t\tobjectId: coin.coinObjectId,\n\t\t\t\tdigest: coin.digest,\n\t\t\t\tversion: coin.version,\n\t\t\t}));\n\n\t\tif (!paymentCoins.length) {\n\t\t\tthrow new Error('No valid gas coins found for the transaction.');\n\t\t}\n\n\t\tthis.setGasPayment(paymentCoins);\n\t}\n\n\tasync #prepareGasPrice(options: BuildOptions) {\n\t\tif (options.onlyTransactionKind || this.#blockData.gasConfig.price) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setGasPrice(await expectClient(options).getReferenceGasPrice());\n\t}\n\n\tasync #prepareTransactions(options: BuildOptions) {\n\t\tconst { inputs, transactions } = this.#blockData;\n\n\t\tconst moveModulesToResolve: MoveCallTransaction[] = [];\n\n\t\t// Keep track of the object references that will need to be resolved at the end of the transaction.\n\t\t// We keep the input by-reference to avoid needing to re-resolve it:\n\t\tconst objectsToResolve: {\n\t\t\tid: string;\n\t\t\tinput: TransactionBlockInput;\n\t\t\tnormalizedType?: SuiMoveNormalizedType;\n\t\t}[] = [];\n\n\t\ttransactions.forEach((transaction) => {\n\t\t\t// Special case move call:\n\t\t\tif (transaction.kind === 'MoveCall') {\n\t\t\t\t// Determine if any of the arguments require encoding.\n\t\t\t\t// - If they don't, then this is good to go.\n\t\t\t\t// - If they do, then we need to fetch the normalized move module.\n\t\t\t\tconst needsResolution = transaction.arguments.some(\n\t\t\t\t\t(arg) => arg.kind === 'Input' && !is(inputs[arg.index].value, BuilderCallArg),\n\t\t\t\t);\n\n\t\t\t\tif (needsResolution) {\n\t\t\t\t\tmoveModulesToResolve.push(transaction);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the matching struct definition for the transaction, and use it to attempt to automatically\n\t\t\t// encode the matching inputs.\n\t\t\tconst transactionType = getTransactionType(transaction);\n\t\t\tif (!transactionType.schema) return;\n\n\t\t\tObject.entries(transaction).forEach(([key, value]) => {\n\t\t\t\tif (key === 'kind') return;\n\t\t\t\tconst keySchema = (transactionType.schema as any)[key];\n\t\t\t\tconst isArray = keySchema.type === 'array';\n\t\t\t\tconst wellKnownEncoding: WellKnownEncoding = isArray\n\t\t\t\t\t? keySchema.schema[TRANSACTION_TYPE]\n\t\t\t\t\t: keySchema[TRANSACTION_TYPE];\n\n\t\t\t\t// This argument has unknown encoding, assume it must be fully-encoded:\n\t\t\t\tif (!wellKnownEncoding) return;\n\n\t\t\t\tconst encodeInput = (index: number) => {\n\t\t\t\t\tconst input = inputs[index];\n\t\t\t\t\tif (!input) {\n\t\t\t\t\t\tthrow new Error(`Missing input ${value.index}`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Input is fully resolved:\n\t\t\t\t\tif (is(input.value, BuilderCallArg)) return;\n\t\t\t\t\tif (wellKnownEncoding.kind === 'object' && typeof input.value === 'string') {\n\t\t\t\t\t\t// The input is a string that we need to resolve to an object reference:\n\t\t\t\t\t\tobjectsToResolve.push({ id: input.value, input });\n\t\t\t\t\t} else if (wellKnownEncoding.kind === 'pure') {\n\t\t\t\t\t\t// Pure encoding, so construct BCS bytes:\n\t\t\t\t\t\tinput.value = Inputs.Pure(input.value, wellKnownEncoding.type);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Unexpected input format.');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (isArray) {\n\t\t\t\t\tvalue.forEach((arrayItem: TransactionArgument) => {\n\t\t\t\t\t\tif (arrayItem.kind !== 'Input') return;\n\t\t\t\t\t\tencodeInput(arrayItem.index);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tif (value.kind !== 'Input') return;\n\t\t\t\t\tencodeInput(value.index);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tif (moveModulesToResolve.length) {\n\t\t\tawait Promise.all(\n\t\t\t\tmoveModulesToResolve.map(async (moveCall) => {\n\t\t\t\t\tconst [packageId, moduleName, functionName] = moveCall.target.split('::');\n\n\t\t\t\t\tconst normalized = await expectClient(options).getNormalizedMoveFunction({\n\t\t\t\t\t\tpackage: normalizeSuiObjectId(packageId),\n\t\t\t\t\t\tmodule: moduleName,\n\t\t\t\t\t\tfunction: functionName,\n\t\t\t\t\t});\n\n\t\t\t\t\t// Entry functions can have a mutable reference to an instance of the TxContext\n\t\t\t\t\t// struct defined in the TxContext module as the last parameter. The caller of\n\t\t\t\t\t// the function does not need to pass it in as an argument.\n\t\t\t\t\tconst hasTxContext =\n\t\t\t\t\t\tnormalized.parameters.length > 0 && isTxContext(normalized.parameters.at(-1)!);\n\n\t\t\t\t\tconst params = hasTxContext\n\t\t\t\t\t\t? normalized.parameters.slice(0, normalized.parameters.length - 1)\n\t\t\t\t\t\t: normalized.parameters;\n\n\t\t\t\t\tif (params.length !== moveCall.arguments.length) {\n\t\t\t\t\t\tthrow new Error('Incorrect number of arguments.');\n\t\t\t\t\t}\n\n\t\t\t\t\tparams.forEach((param, i) => {\n\t\t\t\t\t\tconst arg = moveCall.arguments[i];\n\t\t\t\t\t\tif (arg.kind !== 'Input') return;\n\t\t\t\t\t\tconst input = inputs[arg.index];\n\t\t\t\t\t\t// Skip if the input is already resolved\n\t\t\t\t\t\tif (is(input.value, BuilderCallArg)) return;\n\n\t\t\t\t\t\tconst inputValue = input.value;\n\n\t\t\t\t\t\tconst serType = getPureSerializationType(param, inputValue);\n\n\t\t\t\t\t\tif (serType) {\n\t\t\t\t\t\t\tinput.value = Inputs.Pure(inputValue, serType);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst structVal = extractStructTag(param);\n\t\t\t\t\t\tif (structVal != null || (typeof param === 'object' && 'TypeParameter' in param)) {\n\t\t\t\t\t\t\tif (typeof inputValue !== 'string') {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`Expect the argument to be an object id string, got ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tobjectsToResolve.push({\n\t\t\t\t\t\t\t\tid: inputValue,\n\t\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t\tnormalizedType: param,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Unknown call arg type ${JSON.stringify(param, null, 2)} for value ${JSON.stringify(\n\t\t\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tif (objectsToResolve.length) {\n\t\t\tconst dedupedIds = [...new Set(objectsToResolve.map(({ id }) => id))];\n\t\t\tconst objectChunks = chunk(dedupedIds, MAX_OBJECTS_PER_FETCH);\n\t\t\tconst objects = (\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tobjectChunks.map((chunk) =>\n\t\t\t\t\t\texpectClient(options).multiGetObjects({\n\t\t\t\t\t\t\tids: chunk,\n\t\t\t\t\t\t\toptions: { showOwner: true },\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t).flat();\n\n\t\t\tlet objectsById = new Map(\n\t\t\t\tdedupedIds.map((id, index) => {\n\t\t\t\t\treturn [id, objects[index]];\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst invalidObjects = Array.from(objectsById)\n\t\t\t\t.filter(([_, obj]) => obj.error)\n\t\t\t\t.map(([id, _]) => id);\n\t\t\tif (invalidObjects.length) {\n\t\t\t\tthrow new Error(`The following input objects are invalid: ${invalidObjects.join(', ')}`);\n\t\t\t}\n\n\t\t\tobjectsToResolve.forEach(({ id, input, normalizedType }) => {\n\t\t\t\tconst object = objectsById.get(id)!;\n\t\t\t\tconst owner = object.data?.owner;\n\t\t\t\tconst initialSharedVersion =\n\t\t\t\t\towner && typeof owner === 'object' && 'Shared' in owner\n\t\t\t\t\t\t? owner.Shared.initial_shared_version\n\t\t\t\t\t\t: undefined;\n\n\t\t\t\tif (initialSharedVersion) {\n\t\t\t\t\t// There could be multiple transactions that reference the same shared object.\n\t\t\t\t\t// If one of them is a mutable reference, then we should mark the input\n\t\t\t\t\t// as mutable.\n\t\t\t\t\tconst mutable =\n\t\t\t\t\t\tisMutableSharedObjectInput(input.value) ||\n\t\t\t\t\t\t(normalizedType != null && extractMutableReference(normalizedType) != null);\n\n\t\t\t\t\tinput.value = Inputs.SharedObjectRef({\n\t\t\t\t\t\tobjectId: id,\n\t\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\t\tmutable,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tinput.value = Inputs.ObjectRef(getObjectReference(object as SuiObjectResponse)!);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Prepare the transaction by valdiating the transaction data and resolving all inputs\n\t * so that it can be built into bytes.\n\t */\n\tasync #prepare(options: BuildOptions) {\n\t\tif (!options.onlyTransactionKind && !this.#blockData.sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tconst client = options.client || options.provider;\n\n\t\tif (!options.protocolConfig && !options.limits && client) {\n\t\t\toptions.protocolConfig = await client.getProtocolConfig();\n\t\t}\n\n\t\tawait Promise.all([this.#prepareGasPrice(options), this.#prepareTransactions(options)]);\n\n\t\tif (!options.onlyTransactionKind) {\n\t\t\tawait this.#prepareGasPayment(options);\n\n\t\t\tif (!this.#blockData.gasConfig.budget) {\n\t\t\t\tconst dryRunResult = await expectClient(options).dryRunTransactionBlock({\n\t\t\t\t\ttransactionBlock: this.#blockData.build({\n\t\t\t\t\t\tmaxSizeBytes: this.#getConfig('maxTxSizeBytes', options),\n\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\tgasConfig: {\n\t\t\t\t\t\t\t\tbudget: String(this.#getConfig('maxTxGas', options)),\n\t\t\t\t\t\t\t\tpayment: [],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t\tif (dryRunResult.effects.status.status !== 'success') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,\n\t\t\t\t\t\t{ cause: dryRunResult },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst safeOverhead = GAS_SAFE_OVERHEAD * BigInt(this.blockData.gasConfig.price || 1n);\n\n\t\t\t\tconst baseComputationCostWithOverhead =\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;\n\n\t\t\t\tconst gasBudget =\n\t\t\t\t\tbaseComputationCostWithOverhead +\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.storageCost) -\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.storageRebate);\n\n\t\t\t\t// Set the budget to max(computation, computation + storage - rebate)\n\t\t\t\tthis.setGasBudget(\n\t\t\t\t\tgasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Perform final validation on the transaction:\n\t\tthis.#validate(options);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport class FaucetRateLimitError extends Error {}\n\ntype FaucetCoinInfo = {\n\tamount: number;\n\tid: string;\n\ttransferTxDigest: string;\n};\n\ntype FaucetResponse = {\n\ttransferredGasObjects: FaucetCoinInfo[];\n\terror?: string | null;\n};\n\ntype BatchFaucetResponse = {\n\ttask?: string | null;\n\terror?: string | null;\n};\n\ntype BatchSendStatusType = 'INPROGRESS' | 'SUCCEEDED' | 'DISCARDED';\n\ntype BatchStatusFaucetResponse = {\n\tstatus: BatchSendStatusType;\n\terror?: string | null;\n};\n\nasync function faucetRequest(\n\thost: string,\n\tpath: string,\n\tbody: Record<string, any>,\n\theaders?: HeadersInit,\n) {\n\tconst endpoint = new URL(path, host).toString();\n\tconst res = await fetch(endpoint, {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(body),\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(headers || {}),\n\t\t},\n\t});\n\n\tif (res.status === 429) {\n\t\tthrow new FaucetRateLimitError(\n\t\t\t`Too many requests from this client have been sent to the faucet. Please retry later`,\n\t\t);\n\t}\n\n\ttry {\n\t\tconst parsed = await res.json();\n\t\tif (parsed.error) {\n\t\t\tthrow new Error(`Faucet returns error: ${parsed.error}`);\n\t\t}\n\t\treturn parsed;\n\t} catch (e) {\n\t\tthrow new Error(\n\t\t\t`Encountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`,\n\t\t);\n\t}\n}\n\nexport async function requestSuiFromFaucetV0(input: {\n\thost: string;\n\trecipient: string;\n\theaders?: HeadersInit;\n}): Promise<FaucetResponse> {\n\treturn faucetRequest(\n\t\tinput.host,\n\t\t'/gas',\n\t\t{\n\t\t\tFixedAmountRequest: {\n\t\t\t\trecipient: input.recipient,\n\t\t\t},\n\t\t},\n\t\tinput.headers,\n\t);\n}\n\nexport async function requestSuiFromFaucetV1(input: {\n\thost: string;\n\trecipient: string;\n\theaders?: HeadersInit;\n}): Promise<BatchFaucetResponse> {\n\treturn faucetRequest(\n\t\tinput.host,\n\t\t'/v1/gas',\n\t\t{\n\t\t\tFixedAmountRequest: {\n\t\t\t\trecipient: input.recipient,\n\t\t\t},\n\t\t},\n\t\tinput.headers,\n\t);\n}\n\nexport async function getFaucetRequestStatus(input: {\n\thost: string;\n\ttaskId: string;\n\theaders?: HeadersInit;\n}): Promise<BatchStatusFaucetResponse> {\n\treturn faucetRequest(\n\t\tinput.host,\n\t\t'/v1/status',\n\t\t{\n\t\t\ttask_id: {\n\t\t\t\ttask_id: input.taskId,\n\t\t\t},\n\t\t},\n\t\tinput.headers,\n\t);\n}\n\nexport function getFaucetHost(network: 'testnet' | 'devnet' | 'localnet') {\n\tswitch (network) {\n\t\tcase 'testnet':\n\t\t\treturn 'https://faucet.testnet.sui.io';\n\t\tcase 'devnet':\n\t\t\treturn 'https://faucet.devnet.sui.io';\n\t\tcase 'localnet':\n\t\t\treturn 'http://127.0.0.1:9123';\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown network: ${network}`);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { HttpHeaders } from '../rpc/client.js';\nimport { JsonRpcClient } from '../rpc/client.js';\nimport type {\n\tExecuteTransactionRequestType,\n\tSuiEventFilter,\n\tSuiTransactionBlockResponseQuery,\n\tOrder,\n\tCheckpointDigest,\n\tSuiObjectDataOptions,\n\tSuiTransactionBlockResponseOptions,\n\tSuiEvent,\n\tSuiObjectResponseQuery,\n\tTransactionFilter,\n\tTransactionEffects,\n\tUnsubscribe,\n} from '../types/index.js';\nimport {\n\tPaginatedTransactionResponse,\n\tSuiMoveFunctionArgTypes,\n\tSuiMoveNormalizedFunction,\n\tSuiMoveNormalizedModule,\n\tSuiMoveNormalizedModules,\n\tSuiMoveNormalizedStruct,\n\tSuiTransactionBlockResponse,\n\tPaginatedEvents,\n\tDevInspectResults,\n\tPaginatedCoins,\n\tSuiObjectResponse,\n\tDelegatedStake,\n\tCoinBalance,\n\tCoinSupply,\n\tCheckpoint,\n\tCommitteeInfo,\n\tDryRunTransactionBlockResponse,\n\tSuiSystemStateSummary,\n\tPaginatedObjectsResponse,\n\tValidatorsApy,\n\tMoveCallMetrics,\n\tObjectRead,\n\tResolvedNameServiceNames,\n\tProtocolConfig,\n} from '../types/index.js';\nimport type { DynamicFieldName } from '../types/dynamic_fields.js';\nimport { DynamicFieldPage } from '../types/dynamic_fields.js';\nimport type { WebsocketClientOptions } from '../rpc/websocket-client.js';\nimport { DEFAULT_CLIENT_OPTIONS, WebsocketClient } from '../rpc/websocket-client.js';\nimport { any, array, string, nullable } from 'superstruct';\nimport { fromB58, toB64, toHEX } from '@mysten/bcs';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport type { Connection } from '../rpc/connection.js';\nimport { devnetConnection } from '../rpc/connection.js';\nimport type { TransactionBlock } from '../builder/index.js';\nimport { isTransactionBlock } from '../builder/index.js';\nimport { CheckpointPage } from '../types/checkpoints.js';\nimport { NetworkMetrics, AddressMetrics, AllEpochsAddressMetrics } from '../types/metrics.js';\nimport { EpochInfo, EpochPage } from '../types/epochs.js';\nimport { requestSuiFromFaucetV0 } from '../faucet/index.js';\nimport {\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tisValidTransactionDigest,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n} from '../utils/sui-types.js';\nimport type { CoinMetadata } from '../framework/framework.js';\nimport { CoinMetadataStruct } from '../framework/framework.js';\n\nexport interface PaginationArguments<Cursor> {\n\t/** Optional paging cursor */\n\tcursor?: Cursor;\n\t/** Maximum item returned per page */\n\tlimit?: number | null;\n}\n\nexport interface OrderArguments {\n\torder?: Order | null;\n}\n\n/**\n * Configuration options for the JsonRpcProvider. If the value of a field is not provided,\n * value in `DEFAULT_OPTIONS` for that field will be used\n */\nexport type RpcProviderOptions = {\n\t/**\n\t * Configuration options for the websocket connection\n\t * TODO: Move to connection.\n\t */\n\tsocketOptions?: WebsocketClientOptions;\n\t/**\n\t * Cache timeout in seconds for the RPC API Version\n\t */\n\tversionCacheTimeoutInSeconds?: number;\n\n\t/** Allow defining a custom RPC client to use */\n\trpcClient?: JsonRpcClient;\n\n\t/** Allow defining a custom websocket client to use */\n\twebsocketClient?: WebsocketClient;\n};\n\nconst DEFAULT_OPTIONS: RpcProviderOptions = {\n\tsocketOptions: DEFAULT_CLIENT_OPTIONS,\n\tversionCacheTimeoutInSeconds: 600,\n};\n\nexport class JsonRpcProvider {\n\tpublic connection: Connection;\n\tprotected client: JsonRpcClient;\n\tprotected wsClient: WebsocketClient;\n\tprivate rpcApiVersion: string | undefined;\n\tprivate cacheExpiry: number | undefined;\n\t/**\n\t * Establish a connection to a Sui RPC endpoint\n\t *\n\t * @param connection The `Connection` object containing configuration for the network.\n\t * @param options configuration options for the provider\n\t */\n\tconstructor(\n\t\t// TODO: Probably remove the default endpoint here:\n\t\tconnection: Connection = devnetConnection,\n\t\tpublic options: RpcProviderOptions = DEFAULT_OPTIONS,\n\t) {\n\t\tthis.connection = connection;\n\n\t\tconst opts = { ...DEFAULT_OPTIONS, ...options };\n\t\tthis.options = opts;\n\t\t// TODO: add header for websocket request\n\t\tthis.client = opts.rpcClient ?? new JsonRpcClient(this.connection.fullnode);\n\n\t\tthis.wsClient =\n\t\t\topts.websocketClient ?? new WebsocketClient(this.connection.websocket, opts.socketOptions);\n\t}\n\n\tasync getRpcApiVersion(): Promise<string | undefined> {\n\t\tif (this.rpcApiVersion && this.cacheExpiry && this.cacheExpiry <= Date.now()) {\n\t\t\treturn this.rpcApiVersion;\n\t\t}\n\n\t\ttry {\n\t\t\tconst resp = await this.client.requestWithType('rpc.discover', [], any());\n\t\t\tthis.rpcApiVersion = resp.info.version;\n\t\t\tthis.cacheExpiry =\n\t\t\t\t// Date.now() is in milliseconds, but the timeout is in seconds\n\t\t\t\tDate.now() + (this.options.versionCacheTimeoutInSeconds ?? 0) * 1000;\n\t\t\treturn this.rpcApiVersion;\n\t\t} catch (err) {\n\t\t\tconsole.warn('Error fetching version number of the RPC API', err);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/** @deprecated Use `@mysten/sui.js/faucet` instead. */\n\tasync requestSuiFromFaucet(recipient: string, headers?: HttpHeaders) {\n\t\tif (!this.connection.faucet) {\n\t\t\tthrow new Error('Faucet URL is not specified');\n\t\t}\n\n\t\treturn requestSuiFromFaucetV0({ host: this.connection.faucet, recipient, headers });\n\t}\n\n\t/**\n\t * Get all Coin<`coin_type`> objects owned by an address.\n\t */\n\tasync getCoins(\n\t\tinput: {\n\t\t\towner: string;\n\t\t\tcoinType?: string | null;\n\t\t} & PaginationArguments<PaginatedCoins['nextCursor']>,\n\t): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getCoins',\n\t\t\t[input.owner, input.coinType, input.cursor, input.limit],\n\t\t\tPaginatedCoins,\n\t\t);\n\t}\n\n\t/**\n\t * Get all Coin objects owned by an address.\n\t */\n\tasync getAllCoins(\n\t\tinput: {\n\t\t\towner: string;\n\t\t} & PaginationArguments<PaginatedCoins['nextCursor']>,\n\t): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getAllCoins',\n\t\t\t[input.owner, input.cursor, input.limit],\n\t\t\tPaginatedCoins,\n\t\t);\n\t}\n\n\t/**\n\t * Get the total coin balance for one coin type, owned by the address owner.\n\t */\n\tasync getBalance(input: {\n\t\towner: string;\n\t\t/** optional fully qualified type names for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified. */\n\t\tcoinType?: string | null;\n\t}): Promise<CoinBalance> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getBalance',\n\t\t\t[input.owner, input.coinType],\n\t\t\tCoinBalance,\n\t\t);\n\t}\n\n\t/**\n\t * Get the total coin balance for all coin types, owned by the address owner.\n\t */\n\tasync getAllBalances(input: { owner: string }): Promise<CoinBalance[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getAllBalances',\n\t\t\t[input.owner],\n\t\t\tarray(CoinBalance),\n\t\t);\n\t}\n\n\t/**\n\t * Fetch CoinMetadata for a given coin type\n\t */\n\tasync getCoinMetadata(input: { coinType: string }): Promise<CoinMetadata | null> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getCoinMetadata',\n\t\t\t[input.coinType],\n\t\t\tCoinMetadataStruct,\n\t\t);\n\t}\n\n\t/**\n\t *  Fetch total supply for a coin\n\t */\n\tasync getTotalSupply(input: { coinType: string }): Promise<CoinSupply> {\n\t\treturn await this.client.requestWithType('suix_getTotalSupply', [input.coinType], CoinSupply);\n\t}\n\n\t/**\n\t * Invoke any RPC method\n\t * @param method the method to be invoked\n\t * @param args the arguments to be passed to the RPC request\n\t */\n\tasync call(method: string, params: any[]): Promise<any> {\n\t\treturn await this.client.request(method, params);\n\t}\n\n\t/**\n\t * Get Move function argument types like read, write and full access\n\t */\n\tasync getMoveFunctionArgTypes(input: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t\tfunction: string;\n\t}): Promise<SuiMoveFunctionArgTypes> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getMoveFunctionArgTypes',\n\t\t\t[input.package, input.module, input.function],\n\t\t\tSuiMoveFunctionArgTypes,\n\t\t);\n\t}\n\n\t/**\n\t * Get a map from module name to\n\t * structured representations of Move modules\n\t */\n\tasync getNormalizedMoveModulesByPackage(input: {\n\t\tpackage: string;\n\t}): Promise<SuiMoveNormalizedModules> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getNormalizedMoveModulesByPackage',\n\t\t\t[input.package],\n\t\t\tSuiMoveNormalizedModules,\n\t\t);\n\t}\n\n\t/**\n\t * Get a structured representation of Move module\n\t */\n\tasync getNormalizedMoveModule(input: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t}): Promise<SuiMoveNormalizedModule> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getNormalizedMoveModule',\n\t\t\t[input.package, input.module],\n\t\t\tSuiMoveNormalizedModule,\n\t\t);\n\t}\n\n\t/**\n\t * Get a structured representation of Move function\n\t */\n\tasync getNormalizedMoveFunction(input: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t\tfunction: string;\n\t}): Promise<SuiMoveNormalizedFunction> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getNormalizedMoveFunction',\n\t\t\t[input.package, input.module, input.function],\n\t\t\tSuiMoveNormalizedFunction,\n\t\t);\n\t}\n\n\t/**\n\t * Get a structured representation of Move struct\n\t */\n\tasync getNormalizedMoveStruct(input: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t\tstruct: string;\n\t}): Promise<SuiMoveNormalizedStruct> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getNormalizedMoveStruct',\n\t\t\t[input.package, input.module, input.struct],\n\t\t\tSuiMoveNormalizedStruct,\n\t\t);\n\t}\n\n\t/**\n\t * Get all objects owned by an address\n\t */\n\tasync getOwnedObjects(\n\t\tinput: {\n\t\t\towner: string;\n\t\t} & PaginationArguments<PaginatedObjectsResponse['nextCursor']> &\n\t\t\tSuiObjectResponseQuery,\n\t): Promise<PaginatedObjectsResponse> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getOwnedObjects',\n\t\t\t[\n\t\t\t\tinput.owner,\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiObjectResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t],\n\t\t\tPaginatedObjectsResponse,\n\t\t);\n\t}\n\n\t/**\n\t * Get details about an object\n\t */\n\tasync getObject(input: {\n\t\tid: string;\n\t\toptions?: SuiObjectDataOptions;\n\t}): Promise<SuiObjectResponse> {\n\t\tif (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getObject',\n\t\t\t[input.id, input.options],\n\t\t\tSuiObjectResponse,\n\t\t);\n\t}\n\n\tasync tryGetPastObject(input: {\n\t\tid: string;\n\t\tversion: number;\n\t\toptions?: SuiObjectDataOptions;\n\t}): Promise<ObjectRead> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_tryGetPastObject',\n\t\t\t[input.id, input.version, input.options],\n\t\t\tObjectRead,\n\t\t);\n\t}\n\n\t/**\n\t * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n\t */\n\tasync multiGetObjects(input: {\n\t\tids: string[];\n\t\toptions?: SuiObjectDataOptions;\n\t}): Promise<SuiObjectResponse[]> {\n\t\tinput.ids.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Object id ${id}`);\n\t\t\t}\n\t\t});\n\t\tconst hasDuplicates = input.ids.length !== new Set(input.ids).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate object ids in batch call ${input.ids}`);\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_multiGetObjects',\n\t\t\t[input.ids, input.options],\n\t\t\tarray(SuiObjectResponse),\n\t\t);\n\t}\n\n\t/**\n\t * Get transaction blocks for a given query criteria\n\t */\n\tasync queryTransactionBlocks(\n\t\tinput: SuiTransactionBlockResponseQuery &\n\t\t\tPaginationArguments<PaginatedTransactionResponse['nextCursor']> &\n\t\t\tOrderArguments,\n\t): Promise<PaginatedTransactionResponse> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_queryTransactionBlocks',\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiTransactionBlockResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t\tPaginatedTransactionResponse,\n\t\t);\n\t}\n\n\tasync getTransactionBlock(input: {\n\t\tdigest: string;\n\t\toptions?: SuiTransactionBlockResponseOptions;\n\t}): Promise<SuiTransactionBlockResponse> {\n\t\tif (!isValidTransactionDigest(input.digest)) {\n\t\t\tthrow new Error('Invalid Transaction digest');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getTransactionBlock',\n\t\t\t[input.digest, input.options],\n\t\t\tSuiTransactionBlockResponse,\n\t\t);\n\t}\n\n\tasync multiGetTransactionBlocks(input: {\n\t\tdigests: string[];\n\t\toptions?: SuiTransactionBlockResponseOptions;\n\t}): Promise<SuiTransactionBlockResponse[]> {\n\t\tinput.digests.forEach((d) => {\n\t\t\tif (!isValidTransactionDigest(d)) {\n\t\t\t\tthrow new Error(`Invalid Transaction digest ${d}`);\n\t\t\t}\n\t\t});\n\n\t\tconst hasDuplicates = input.digests.length !== new Set(input.digests).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate digests in batch call ${input.digests}`);\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_multiGetTransactionBlocks',\n\t\t\t[input.digests, input.options],\n\t\t\tarray(SuiTransactionBlockResponse),\n\t\t);\n\t}\n\n\tasync executeTransactionBlock(input: {\n\t\ttransactionBlock: Uint8Array | string;\n\t\tsignature: SerializedSignature | SerializedSignature[];\n\t\toptions?: SuiTransactionBlockResponseOptions;\n\t\trequestType?: ExecuteTransactionRequestType;\n\t}): Promise<SuiTransactionBlockResponse> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_executeTransactionBlock',\n\t\t\t[\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toB64(input.transactionBlock),\n\t\t\t\tArray.isArray(input.signature) ? input.signature : [input.signature],\n\t\t\t\tinput.options,\n\t\t\t\tinput.requestType,\n\t\t\t],\n\t\t\tSuiTransactionBlockResponse,\n\t\t);\n\t}\n\n\t/**\n\t * Get total number of transactions\n\t */\n\n\tasync getTotalTransactionBlocks(): Promise<bigint> {\n\t\tconst resp = await this.client.requestWithType('sui_getTotalTransactionBlocks', [], string());\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Getting the reference gas price for the network\n\t */\n\tasync getReferenceGasPrice(): Promise<bigint> {\n\t\tconst resp = await this.client.requestWithType('suix_getReferenceGasPrice', [], string());\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Return the delegated stakes for an address\n\t */\n\tasync getStakes(input: { owner: string }): Promise<DelegatedStake[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getStakes',\n\t\t\t[input.owner],\n\t\t\tarray(DelegatedStake),\n\t\t);\n\t}\n\n\t/**\n\t * Return the delegated stakes queried by id.\n\t */\n\tasync getStakesByIds(input: { stakedSuiIds: string[] }): Promise<DelegatedStake[]> {\n\t\tinput.stakedSuiIds.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Stake id ${id}`);\n\t\t\t}\n\t\t});\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getStakesByIds',\n\t\t\t[input.stakedSuiIds],\n\t\t\tarray(DelegatedStake),\n\t\t);\n\t}\n\n\t/**\n\t * Return the latest system state content.\n\t */\n\tasync getLatestSuiSystemState(): Promise<SuiSystemStateSummary> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getLatestSuiSystemState',\n\t\t\t[],\n\t\t\tSuiSystemStateSummary,\n\t\t);\n\t}\n\n\t/**\n\t * Get events for a given query criteria\n\t */\n\tasync queryEvents(\n\t\tinput: {\n\t\t\t/** the event query criteria. */\n\t\t\tquery: SuiEventFilter;\n\t\t} & PaginationArguments<PaginatedEvents['nextCursor']> &\n\t\t\tOrderArguments,\n\t): Promise<PaginatedEvents> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_queryEvents',\n\t\t\t[input.query, input.cursor, input.limit, (input.order || 'descending') === 'descending'],\n\t\t\tPaginatedEvents,\n\t\t);\n\t}\n\n\t/**\n\t * Subscribe to get notifications whenever an event matching the filter occurs\n\t */\n\tasync subscribeEvent(input: {\n\t\t/** filter describing the subset of events to follow */\n\t\tfilter: SuiEventFilter;\n\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\tonMessage: (event: SuiEvent) => void;\n\t}): Promise<Unsubscribe> {\n\t\treturn this.wsClient.request({\n\t\t\tmethod: 'suix_subscribeEvent',\n\t\t\tunsubscribe: 'suix_unsubscribeEvent',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\tasync subscribeTransaction(input: {\n\t\t/** filter describing the subset of events to follow */\n\t\tfilter: TransactionFilter;\n\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\tonMessage: (event: TransactionEffects) => void;\n\t}): Promise<Unsubscribe> {\n\t\treturn this.wsClient.request({\n\t\t\tmethod: 'suix_subscribeTransaction',\n\t\t\tunsubscribe: 'suix_unsubscribeTransaction',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\t/**\n\t * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n\t * transaction (or Move call) with any arguments. Detailed results are\n\t * provided, including both the transaction effects and any return values.\n\t */\n\tasync devInspectTransactionBlock(input: {\n\t\ttransactionBlock: TransactionBlock | string | Uint8Array;\n\t\tsender: string;\n\t\t/** Default to use the network reference gas price stored in the Sui System State object */\n\t\tgasPrice?: bigint | number | null;\n\t\t/** optional. Default to use the current epoch number stored in the Sui System State object */\n\t\tepoch?: string | null;\n\t}): Promise<DevInspectResults> {\n\t\tlet devInspectTxBytes;\n\t\tif (isTransactionBlock(input.transactionBlock)) {\n\t\t\tinput.transactionBlock.setSenderIfNotSet(input.sender);\n\t\t\tdevInspectTxBytes = toB64(\n\t\t\t\tawait input.transactionBlock.build({\n\t\t\t\t\tprovider: this,\n\t\t\t\t\tonlyTransactionKind: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (typeof input.transactionBlock === 'string') {\n\t\t\tdevInspectTxBytes = input.transactionBlock;\n\t\t} else if (input.transactionBlock instanceof Uint8Array) {\n\t\t\tdevInspectTxBytes = toB64(input.transactionBlock);\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction block format.');\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_devInspectTransactionBlock',\n\t\t\t[input.sender, devInspectTxBytes, input.gasPrice, input.epoch],\n\t\t\tDevInspectResults,\n\t\t);\n\t}\n\n\t/**\n\t * Dry run a transaction block and return the result.\n\t */\n\tasync dryRunTransactionBlock(input: {\n\t\ttransactionBlock: Uint8Array | string;\n\t}): Promise<DryRunTransactionBlockResponse> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_dryRunTransactionBlock',\n\t\t\t[\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toB64(input.transactionBlock),\n\t\t\t],\n\t\t\tDryRunTransactionBlockResponse,\n\t\t);\n\t}\n\n\t/**\n\t * Return the list of dynamic field objects owned by an object\n\t */\n\tasync getDynamicFields(\n\t\tinput: {\n\t\t\t/** The id of the parent object */\n\t\t\tparentId: string;\n\t\t} & PaginationArguments<DynamicFieldPage['nextCursor']>,\n\t): Promise<DynamicFieldPage> {\n\t\tif (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getDynamicFields',\n\t\t\t[input.parentId, input.cursor, input.limit],\n\t\t\tDynamicFieldPage,\n\t\t);\n\t}\n\n\t/**\n\t * Return the dynamic field object information for a specified object\n\t */\n\tasync getDynamicFieldObject(input: {\n\t\t/** The ID of the quered parent object */\n\t\tparentId: string;\n\t\t/** The name of the dynamic field */\n\t\tname: string | DynamicFieldName;\n\t}): Promise<SuiObjectResponse> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getDynamicFieldObject',\n\t\t\t[input.parentId, input.name],\n\t\t\tSuiObjectResponse,\n\t\t);\n\t}\n\n\t/**\n\t * Get the sequence number of the latest checkpoint that has been executed\n\t */\n\tasync getLatestCheckpointSequenceNumber(): Promise<string> {\n\t\tconst resp = await this.client.requestWithType(\n\t\t\t'sui_getLatestCheckpointSequenceNumber',\n\t\t\t[],\n\t\t\tstring(),\n\t\t);\n\t\treturn String(resp);\n\t}\n\n\t/**\n\t * Returns information about a given checkpoint\n\t */\n\tasync getCheckpoint(input: {\n\t\t/** The checkpoint digest or sequence number */\n\t\tid: CheckpointDigest | string;\n\t}): Promise<Checkpoint> {\n\t\treturn await this.client.requestWithType('sui_getCheckpoint', [input.id], Checkpoint);\n\t}\n\n\t/**\n\t * Returns historical checkpoints paginated\n\t */\n\tasync getCheckpoints(\n\t\tinput: {\n\t\t\t/** query result ordering, default to false (ascending order), oldest record first */\n\t\t\tdescendingOrder: boolean;\n\t\t} & PaginationArguments<CheckpointPage['nextCursor']>,\n\t): Promise<CheckpointPage> {\n\t\tconst resp = await this.client.requestWithType(\n\t\t\t'sui_getCheckpoints',\n\t\t\t[input.cursor, input?.limit, input.descendingOrder],\n\t\t\tCheckpointPage,\n\t\t);\n\t\treturn resp;\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCommitteeInfo(input?: {\n\t\t/** The epoch of interest. If null, default to the latest epoch */\n\t\tepoch?: string | null;\n\t}): Promise<CommitteeInfo> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getCommitteeInfo',\n\t\t\t[input?.epoch],\n\t\t\tCommitteeInfo,\n\t\t);\n\t}\n\n\tasync getNetworkMetrics() {\n\t\treturn await this.client.requestWithType('suix_getNetworkMetrics', [], NetworkMetrics);\n\t}\n\n\tasync getAddressMetrics() {\n\t\treturn await this.client.requestWithType('suix_getLatestAddressMetrics', [], AddressMetrics);\n\t}\n\n\tasync getAllEpochAddressMetrics(input?: { descendingOrder?: boolean }) {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getAllEpochAddressMetrics',\n\t\t\t[input?.descendingOrder],\n\t\t\tAllEpochsAddressMetrics,\n\t\t);\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getEpochs(\n\t\tinput?: {\n\t\t\tdescendingOrder?: boolean;\n\t\t} & PaginationArguments<EpochPage['nextCursor']>,\n\t): Promise<EpochPage> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getEpochs',\n\t\t\t[input?.cursor, input?.limit, input?.descendingOrder],\n\t\t\tEpochPage,\n\t\t);\n\t}\n\n\t/**\n\t * Returns list of top move calls by usage\n\t */\n\tasync getMoveCallMetrics(): Promise<MoveCallMetrics> {\n\t\treturn await this.client.requestWithType('suix_getMoveCallMetrics', [], MoveCallMetrics);\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCurrentEpoch(): Promise<EpochInfo> {\n\t\treturn await this.client.requestWithType('suix_getCurrentEpoch', [], EpochInfo);\n\t}\n\n\t/**\n\t * Return the Validators APYs\n\t */\n\tasync getValidatorsApy(): Promise<ValidatorsApy> {\n\t\treturn await this.client.requestWithType('suix_getValidatorsApy', [], ValidatorsApy);\n\t}\n\n\t// TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n\tasync getChainIdentifier(): Promise<string> {\n\t\tconst checkpoint = await this.getCheckpoint({ id: '0' });\n\t\tconst bytes = fromB58(checkpoint.digest);\n\t\treturn toHEX(bytes.slice(0, 4));\n\t}\n\n\tasync resolveNameServiceAddress(input: { name: string }): Promise<string | null> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_resolveNameServiceAddress',\n\t\t\t[input.name],\n\t\t\tnullable(string()),\n\t\t);\n\t}\n\n\tasync resolveNameServiceNames(\n\t\tinput: {\n\t\t\taddress: string;\n\t\t} & PaginationArguments<ResolvedNameServiceNames['nextCursor']>,\n\t): Promise<ResolvedNameServiceNames> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_resolveNameServiceNames',\n\t\t\t[input.address],\n\t\t\tResolvedNameServiceNames,\n\t\t);\n\t}\n\n\tasync getProtocolConfig(input?: { version?: string }): Promise<ProtocolConfig> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getProtocolConfig',\n\t\t\t[input?.version],\n\t\t\tProtocolConfig,\n\t\t);\n\t}\n\n\t/**\n\t * Wait for a transaction block result to be available over the API.\n\t * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n\t * be available via the API.\n\t * This currently polls the `getTransactionBlock` API to check for the transaction.\n\t */\n\tasync waitForTransactionBlock({\n\t\tsignal,\n\t\ttimeout = 60 * 1000,\n\t\tpollInterval = 2 * 1000,\n\t\t...input\n\t}: {\n\t\t/** An optional abort signal that can be used to cancel */\n\t\tsignal?: AbortSignal;\n\t\t/** The amount of time to wait for a transaction block. Defaults to one minute. */\n\t\ttimeout?: number;\n\t\t/** The amount of time to wait between checks for the transaction block. Defaults to 2 seconds. */\n\t\tpollInterval?: number;\n\t} & Parameters<JsonRpcProvider['getTransactionBlock']>[0]): Promise<SuiTransactionBlockResponse> {\n\t\tconst timeoutSignal = AbortSignal.timeout(timeout);\n\t\tconst timeoutPromise = new Promise((_, reject) => {\n\t\t\ttimeoutSignal.addEventListener('abort', () => reject(timeoutSignal.reason));\n\t\t});\n\n\t\ttimeoutPromise.catch(() => {\n\t\t\t// Swallow unhandled rejections that might be thrown after early return\n\t\t});\n\n\t\twhile (!timeoutSignal.aborted) {\n\t\t\tsignal?.throwIfAborted();\n\t\t\ttry {\n\t\t\t\treturn await this.getTransactionBlock(input);\n\t\t\t} catch (e) {\n\t\t\t\t// Wait for either the next poll interval, or the timeout.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tnew Promise((resolve) => setTimeout(resolve, pollInterval)),\n\t\t\t\t\ttimeoutPromise,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\ttimeoutSignal.throwIfAborted();\n\n\t\t// This should never happen, because the above case should always throw, but just adding it in the event that something goes horribly wrong.\n\t\tthrow new Error('Unexpected error while waiting for transaction block.');\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { TransactionBlock } from '../builder/TransactionBlock.js';\nimport { isTransactionBlock } from '../builder/TransactionBlock.js';\nimport { TransactionBlockDataBuilder } from '../builder/TransactionBlockData.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport type { HttpHeaders } from '../rpc/client.js';\nimport type {\n\tExecuteTransactionRequestType,\n\tDevInspectResults,\n\tDryRunTransactionBlockResponse,\n\tSuiTransactionBlockResponse,\n\tSuiTransactionBlockResponseOptions,\n} from '../client/index.js';\nimport { getTotalGasUsedUpperBound } from '../types/index.js';\nimport { IntentScope, messageWithIntent } from '../cryptography/intent.js';\nimport type { Signer } from './signer.js';\nimport type { SignedTransaction, SignedMessage } from './types.js';\nimport type { SuiClient } from '../client/index.js';\nimport { bcs } from '../bcs/index.js';\n\n///////////////////////////////\n// Exported Abstracts\nexport abstract class SignerWithProvider implements Signer {\n\t/**\n\t * @deprecated Use `client` instead.\n\t */\n\tget provider(): JsonRpcProvider | SuiClient {\n\t\treturn this.client;\n\t}\n\n\treadonly client: SuiClient;\n\n\t///////////////////\n\t// Sub-classes MUST implement these\n\n\t// Returns the checksum address\n\tabstract getAddress(): Promise<string>;\n\n\t/**\n\t * Returns the signature for the data and the public key of the signer\n\t */\n\tabstract signData(data: Uint8Array): Promise<SerializedSignature>;\n\n\t// Returns a new instance of the Signer, connected to provider.\n\t// This MAY throw if changing providers is not supported.\n\tabstract connect(client: SuiClient | JsonRpcProvider): SignerWithProvider;\n\n\t///////////////////\n\t// Sub-classes MAY override these\n\n\t/**\n\t * Request gas tokens from a faucet server and send to the signer\n\t * address\n\t * @param httpHeaders optional request headers\n\t * @deprecated Use `@mysten/sui.js/faucet` instead.\n\t */\n\tasync requestSuiFromFaucet(httpHeaders?: HttpHeaders) {\n\t\tif (!('requestSuiFromFaucet' in this.provider)) {\n\t\t\tthrow new Error('To request SUI from faucet, please use @mysten/sui.js/faucet instead');\n\t\t}\n\n\t\treturn this.provider.requestSuiFromFaucet(await this.getAddress(), httpHeaders);\n\t}\n\n\tconstructor(client: JsonRpcProvider | SuiClient) {\n\t\tthis.client = client as SuiClient;\n\t}\n\n\t/**\n\t * Sign a message using the keypair, with the `PersonalMessage` intent.\n\t */\n\tasync signMessage(input: { message: Uint8Array }): Promise<SignedMessage> {\n\t\tconst signature = await this.signData(\n\t\t\tmessageWithIntent(\n\t\t\t\tIntentScope.PersonalMessage,\n\t\t\t\tbcs.ser(['vector', 'u8'], input.message).toBytes(),\n\t\t\t),\n\t\t);\n\n\t\treturn {\n\t\t\tmessageBytes: toB64(input.message),\n\t\t\tsignature,\n\t\t};\n\t}\n\n\tprotected async prepareTransactionBlock(transactionBlock: Uint8Array | TransactionBlock) {\n\t\tif (isTransactionBlock(transactionBlock)) {\n\t\t\t// If the sender has not yet been set on the transaction, then set it.\n\t\t\t// NOTE: This allows for signing transactions with mis-matched senders, which is important for sponsored transactions.\n\t\t\ttransactionBlock.setSenderIfNotSet(await this.getAddress());\n\t\t\treturn await transactionBlock.build({\n\t\t\t\tclient: this.client,\n\t\t\t});\n\t\t}\n\t\tif (transactionBlock instanceof Uint8Array) {\n\t\t\treturn transactionBlock;\n\t\t}\n\t\tthrow new Error('Unknown transaction format');\n\t}\n\n\t/**\n\t * Sign a transaction.\n\t */\n\tasync signTransactionBlock(input: {\n\t\ttransactionBlock: Uint8Array | TransactionBlock;\n\t}): Promise<SignedTransaction> {\n\t\tconst transactionBlockBytes = await this.prepareTransactionBlock(input.transactionBlock);\n\n\t\tconst intentMessage = messageWithIntent(IntentScope.TransactionData, transactionBlockBytes);\n\t\tconst signature = await this.signData(intentMessage);\n\n\t\treturn {\n\t\t\ttransactionBlockBytes: toB64(transactionBlockBytes),\n\t\t\tsignature,\n\t\t};\n\t}\n\n\t/**\n\t * Sign a transaction block and submit to the Fullnode for execution.\n\t *\n\t * @param options specify which fields to return (e.g., transaction, effects, events, etc).\n\t * By default, only the transaction digest will be returned.\n\t * @param requestType WaitForEffectsCert or WaitForLocalExecution, see details in `ExecuteTransactionRequestType`.\n\t * Defaults to `WaitForLocalExecution` if options.show_effects or options.show_events is true\n\t */\n\tasync signAndExecuteTransactionBlock(input: {\n\t\ttransactionBlock: Uint8Array | TransactionBlock;\n\t\t/** specify which fields to return (e.g., transaction, effects, events, etc). By default, only the transaction digest will be returned. */\n\t\toptions?: SuiTransactionBlockResponseOptions;\n\t\t/** `WaitForEffectsCert` or `WaitForLocalExecution`, see details in `ExecuteTransactionRequestType`.\n\t\t * Defaults to `WaitForLocalExecution` if options.show_effects or options.show_events is true\n\t\t */\n\t\trequestType?: ExecuteTransactionRequestType;\n\t}): Promise<SuiTransactionBlockResponse> {\n\t\tconst { transactionBlockBytes, signature } = await this.signTransactionBlock({\n\t\t\ttransactionBlock: input.transactionBlock,\n\t\t});\n\n\t\treturn await this.client.executeTransactionBlock({\n\t\t\ttransactionBlock: transactionBlockBytes,\n\t\t\tsignature,\n\t\t\toptions: input.options,\n\t\t\trequestType: input.requestType,\n\t\t});\n\t}\n\n\t/**\n\t * Derive transaction digest from\n\t * @param tx BCS serialized transaction data or a `Transaction` object\n\t * @returns transaction digest\n\t */\n\tasync getTransactionBlockDigest(tx: Uint8Array | TransactionBlock): Promise<string> {\n\t\tif (isTransactionBlock(tx)) {\n\t\t\ttx.setSenderIfNotSet(await this.getAddress());\n\t\t\treturn tx.getDigest({ client: this.client });\n\t\t} else if (tx instanceof Uint8Array) {\n\t\t\treturn TransactionBlockDataBuilder.getDigestFromBytes(tx);\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction format.');\n\t\t}\n\t}\n\n\t/**\n\t * Runs the transaction in dev-inpsect mode. Which allows for nearly any\n\t * transaction (or Move call) with any arguments. Detailed results are\n\t * provided, including both the transaction effects and any return values.\n\t */\n\tasync devInspectTransactionBlock(\n\t\tinput: Omit<Parameters<JsonRpcProvider['devInspectTransactionBlock']>[0], 'sender'>,\n\t): Promise<DevInspectResults> {\n\t\tconst address = await this.getAddress();\n\t\treturn this.client.devInspectTransactionBlock({\n\t\t\tsender: address,\n\t\t\t...input,\n\t\t});\n\t}\n\n\t/**\n\t * Dry run a transaction and return the result.\n\t */\n\tasync dryRunTransactionBlock(input: {\n\t\ttransactionBlock: TransactionBlock | string | Uint8Array;\n\t}): Promise<DryRunTransactionBlockResponse> {\n\t\tlet dryRunTxBytes: Uint8Array;\n\t\tif (isTransactionBlock(input.transactionBlock)) {\n\t\t\tinput.transactionBlock.setSenderIfNotSet(await this.getAddress());\n\t\t\tdryRunTxBytes = await input.transactionBlock.build({\n\t\t\t\tclient: this.client,\n\t\t\t});\n\t\t} else if (typeof input.transactionBlock === 'string') {\n\t\t\tdryRunTxBytes = fromB64(input.transactionBlock);\n\t\t} else if (input.transactionBlock instanceof Uint8Array) {\n\t\t\tdryRunTxBytes = input.transactionBlock;\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction format');\n\t\t}\n\n\t\treturn this.client.dryRunTransactionBlock({\n\t\t\ttransactionBlock: dryRunTxBytes,\n\t\t});\n\t}\n\n\t/**\n\t * Returns the estimated gas cost for the transaction\n\t * @param tx The transaction to estimate the gas cost. When string it is assumed it's a serialized tx in base64\n\t * @returns total gas cost estimation\n\t * @throws whens fails to estimate the gas cost\n\t */\n\tasync getGasCostEstimation(...args: Parameters<SignerWithProvider['dryRunTransactionBlock']>) {\n\t\tconst txEffects = await this.dryRunTransactionBlock(...args);\n\t\tconst gasEstimation = getTotalGasUsedUpperBound(txEffects.effects);\n\t\tif (typeof gasEstimation === 'undefined') {\n\t\t\tthrow new Error('Failed to estimate the gas cost from transaction');\n\t\t}\n\t\treturn gasEstimation;\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\nimport type { Keypair } from '../cryptography/keypair.js';\nimport { toSerializedSignature } from '../cryptography/signature.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport { SignerWithProvider } from './signer-with-provider.js';\nimport type { SuiClient } from '../client/index.js';\n\nexport class RawSigner extends SignerWithProvider {\n\tprivate readonly keypair: Keypair;\n\n\tconstructor(keypair: Keypair, client: JsonRpcProvider | SuiClient) {\n\t\tsuper(client);\n\t\tthis.keypair = keypair;\n\t}\n\n\tasync getAddress(): Promise<string> {\n\t\treturn this.keypair.getPublicKey().toSuiAddress();\n\t}\n\n\tasync signData(data: Uint8Array): Promise<SerializedSignature> {\n\t\tconst pubkey = this.keypair.getPublicKey();\n\t\tconst digest = blake2b(data, { dkLen: 32 });\n\t\tconst signature = this.keypair.signData(digest);\n\t\tconst signatureScheme = this.keypair.getKeyScheme();\n\n\t\treturn toSerializedSignature({\n\t\t\tsignatureScheme,\n\t\t\tsignature,\n\t\t\tpubKey: pubkey,\n\t\t});\n\t}\n\n\tconnect(client: SuiClient | JsonRpcProvider): SignerWithProvider {\n\t\treturn new RawSigner(this.keypair, client);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport { IntentScope } from '../cryptography/intent.js';\nimport { messageWithIntent } from '../cryptography/intent.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { toSingleSignaturePubkeyPair } from '../cryptography/utils.js';\nimport { bcs } from '../bcs/index.js';\n\n// TODO: This might actually make sense to eventually move to the `Keypair` instances themselves, as\n// it could allow the Sui.js to be tree-shaken a little better, possibly allowing keypairs that are\n// not used (and their deps) to be entirely removed from the bundle.\n\n/** Verify data that is signed with the expected scope. */\nexport async function verifyMessage(\n\tmessage: Uint8Array | string,\n\tserializedSignature: SerializedSignature,\n\tscope: IntentScope,\n) {\n\tconst signature = toSingleSignaturePubkeyPair(serializedSignature);\n\n\tif (scope === IntentScope.PersonalMessage) {\n\t\tconst messageBytes = messageWithIntent(\n\t\t\tscope,\n\t\t\tbcs.ser(['vector', 'u8'], typeof message === 'string' ? fromB64(message) : message).toBytes(),\n\t\t);\n\n\t\tif (await signature.pubKey.verify(blake2b(messageBytes, { dkLen: 32 }), signature.signature)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Fallback for backwards compatibility, old versions of the SDK\n\t\t// did not properly wrap PersonalMessages in a PersonalMessage bcs Struct\n\t\tconst unwrappedMessageBytes = messageWithIntent(\n\t\t\tscope,\n\t\t\ttypeof message === 'string' ? fromB64(message) : message,\n\t\t);\n\n\t\treturn signature.pubKey.verify(\n\t\t\tblake2b(unwrappedMessageBytes, { dkLen: 32 }),\n\t\t\tsignature.signature,\n\t\t);\n\t}\n\n\tconst messageBytes = messageWithIntent(\n\t\tscope,\n\t\ttypeof message === 'string' ? fromB64(message) : message,\n\t);\n\n\treturn signature.pubKey.verify(blake2b(messageBytes, { dkLen: 32 }), signature.signature);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nconst ELLIPSIS = '\\u{2026}';\n\nexport function formatAddress(address: string) {\n\tif (address.length <= 6) {\n\t\treturn address;\n\t}\n\n\tconst offset = address.startsWith('0x') ? 2 : 0;\n\n\treturn `0x${address.slice(offset, offset + 4)}${ELLIPSIS}${address.slice(-4)}`;\n}\n\nexport function formatDigest(digest: string) {\n\t// Use 10 first characters\n\treturn `${digest.slice(0, 10)}${ELLIPSIS}`;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { normalizeSuiObjectId } from '../utils/sui-types.js';\nimport { TransactionBlock } from '../builder/index.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport { getObjectReference } from '../types/index.js';\nimport type { SuiClient } from '../client/index.js';\nimport { SUI_SYSTEM_ADDRESS } from './framework.js';\n\n/**\n * Address of the Sui System object.\n * Always the same in every Sui network (local, devnet, testnet).\n */\nexport const SUI_SYSTEM_STATE_OBJECT_ID: string = normalizeSuiObjectId('0x5');\n\nexport const SUI_SYSTEM_MODULE_NAME = 'sui_system';\nexport const ADD_STAKE_FUN_NAME = 'request_add_stake';\nexport const ADD_STAKE_LOCKED_COIN_FUN_NAME = 'request_add_stake_with_locked_coin';\nexport const WITHDRAW_STAKE_FUN_NAME = 'request_withdraw_stake';\n\n/**\n * Utility class for `0x5` object\n */\nexport class SuiSystemStateUtil {\n\t/**\n\t * Create a new transaction for staking coins ready to be signed and executed with `signer-and-provider`.\n\t *\n\t * @param coins the coins to be staked\n\t * @param amount the amount to stake\n\t * @param gasBudget omittable only for DevInspect mode\n\t */\n\tpublic static async newRequestAddStakeTxn(\n\t\tclient: JsonRpcProvider | SuiClient,\n\t\tcoins: string[],\n\t\tamount: bigint,\n\t\tvalidatorAddress: string,\n\t): Promise<TransactionBlock> {\n\t\t// TODO: validate coin types and handle locked coins\n\t\tconst tx = new TransactionBlock();\n\n\t\tconst coin = tx.splitCoins(tx.gas, [tx.pure(amount)]);\n\t\ttx.moveCall({\n\t\t\ttarget: `${SUI_SYSTEM_ADDRESS}::${SUI_SYSTEM_MODULE_NAME}::${ADD_STAKE_FUN_NAME}`,\n\t\t\targuments: [tx.object(SUI_SYSTEM_STATE_OBJECT_ID), coin, tx.pure(validatorAddress)],\n\t\t});\n\t\tconst coinObjects = await client.multiGetObjects({\n\t\t\tids: coins,\n\t\t\toptions: {\n\t\t\t\tshowOwner: true,\n\t\t\t},\n\t\t});\n\t\ttx.setGasPayment(coinObjects.map((obj) => getObjectReference(obj)!));\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Create a new transaction for withdrawing coins ready to be signed and\n\t * executed with `signer-and-provider`.\n\t *\n\t * @param stake the stake object created in the requestAddStake txn\n\t * @param stakedCoinId the coins to withdraw\n\t * @param gasBudget omittable only for DevInspect mode\n\t */\n\tpublic static async newRequestWithdrawlStakeTxn(\n\t\tstake: string,\n\t\tstakedCoinId: string,\n\t): Promise<TransactionBlock> {\n\t\tconst tx = new TransactionBlock();\n\t\ttx.moveCall({\n\t\t\ttarget: `${SUI_SYSTEM_ADDRESS}::${SUI_SYSTEM_MODULE_NAME}::${WITHDRAW_STAKE_FUN_NAME}`,\n\t\t\targuments: [tx.object(SUI_SYSTEM_STATE_OBJECT_ID), tx.object(stake), tx.object(stakedCoinId)],\n\t\t});\n\n\t\treturn tx;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["ReflectApply", "ReflectOwnKeys", "NumberIsNaN", "once", "g", "RequestManager", "d", "b", "JSONRPCError", "TransportRequestManager", "Transport", "d", "b", "EventEmitterTransport", "Headers", "fetch", "decode", "d", "b", "g", "mod", "HTTPTransport", "d", "b", "g", "mod", "WebSocketTransport", "d", "b", "g", "PostMessageTransport", "d", "b", "g", "PostMessageIframeTransport", "g", "Client", "mod", "bs58", "num", "self", "writer", "name", "params", "reader", "typeName", "bcs", "writer", "reader", "SUI_ADDRESS_LENGTH", "VECTOR", "bcs", "encode", "decode", "AppId", "IntentVersion", "IntentScope", "SUI_ADDRESS_LENGTH", "sha256", "num", "object", "_0n", "_1n", "_0n", "number", "_1n", "num", "_0n", "_1n", "_1n", "_0n", "_1n", "num", "num", "_1n", "createHasher", "Point", "num", "_0n", "_1n", "mask", "window", "Point", "wbits", "_0n", "num", "_2n", "_0n", "_1n", "_3n", "_4n", "pointToBytes", "Point", "endo", "tv5", "c1", "c2", "randomBytes", "hmac", "number", "r", "s", "isHex", "is", "Point", "create", "Point", "createHasher", "createHasher", "sha256", "_0n", "_1n", "_2n", "_3n", "createHasher", "hashToCurve", "encodeToCurve", "sha256", "nacl", "bytes", "PublicKey", "import_tweetnacl", "import_tweetnacl", "sha512", "nacl", "K", "g", "num", "HARDENED_OFFSET", "sha256", "PublicKey", "GasCostSummary", "value", "sha256", "RPCValidationError", "import_client_js", "client", "__privateAdd", "__privateSet", "__privateGet", "create", "UpgradePolicy", "create", "option", "_Delegation", "create", "_TransactionBlock", "__privateAdd", "__privateSet", "__privateGet", "__privateMethod", "create", "chunk", "object", "messageBytes"]
}
